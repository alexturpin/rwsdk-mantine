<page>
  <title>Mantine</title>
  <url>https://mantine.dev</url>
  <content>A fully featured React  
components library
-------------------------------------------

Build fully functional accessible web applications faster than ever – Mantine includes more than 120 customizable components and 70 hooks to cover you in any situation

120+ components
---------------

Build your next app faster with high-quality, well-tested components. Mantine includes everything you need to create complex web applications with ease: custom select, date pickers, notifications, modals, and more.

Hooks library
-------------

70+ hooks for handling tricky and common parts of your application

[Browse all hooks](https://mantine.dev/hooks/package/)

Resize element by dragging its right bottom corner
| Property | Value |
| --- | --- |
| width | 0 |
| height | 0 |

EyeDropper API is not supported in your browser

Flexible styling
----------------

Mantine components are built with native CSS – styles are performant and easy to override

[Learn more about styles](https://mantine.dev/styles/styles-overview/)

### Built with CSS

Mantine styles are exposed as .css files – styles are performant and do not have any runtime overhead

### Override anything

All Mantine components support Styles API which allows to override any part of component styles with inline styles of classes

### PostCSS preset

postcss-preset-mantine includes mixins and functions to apply dark/light, rtl and responsive styles

### Compatible with any styling solution

You can bring your own library to style Mantine components (Emotion, Vanilla Extract, Sass, etc.) – you are not limited to any specific tool

Dark color scheme
-----------------

Add dark theme to your application with just a few lines of code – Mantine exports global styles both for light and dark theme, all components support dark theme out of the box.

Combobox component
------------------

Combobox is a composable component which can be used to create custom select, multiselect, autocomplete, tags input and other similar components. It provides a lot of flexibility and gives you full control over the UI and behavior while keeping your codebase clean and simple.

[Explore all 50+ Combobox examples](https://mantine.dev/combobox/?e=BasicSelect)

Pick value or type anything

Extensions
----------

Extensions are additional packages that provide extra functionality to Mantine, such as rich text editor, notifications system, charts, modals manager and more. They are built to be easily integrated into your application and provide a seamless experience.

[Browse all extensions](https://mantine.dev/x/extensions/)

Form library
------------

@mantine/form – performant form library designed for Mantine components. Works out of the box with all Mantine inputs.

[Explore all form features](https://mantine.dev/form/package/)

### Seamless integration

useForm hook works out of the box with all Mantine inputs

### Excellent performance

useForm rerenders only for validation and status changes, usually only 2-3 times per form lifecycle

### Lightweight

6.3kb minified + gzipped, no dependencies except React

### Fully featured

useForm supports lists and nested objects, multiple validation approaches (including schema based with zod) and an easy way to manage subscriptions to values updates

Build even faster with Mantine UI

120+ responsive components  
built with Mantine
-----------------------------------------------

Build your next website even faster with premade responsive components designed and built by Mantine maintainers and community. All components are free forever for everyone.

Join the community
------------------

Mantine is an open-source project with a growing community of developers and contributors. Join us on GitHub, Discord, Twitter and other platforms to stay updated and get help with your projects.

Ready to get started?
---------------------

Mantine can be used with any modern React framework or build tool: get started with Next.js, Vite, React Router and other tools in minutes by following the installation guide or using one of the available templates.

[Get started without a framework](https://mantine.dev/)</content>
</page>

<page>
  <title>Mantine</title>
  <url>https://mantine.dev/colors-generator/</url>
  <content>    import { MantineProvider, createTheme, MantineColorsTuple } from '@mantine/core';
    
    const myColor: MantineColorsTuple = [
      '#ecf4ff',
      '#dce4f5',
      '#b9c7e2',
      '#94a8d0',
      '#748dc0',
      '#5f7cb7',
      '#5474b4',
      '#44639f',
      '#3a5890',
      '#2c4b80'
    ];
    
    const theme = createTheme({
      colors: {
        myColor,
      }
    });
    
    function Demo() {
      return (
        <MantineProvider theme={theme}>
          {/* Your app here */}
        </MantineProvider>
      );
    }</content>
</page>

<page>
  <title>Get started | Mantine</title>
  <url>https://mantine.dev/hooks/package/</url>
  <content>Mantine hooks
-------------

[@mantine/hooks](https://www.npmjs.com/package/@mantine/hooks) package provides more than 70 hooks to build custom components. `@mantine/hooks` package is used internally in most of other `@mantine/*` packages – it is required to be installed in your project to use Mantine components.

[Installation](#installation)
-----------------------------

[Usage](#usage)
---------------

`@mantine/hooks` package can be used in any web React application, state management hooks (like [use-pagination](https://mantine.dev/hooks/use-pagination/) or [use-queue](https://mantine.dev/hooks/use-queue/)) are also compatible with React Native. The package can be used even if you do not use Mantine components or other Mantine libraries – it is standalone and does not have any dependencies except React.

Example of using [use-move](https://mantine.dev/hooks/use-move/) hook to create a custom slider:

[License](#license)
-------------------

MIT</content>
</page>

<page>
  <title>Getting started | Mantine</title>
  <url>https://mantine.dev/getting-started/</url>
  <content>[Get started with a template](#get-started-with-a-template)
-----------------------------------------------------------

The easiest way to get started is to use one of the templates. All templates include required dependencies and pre-configured settings. Some templates also include additional features like [Jest](https://jestjs.io/), [Storybook](https://storybook.js.org/), [ESLint](https://eslint.org/), etc.

Templates include only `@mantine/core` and `@mantine/hooks` packages, if you need additional `@mantine/*` packages, follow installation instructions of the package you want to use.

To get started with a template, open it on GitHub and click "Use this template" button. In order to use this feature you need to be logged in to your GitHub account. If you are not familiar with GitHub, you can find a detailed instruction on how to bootstrap a project from a template [in this article](https://help.mantine.dev/q/templates-usage).

Templates list:

<table><tbody><tr data-with-row-border="true" data-hover="true"><td></td><td><p>next-app-template</p><p>Next.js template with app router and full setup: Jest, Storybook, ESLint</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/mantinedev/next-app-template" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>next-pages-template</p><p>Next.js template with pages router and full setup: Jest, Storybook, ESLint</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/mantinedev/next-pages-template" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>next-app-min-template</p><p>Next.js template with app router and minimal setup – no additional tools included, only default Next.js configuration</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/mantinedev/next-app-min-template" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>next-pages-min-template</p><p>Next.js template with pages router and minimal setup – no additional tools included, only default Next.js configuration</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/mantinedev/next-pages-min-template" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>next-vanilla-extract-template</p><p>Next.js template with Vanilla extract example</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/mantinedev/next-vanilla-extract-template" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>vite-template</p><p>Vite template with full setup: Vitest, Prettier, Storybook, ESLint</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/mantinedev/vite-template" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>vite-min-template</p><p>Vite template with minimal setup – no additional tools included, only default Vite configuration</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/mantinedev/vite-min-template" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>vite-vanilla-extract-template</p><p>Vite template with Vanilla extract example</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/mantinedev/vite-vanilla-extract-template" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>gatsby-template</p><p>Gatsby template with basic setup</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/mantinedev/gatsby-template" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>redwood-template</p><p>RedwoodJS template with basic setup</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/mantinedev/redwood-template" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr></tbody></table>

[Community templates](#community-templates)
-------------------------------------------

Community templates are created and maintained by the community members. These templates include additional features and third-party integrations. You are welcome to share your template with the community by following [this guide](https://help.mantine.dev/q/submit-template).

<table><tbody><tr data-with-row-border="true" data-hover="true"><td></td><td><p>Your template here</p><p>Create a template with your stack and share it with the community</p></td><td><a data-size="xs" href="https://help.mantine.dev/q/submit-template"><span><span>Submit template</span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>t3-template</p><p>Next.js app router T3 stack template</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/WillKirkmanM/mantine-t3-template" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>next-tailwind-template</p><p>Next.js app router + Mantine + Tailwind template</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/songkeys/next-app-mantine-tailwind-template" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>next-bun-template</p><p>Next.js app router + Mantine + Bun template</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/KennethAduan/kenstack-bun-nextjs-mantine/" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>ship-template</p><p>Fullstack boilerplate with Next.js, auth, MongoDB, Turborepo</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/paralect/ship" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>next-turborepo-template</p><p>App router + Mantine + Turborepo template</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/ynssenem/next-mantine-turborepo" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>nextra-documentation-template</p><p>Nextra + Mantine template</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/gfazioli/next-app-nextra-template" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>nx-vite-monorepo-template</p><p>NX monorepo template with: Vite, GraphQL / Apollo, Typescript, Storybook / CSS Modules</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/dipiash/nx-vite-react-ts-mantine-boilerplate" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>dashboard-template</p><p>Vite + Redux + i18next + auth + Mantine dashboard template</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/auronvila/mantine-template" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>supabase-template</p><p>Vite + Supabase + Mantine template</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/LanVukusic/mantine-supabase-template" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>waku-template</p><p>Vite + Waku + Mantine template</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/doiska/waku-mantine-starter" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>tanstack-start-cloudflare-template</p><p>Tanstack Start + Cloudflare + Mantine template</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/tylim88/Tanstack-Start-Mantine-Tailwind-Template" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>react-router-template</p><p>Basic react-router + Mantine template</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/samui-build/react-router-mantine" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr></tbody></table>

[Framework guide](#framework-guide)
-----------------------------------

If you want to add Mantine to an existing project or prefer to set up everything manually, follow one of the guides below to get started with Mantine and your preferred framework.

[Can I use Mantine with create-react-app?](#can-i-use-mantine-with-create-react-app)
------------------------------------------------------------------------------------

[Create React App](https://create-react-app.dev/) was deprecated in early 2023 ([comment from maintainers](https://github.com/reactjs/react.dev/pull/5487#issuecomment-1409720741)). It is not recommended to use it for new projects. It is recommended to use [Vite](https://vitejs.dev/) or [Next.js](https://nextjs.org/) instead. Starting from version 7.0, certain Mantine styling features are no longer officially supported in Create React App. If you still prefer to use Create React App, follow [this guide](https://help.mantine.dev/q/can-i-use-mantine-with-cra).

[Get started without framework](#get-started-without-framework)
---------------------------------------------------------------

Choose packages that you will use in your application:

|  | Package | Description |
| --- | --- | --- |
|  | `@mantine/hooks` | 
Hooks for state and UI management

 |
|  | `@mantine/core` | 

Core components library: inputs, buttons, overlays, etc.

 |
|  | `@mantine/form` | 

Form management library

 |
|  | `@mantine/dates` | 

Date inputs, calendars

 |
|  | `@mantine/charts` | 

Recharts based charts library

 |
|  | `@mantine/notifications` | 

Notifications system

 |
|  | `@mantine/code-highlight` | 

Code highlight with your theme colors and styles

 |
|  | `@mantine/tiptap` | 

Rich text editor based on Tiptap

 |
|  | `@mantine/dropzone` | 

Capture files with drag and drop

 |
|  | `@mantine/carousel` | 

Embla based carousel component

 |
|  | `@mantine/spotlight` | 

Overlay command center

 |
|  | `@mantine/modals` | 

Centralized modals manager

 |
|  | `@mantine/nprogress` | 

Navigation progress

 |

Install dependencies:

Install PostCSS plugins and [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/):

> **PostCSS without framework**
> 
> If you are using a framework that is not officially supported, you may need to configure PostCSS manually. Please refer to the framework's documentation for specific instructions. For instance, if you are using Webpack, it will be necessary to install and set up [postcss-loader](https://webpack.js.org/loaders/postcss-loader/).

Create `postcss.config.cjs` file at the root of your application with the following content:

Add styles imports to the root of your application. Usually styles are imported once in the root file. For example, if you are using Next.js with pages router, you can import styles in `_app.tsx` file:

Wrap your application with [MantineProvider](https://mantine.dev/theming/mantine-provider/):

If your application has server side rendering, add [ColorSchemeScript](https://mantine.dev/theming/color-schemes/) to the `<head />` of your application:

All set! You can now use Mantine components in your application.

[Set up VS Code](#set-up-vs-code)
---------------------------------

By default, VS Code does not recognize postcss syntax, you need to install [PostCSS Intellisense and Highlighting](https://marketplace.visualstudio.com/items?itemName=vunguyentuan.vscode-postcss) to enable syntax highlighting and suppress variables (`$variable`) errors.

To get CSS variables autocomplete, install [CSS Variable Autocomplete extension](https://marketplace.visualstudio.com/items?itemName=vunguyentuan.vscode-css-variables). Then create `.vscode/settings.json` file in the root folder of your project with the following content:

[Learn](#learn)
---------------

Before you jump into the code, it is recommended to learn more about Mantine theming and styling options. The most important documentation pages are:

*   [Theme object](https://mantine.dev/theming/theme-object/) – learn about available theme properties
*   [Colors](https://mantine.dev/theming/colors/) – learn how to add/replace colors in the theme object
*   [CSS modules](https://mantine.dev/styles/css-modules/) – learn how to use CSS modules with Mantine
*   [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/) – learn about `postcss-preset-mantine` functions and mixins
*   [Responsive styles](https://mantine.dev/styles/responsive/) – learn how to apply responsive styles to components
*   [Styles API](https://mantine.dev/styles/styles-api/) – learn how to style internal elements of any component
*   [Polymorphic components](https://mantine.dev/guides/polymorphic/) – learn how to use polymorphic components to change rendered element

[Support Mantine](#support-mantine)
-----------------------------------

All contributions to the projects are welcome and appreciated. Contribute financially by [sponsoring the project on OpenCollective](https://opencollective.com/mantinedev). Your sponsorship will help us to maintain the project and develop new features.

[Sponsor Mantine](https://opencollective.com/mantinedev)

Other ways to support the project:

*   Share your feedback in [GitHub Discussions](https://github.com/mantinedev/mantine/discussions/categories/feedback) – we are always happy to hear your thoughts on how to improve Mantine. Most of the new features and components are based on the feedback received from the community.
*   Help others on [Discord](https://discord.gg/wbH82zuWMN) and/or [GitHub Discussions](https://github.com/mantinedev/mantine/discussions). There are usually 10-20 new questions every day, you can help people with their issues and questions. While helping others, you will learn yourself and become more proficient with React and Mantine.
*   Give us a code review. You are welcome to explore the [source code](https://github.com/mantinedev/mantine) of `@mantine/*` packages and provide your feedback on how it can be improved. We are always open to new ideas and suggestions.
*   Send us some [kind words](https://github.com/mantinedev/mantine/discussions/categories/kind-words). We usually receive only bug reports and feature requests, it is always nice to hear that people enjoy working with Mantine.
*   Star the project on [GitHub](https://github.com/mantinedev/mantine). It is a small thing that helps us grow and get more people interested in the project.
*   [Contribute](https://mantine.dev/contribute/) to the Mantine codebase. We welcome all kinds of contributions: if you do not have much experience with React/TypeScript, you can help us improve the documentation to make it more clear and understandable for new developers. If you are an experienced React developer, you can help us with open [issues](https://github.com/mantinedev/mantine/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22).
*   If you are using Mantine at work and your company wants to support the project, you can allocate some time of your engineers to contribute to Mantine.

[Mantine for Figma](#mantine-for-figma)
---------------------------------------

Design is not a part of the development process – there are no official Figma or Sketch design files. However, there are community-driven projects that provide Figma components based on Mantine. Note that these projects are not maintained by Mantine team, and it is not guaranteed that they are up-to-date with the latest Mantine version.

*   [Design files by **Ravn**](https://www.figma.com/community/file/1293978471602433537)
*   [Design files by **In The Zone**](https://www.figma.com/community/file/1067173247578645134)
*   [Design files by **Devias**](https://www.figma.com/community/file/1212329956432440320/Mantine-UI-Design-System---v5.10)
*   [Design files by **AlleyCorp Nord**](https://www.figma.com/community/file/1294398524808646906/mantine-lean-ui-library-alley-corp-nord)

[License](#license)
-------------------

All `@mantine/*` packages are distributed under [MIT](https://github.com/mantinedev/mantine/blob/master/LICENSE) license. You can use them in any project, commercial or not, with or without attribution. All `@mantine/*` packages dependencies are also distributed under MIT license.</content>
</page>

<page>
  <title>use-move | Mantine</title>
  <url>https://mantine.dev/hooks/use-move/</url>
  <content>[Usage](#usage)
---------------

`use-move` handles move behavior over any element:

[API](#api)
-----------

The hook accepts a callback that is called when user moves pressed mouse over the given element and returns an object with `ref` and active state:

`x` and `y` values are always between `0` and `1`, you can use them to calculate value in your boundaries.

[Horizontal slider](#horizontal-slider)
---------------------------------------

You can ignore changes for one of the axis:

[Horizontal slider with styles](#horizontal-slider-with-styles)
---------------------------------------------------------------

[Vertical slider](#vertical-slider)
-----------------------------------

Moving the slider down increases the value, to reverse that set value to `1 - y` in your `setValue` function:

[Color picker](#color-picker)
-----------------------------

[clampUseMovePosition](#clampusemoveposition)
---------------------------------------------

`clampUseMovePosition` function can be used to clamp `x` and `y` values to `0-1` range. It is useful when you want to use external events to change the value, for example changing value with keyboard arrows:

[UseMovePosition](#usemoveposition)
-----------------------------------

`@mantine/hooks` exports `UseMovePosition` type, it can be used as a type parameter for `useState`:

[Definition](#definition)
-------------------------

[Exported types](#exported-types)
---------------------------------

`UseMovePosition`, `UseMoveReturnValue` and `UseMoveHandlers` types are exported from `@mantine/hooks` package, you can import them in your application:</content>
</page>

<page>
  <title>use-resize-observer | Mantine</title>
  <url>https://mantine.dev/hooks/use-resize-observer/</url>
  <content>[Usage](#usage)
---------------

Resize element by dragging its right bottom corner
| Property | Value |
| --- | --- |
| width | 0 |
| height | 0 |

[API](#api)
-----------

`use-resize-observer` returns a `ref` object that should be passed to the observed element, and the current element content rect, as returned by `ResizeObserver`'s callback `entry.contentRect`. See [Resize Observer API](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver) documentation to learn more. On the first render (as well as during SSR), or when no element is being observed, all of the properties are equal to `0`.

See also [use-element-size](https://mantine.dev/hooks/use-element-size/) hook in case you need to subscribe only to `width` and `height`.

[Definition](#definition)
-------------------------</content>
</page>

<page>
  <title>use-hotkeys | Mantine</title>
  <url>https://mantine.dev/hooks/use-hotkeys/</url>
  <content>[Usage](#usage)
---------------

`use-hotkeys` accepts as its first argument an array of hotkeys and handler tuples:

*   `hotkey` - hotkey string, for example `ctrl+E`, `shift+alt+L`, `mod+S`
*   `handler` - event handler called when a given combination was pressed
*   `options` - object with extra options for hotkey handler

The second argument is a list of HTML tags on which hotkeys should be ignored. By default, hotkeys events are ignored if the focus is in `input`, `textarea` and `select` elements.

[Targeting elements](#targeting-elements)
-----------------------------------------

`use-hotkeys` hook can work only with document element, you will need to create your own event listener if you need to support other elements. For this purpose, `@mantine/hooks` package exports `getHotkeyHandler` function which should be used with `onKeyDown`:

Press ⌘+Enter or Ctrl+Enter when input has focus to send message

With `getHotkeyHandler` you can also add events to any dom node using `.addEventListener`:

[Supported formats](#supported-formats)
---------------------------------------

*   `mod+S` – detects `⌘+S` on macOS and `Ctrl+S` on Windows
*   `ctrl+shift+X` – handles multiple modifiers
*   `alt + shift + L` – you can use whitespace inside hotkey
*   `ArrowLeft` – you can use special keys using [this format](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)
*   `shift + [plus]` – you can use `[plus]` to detect `+` key
*   `Digit1` and `Hotkey1` - You can use physical key assignments [defined on MDN](https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_code_values).

[Types](#types)
---------------

`@mantine/hooks` exports `HotkeyItemOptions` and `HotkeyItem` types:

`HotkeyItemOptions` provides the `usePhysicalKeys` option to force the physical key assignment. Useful for non-QWERTY keyboard layouts.

`HotkeyItem` type can be used to create hotkey items outside of `use-hotkeys` hook:

[Definition](#definition)
-------------------------

[Exported types](#exported-types)
---------------------------------

`HotkeyItemOptions` and `HotkeyItem` types are exported from `@mantine/hooks` package, you can import them in your application:</content>
</page>

<page>
  <title>use-eye-dropper | Mantine</title>
  <url>https://mantine.dev/hooks/use-eye-dropper/</url>
  <content>`use-eye-dropper` hook provides an interface to work with [EyeDropper API](https://developer.mozilla.org/en-US/docs/Web/API/EyeDropper_API). Check [browser support](https://caniuse.com/mdn-api_eyedropper) to learn which browsers support the API.

EyeDropper API is not supported in your browser

    import { useState } from 'react';
    import { ActionIcon, Group, ColorSwatch, Text } from '@mantine/core';
    import { IconColorPicker } from '@tabler/icons-react';
    import { useEyeDropper } from '@mantine/hooks';
    
    function Demo() {
      const [color, setColor] = useState('');
      const [error, setError] = useState<Error | null>(null);
      const { supported, open } = useEyeDropper();
    
      const pickColor = async () => {
        try {
          const { sRGBHex } = (await open())!;
          setColor(sRGBHex);
        } catch (e) {
          setError(e as Error);
        }
      };
    
      if (!supported) {
        return <Text ta="center">EyeDropper API is not supported in your browser</Text>;
      }
    
      return (
        <Group>
          <ActionIcon variant="default" onClick={pickColor} size="xl" radius="md">
            <IconViewfinder size={28} stroke={1.5} />
          </ActionIcon>
          {color ? (
            <Group gap="xs">
              <ColorSwatch color={color} />
              <Text>Picked color: {color}</Text>
            </Group>
          ) : (
            <Text>Click the button to pick color</Text>
          )}
          {error && <Text c="red">Error: {error?.message}</Text>}
        </Group>
      );
    }

`EyeDropperOpenOptions`, `EyeDropperOpenReturnType` and `UseEyeDropperReturnValue` types are exported from `@mantine/hooks` package, you can import them in your application:</content>
</page>

<page>
  <title>Combobox examples | Mantine</title>
  <url>https://mantine.dev/combobox/?e=BasicSelect</url>
  <content>[

Basic select

Primitive select component

](https://mantine.dev/combobox/?e=BasicSelect)[

Select with active option

Active option is marked in the dropdown

](https://mantine.dev/combobox/?e=SelectActive)[

Searchable select

Select with search

](https://mantine.dev/combobox/?e=SearchableSelect)[

Select with options limit

100 000 options searchable select

](https://mantine.dev/combobox/?e=SelectLimit)[

Select with custom option

Select with custom option and value component

](https://mantine.dev/combobox/?e=SelectOptionComponent)[

Select with async data

Data is requested only when the dropdown is opened

](https://mantine.dev/combobox/?e=SelectAsync)[

Select with clear button

Clearable select

](https://mantine.dev/combobox/?e=SelectClearable)[

Select with search in dropdown

Select with search input in the dropdown

](https://mantine.dev/combobox/?e=SelectDropdownSearch)[

Select option on hover

Move selection to hovered option

](https://mantine.dev/combobox/?e=SelectOptionOnHover)[

Options groups

Select with options groups

](https://mantine.dev/combobox/?e=SelectGroups)[

Searchable select with groups

Options filtering with grouped data

](https://mantine.dev/combobox/?e=SelectGroupsSearchable)[

Custom group styles

Customize groups styles with Styles API

](https://mantine.dev/combobox/?e=SelectGroupsStyles)[

Creatable select

Select with option to create new options

](https://mantine.dev/combobox/?e=SelectCreatable)

[

Basic autocomplete

Primitive autocomplete component

](https://mantine.dev/combobox/?e=BasicAutocomplete)[

Autocomplete with options limit

100 000 options search

](https://mantine.dev/combobox/?e=AutocompleteLimit)[

Async autocomplete

Autocomplete with async data

](https://mantine.dev/combobox/?e=AsyncAutocomplete)[

Autocomplete with highlight

Autocomplete with highlighted search query in options

](https://mantine.dev/combobox/?e=AutocompleteHighlight)[

Select first option on type

Autocomplete with first option selected when user types

](https://mantine.dev/combobox/?e=AutocompleteSelectFirstOption)[

Dynamic options

Autocomplete with options that depend on the user input

](https://mantine.dev/combobox/?e=AutocompleteDynamic)[

Clearable autocomplete

Autocomplete with clear button

](https://mantine.dev/combobox/?e=AutocompleteClearable)

[

Basic multiselect

Primitive multiselect component

](https://mantine.dev/combobox/?e=BasicMultiSelect)[

Searchable multiselect

Multiselect with search

](https://mantine.dev/combobox/?e=SearchableMultiSelect)[

Max selected options

Limit max number of options that can be selected

](https://mantine.dev/combobox/?e=MaxSelectedItems)[

Multiselect with checkboxes

Multiselect options with checkboxes

](https://mantine.dev/combobox/?e=MultiSelectCheckbox)[

Hide active options

Remove active options from the dropdown

](https://mantine.dev/combobox/?e=ActiveOptionsFilter)[

Max displayed values

Limit max number of values that can be displayed

](https://mantine.dev/combobox/?e=MaxDisplayedItems)[

Custom value pills

Use a custom component to render selected values

](https://mantine.dev/combobox/?e=MultiSelectValueRenderer)[

Creatable multiselect

Multiselect with option to create new options

](https://mantine.dev/combobox/?e=MultiSelectCreatable)

[

Basic button

Primitive combobox with button target

](https://mantine.dev/combobox/?e=BasicButton)[

Button with search in dropdown

Button with search input in the dropdown

](https://mantine.dev/combobox/?e=ButtonSearch)[

Button multi select

Button with multiple items selection

](https://mantine.dev/combobox/?e=ButtonMultiSelect)

[

Dropdown scroll

Dropdown with native scrollbars

](https://mantine.dev/combobox/?e=DropdownScroll)[

Dropdown with ScrollArea

Dropdown with ScrollArea.Autosize scrollbars

](https://mantine.dev/combobox/?e=DropdownScrollArea)[

Dropdown with header

Dropdown with ScrollArea and header

](https://mantine.dev/combobox/?e=DropdownHeader)[

Dropdown with footer

Dropdown with ScrollArea and footer

](https://mantine.dev/combobox/?e=DropdownFooter)[

Dropdown with custom styles

Change dropdown styles with Styles API

](https://mantine.dev/combobox/?e=DropdownPositionStyles)[

Custom selected styles

Customize selected option styles

](https://mantine.dev/combobox/?e=SelectedStyles)

[

Dropdown animation

Dropdown with open/close animation

](https://mantine.dev/combobox/?e=DropdownAnimation)[

Dropdown with option animation

Play options animation on dropdown open

](https://mantine.dev/combobox/?e=DropdownOptionsAnimation)[

Animate selected option

Play options animation on when option is selected

](https://mantine.dev/combobox/?e=SelectedAnimation)[

Smooth scroll

Smooth scroll of the options with keyboard navigation

](https://mantine.dev/combobox/?e=DropdownSmoothScroll)

[

Inline options list

Inline list with checkboxes

](https://mantine.dev/combobox/?e=SelectList)[

Transfer list

Transfer list with search

](https://mantine.dev/combobox/?e=TransferList)

Nothing found...</content>
</page>

<page>
  <title>Styles overview | Mantine</title>
  <url>https://mantine.dev/styles/styles-overview/</url>
  <content>This guide will help you understand how to apply styles to Mantine and custom components.

[Component specific props](#component-specific-props)
-----------------------------------------------------

Most of the components provide props that allow you to customize their styles. For example, [Button](https://mantine.dev/core/button/) component has `color`, `variant`, `size` and `radius` props that control its appearance:

These props usually control multiple CSS properties, for example `color` and variant props control `color`, `background-color` and `border` properties. In most cases, changing components props is the most optimal way to customize Mantine components.

[Style props](#style-props)
---------------------------

[Style props](https://mantine.dev/styles/style-props/) work similar to component specific props, but with several differences:

*   Style props are not component specific, they can be used with any component.
*   Style props always control a single CSS property. For example, `c` prop controls CSS `color` property, while `color` prop controls a set of properties: `color`, `background-color` and `border-color`.
*   Style props are set in `style` attribute. It is not possible to override them with CSS without using `!important`.

[Style props](https://mantine.dev/styles/style-props/) are useful when you need to change a single CSS property without creating a separate file for styles. Some of the most common use cases are:

*   Changing text color and font-size

*   Applying margins to inputs inside a form:

*   Adding padding to various elements:

Note that [style props](https://mantine.dev/styles/style-props/) were never intended to be used as a primary way of styling components. In most cases, it is better to limit the number of style props used per component to 3-4. If you find yourself using more than 4 style props, consider creating a separate file with styles – it will be easier to maintain and will be more [performant](https://mantine.dev/styles/styles-performance/).

[Style prop](#style-prop)
-------------------------

[Style prop](https://mantine.dev/styles/style/) is supported by all Mantine components and allows setting CSS properties as well as CSS variables. It is useful in the following cases:

*   You want to apply a single CSS property to a component:

*   You want to set a CSS variable based on component prop:

[Style prop](https://mantine.dev/styles/style/) works the same way as React `style` prop. It is not recommended to use it as a primary way of styling components. In most cases, it is better to create a separate file with styles – it will be easier to maintain and will be more [performant](https://mantine.dev/styles/styles-performance/).

[CSS modules](#css-modules)
---------------------------

[CSS modules](https://mantine.dev/styles/css-modules/) is the recommended way of applying most of the styles to Mantine components. CSS modules are the most performant and flexible way of styling components.

[Theme tokens](#theme-tokens)
-----------------------------

You can reference Mantine [theme](https://mantine.dev/theming/theme-object/) values in any styles with [CSS variables](https://mantine.dev/styles/css-variables/):

*   In [CSS modules](https://mantine.dev/styles/css-modules/):

*   In [style props](https://mantine.dev/styles/style-props/):

*   In [style prop](https://mantine.dev/styles/style/):</content>
</page>

<page>
  <title>Mantine extensions | Mantine</title>
  <url>https://mantine.dev/x/extensions/</url>
  <content>Extensions are packages that provide additional functionality like new components, hooks, or other features. They are built on top of `@mantine/hooks` and `@mantine/core` packages.

[Official extensions](#official-extensions)
-------------------------------------------

Official extensions are built by the maintainers of Mantine, these extensions have `@mantine/` scope in their package names, for example `@mantine/dates` or `@mantine/carousel`.

Official extensions list:

*   [@mantine/dates](https://mantine.dev/dates/getting-started/) – date and time pickers, calendars, other date-related components
*   [@mantine/charts](https://mantine.dev/charts/getting-started/) – charts and data visualization components based on recharts
*   [@mantine/notifications](https://mantine.dev/x/notifications/) – notifications system
*   [@mantine/code-highlight](https://mantine.dev/x/code-highlight/) – code highlight component used on Mantine websites
*   [@mantine/spotlight](https://mantine.dev/x/spotlight/) – control center (`Ctrl + K` search bar), can be used for search
*   [@mantine/carousel](https://mantine.dev/x/carousel/) – carousel component based on embla-carousel
*   [@mantine/dropzone](https://mantine.dev/x/dropzone/) – captures files with drag and drop, based on react-dropzone
*   [@mantine/modals](https://mantine.dev/x/modals/) – modals manager
*   [@mantine/tiptap](https://mantine.dev/x/tiptap/) – rich text editor based on tiptap
*   [@mantine/nprogress](https://mantine.dev/x/nprogress/) – navigation progress component

[Community extensions](#community-extensions)
---------------------------------------------

Community extensions are built by the community, they are maintained by the community members and are updated independently from the core Mantine packages and extensions.

Community extensions list:

*   [BlockNote](https://www.blocknotejs.org/) – block-based rich text editor
*   [ContextMenu](https://icflorescu.github.io/mantine-contextmenu/) – context menu component
*   [DataTable](https://icflorescu.github.io/mantine-datatable/) – data table component without dependencies
*   [MantineReactTable](https://v2.mantine-react-table.com/) – data table component based on TanStack table package
*   [SplitPane](https://gfazioli.github.io/mantine-split-pane/) – resizable split pane component
*   [Flip](https://gfazioli.github.io/mantine-flip/) – flip animation component
*   [Marquee](https://gfazioli.github.io/mantine-marquee/) – marquee component
*   [Onboarding](https://gfazioli.github.io/mantine-onboarding-tour/) – onboarding / tour component
*   [TextAnimate](https://gfazioli.github.io/mantine-text-animate/) – text animation component

[Create your own extension](#create-your-own-extension)
-------------------------------------------------------

You are welcome to create your own extension and share it with the community in the list above. To submit a new extension to be featured on this page:

*   Create and publish extension on npm. You can choose any name for your package, for example `mantine-oklch-color-picker` or `@rtivital/mantine-emoji-picker`.
*   If you are not sure how to get started with extension development, use [extension template](https://github.com/mantinedev/extension-template), it provides full development environment with tests, documentation, and examples.
*   Submit a pull request to the [main Mantine repository](https://github.com/mantinedev/mantine) with a link to your extension and a short description to be featured on this page.</content>
</page>

<page>
  <title>Get started | Mantine</title>
  <url>https://mantine.dev/form/package/</url>
  <content>Mantine form
------------

[@mantine/form](https://www.npmjs.com/package/@mantine/form) package contains `useForm` hook that manages form state, validation, and submission. `useForm` hook is designed to be used with other Mantine libraries (`@mantine/core`, `@mantine/dates`, etc.) – all Mantine inputs are compatible with `useForm` out of the box.

[Installation](#installation)
-----------------------------

[Usage](#usage)
---------------

`@mantine/form` package can be used in any web React application. Although the package is designed to work with Mantine component, it can be used with native inputs or any other form libraries – it is standalone and does not have any dependencies except React.

Example of using `useForm` hook to create a simple form:

[License](#license)
-------------------

MIT</content>
</page>

<page>
  <title>Usage with Vite | Mantine</title>
  <url>https://mantine.dev/guides/vite/</url>
  <content>[Get started with a template](#templates)
-----------------------------------------

The easiest way to get started is to use one of the templates. All templates are configured correctly: they include [PostCSS setup](https://mantine.dev/styles/postcss-preset/), [ColorSchemeScript](https://mantine.dev/theming/color-schemes/) and other essential features. Some templates also include additional features like [Jest](https://mantine.dev/guides/jest/), [Storybook](https://mantine.dev/guides/storybook/) and ESLint.

If you are not familiar with GitHub, you can find a detailed instruction on how to bootstrap a project from a template on [this page](https://help.mantine.dev/q/templates-usage).

<table><tbody><tr data-with-row-border="true" data-hover="true"><td></td><td><p>vite-template</p><p>Vite template with full setup: Vitest, Prettier, Storybook, ESLint</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/mantinedev/vite-template" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>vite-min-template</p><p>Vite template with minimal setup – no additional tools included, only default Vite configuration</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/mantinedev/vite-min-template" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>vite-vanilla-extract-template</p><p>Vite template with Vanilla extract example</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/mantinedev/vite-vanilla-extract-template" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr></tbody></table>

[Generate new application](#generate-new-application)
-----------------------------------------------------

Follow [Vite getting started](https://vitejs.dev/guide/) guide to create new Vite application:

[Installation](#installation)
-----------------------------

Choose packages that you will use in your application:

|  | Package | Description |
| --- | --- | --- |
|  | `@mantine/hooks` | 
Hooks for state and UI management

 |
|  | `@mantine/core` | 

Core components library: inputs, buttons, overlays, etc.

 |
|  | `@mantine/form` | 

Form management library

 |
|  | `@mantine/dates` | 

Date inputs, calendars

 |
|  | `@mantine/charts` | 

Recharts based charts library

 |
|  | `@mantine/notifications` | 

Notifications system

 |
|  | `@mantine/code-highlight` | 

Code highlight with your theme colors and styles

 |
|  | `@mantine/tiptap` | 

Rich text editor based on Tiptap

 |
|  | `@mantine/dropzone` | 

Capture files with drag and drop

 |
|  | `@mantine/carousel` | 

Embla based carousel component

 |
|  | `@mantine/spotlight` | 

Overlay command center

 |
|  | `@mantine/modals` | 

Centralized modals manager

 |
|  | `@mantine/nprogress` | 

Navigation progress

 |

Install dependencies:

[PostCSS setup](#postcss-setup)
-------------------------------

Install PostCSS plugins and [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/):

Create `postcss.config.cjs` file at the root of your application with the following content:

[Setup](#setup)
---------------

Add styles imports and [MantineProvider](https://mantine.dev/theming/mantine-provider/) to your application root component (usually `App.tsx`):

All set! Start development server:</content>
</page>

<page>
  <title>Usage with React Router | Mantine</title>
  <url>https://mantine.dev/guides/react-router/</url>
  <content>[Generate new application](#generate-new-application)
-----------------------------------------------------

Follow [React Router getting started guide](https://reactrouter.com/start/framework/installation) guide to create new React Router application:

[Installation](#installation)
-----------------------------

Choose packages that you will use in your application:

|  | Package | Description |
| --- | --- | --- |
|  | `@mantine/hooks` | 
Hooks for state and UI management

 |
|  | `@mantine/core` | 

Core components library: inputs, buttons, overlays, etc.

 |
|  | `@mantine/form` | 

Form management library

 |
|  | `@mantine/dates` | 

Date inputs, calendars

 |
|  | `@mantine/charts` | 

Recharts based charts library

 |
|  | `@mantine/notifications` | 

Notifications system

 |
|  | `@mantine/code-highlight` | 

Code highlight with your theme colors and styles

 |
|  | `@mantine/tiptap` | 

Rich text editor based on Tiptap

 |
|  | `@mantine/dropzone` | 

Capture files with drag and drop

 |
|  | `@mantine/carousel` | 

Embla based carousel component

 |
|  | `@mantine/spotlight` | 

Overlay command center

 |
|  | `@mantine/modals` | 

Centralized modals manager

 |
|  | `@mantine/nprogress` | 

Navigation progress

 |

Install dependencies:

[PostCSS setup](#postcss-setup)
-------------------------------

Install PostCSS plugins and [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/):

Create `postcss.config.cjs` file at the root of your application with the following content:

[Setup](#setup)
---------------

Add styles imports, [MantineProvider](https://mantine.dev/theming/mantine-provider/) and [ColorSchemeScript](https://mantine.dev/theming/color-schemes/) to `app/root.tsx`:

All set! Start development server:</content>
</page>

<page>
  <title>Usage with Next.js | Mantine</title>
  <url>https://mantine.dev/guides/next/</url>
  <content>[Get started with a template](#templates)
-----------------------------------------

The easiest way to get started is to use one of the templates. All templates are configured correctly: they include [PostCSS setup](https://mantine.dev/styles/postcss-preset/), [ColorSchemeScript](https://mantine.dev/theming/color-schemes/) and other essential features. Some templates also include additional features like [Jest](https://mantine.dev/guides/jest/), [Storybook](https://mantine.dev/guides/storybook/) and ESLint.

If you are not familiar with GitHub, you can find a detailed instruction on how to bootstrap a project from a template on [this page](https://help.mantine.dev/q/templates-usage).

<table><tbody><tr data-with-row-border="true" data-hover="true"><td></td><td><p>next-app-template</p><p>Next.js template with app router and full setup: Jest, Storybook, ESLint</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/mantinedev/next-app-template" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>next-pages-template</p><p>Next.js template with pages router and full setup: Jest, Storybook, ESLint</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/mantinedev/next-pages-template" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>next-app-min-template</p><p>Next.js template with app router and minimal setup – no additional tools included, only default Next.js configuration</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/mantinedev/next-app-min-template" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>next-pages-min-template</p><p>Next.js template with pages router and minimal setup – no additional tools included, only default Next.js configuration</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/mantinedev/next-pages-min-template" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>next-vanilla-extract-template</p><p>Next.js template with Vanilla extract example</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/mantinedev/next-vanilla-extract-template" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr></tbody></table>

[Generate new application](#generate-new-application)
-----------------------------------------------------

Follow [create-next-app](https://nextjs.org/docs/pages/api-reference/create-next-app) guide to create new Next.js application:

[Installation](#installation)
-----------------------------

Choose packages that you will use in your application:

|  | Package | Description |
| --- | --- | --- |
|  | `@mantine/hooks` | 
Hooks for state and UI management

 |
|  | `@mantine/core` | 

Core components library: inputs, buttons, overlays, etc.

 |
|  | `@mantine/form` | 

Form management library

 |
|  | `@mantine/dates` | 

Date inputs, calendars

 |
|  | `@mantine/charts` | 

Recharts based charts library

 |
|  | `@mantine/notifications` | 

Notifications system

 |
|  | `@mantine/code-highlight` | 

Code highlight with your theme colors and styles

 |
|  | `@mantine/tiptap` | 

Rich text editor based on Tiptap

 |
|  | `@mantine/dropzone` | 

Capture files with drag and drop

 |
|  | `@mantine/carousel` | 

Embla based carousel component

 |
|  | `@mantine/spotlight` | 

Overlay command center

 |
|  | `@mantine/modals` | 

Centralized modals manager

 |
|  | `@mantine/nprogress` | 

Navigation progress

 |

Install dependencies:

[PostCSS setup](#postcss-setup)
-------------------------------

Install PostCSS plugins and [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/):

Create `postcss.config.cjs` file at the root of your application with the following content:

[Setup with pages router](#setup-with-pages-router)
---------------------------------------------------

Add styles imports and [MantineProvider](https://mantine.dev/theming/mantine-provider/) to the `pages/_app.tsx` file:

Create `pages/_document.tsx` file with [ColorSchemeScript](https://mantine.dev/theming/color-schemes/) component. Note that it is required even if you use only one color scheme in your application.

All set! Start development server:

[Setup with app router](#setup-with-app-router)
-----------------------------------------------

Add [MantineProvider](https://mantine.dev/theming/mantine-provider/), [ColorSchemeScript](https://mantine.dev/theming/color-schemes/) and styles imports to the `app/layout.tsx` file:

All set! Start development server:

[app + pages router together](#app--pages-router-together)
----------------------------------------------------------

If you use both app and pages router in one application, you need to setup both `pages/_app.tsx` and `app/layout.tsx` files as described above.

[Next.js Link with polymorphic components](#nextjs-link-with-polymorphic-components)
------------------------------------------------------------------------------------

[Server components](#server-components)
---------------------------------------

All Mantine components use `useContext` hook to support [default props](https://mantine.dev/theming/default-props/) and [Styles API](https://mantine.dev/styles/styles-api/). Mantine components cannot be used as server components. It means that components will render both on the server and client.

Entry points of all `@mantine/*` packages (`index.js` files) have `'use client';` directive at the top of the file – you do not need to add `'use client';` to your pages/layouts/components.

[Compound components in server components](#compound-components-in-server-components)
-------------------------------------------------------------------------------------

Some components like [Popover](https://mantine.dev/core/popover/) have associated compound components (`Component.XXX`), where `XXX` is a compound component name. Compound components cannot be used in server components. Instead, use `ComponentXXX` syntax or add `'use client';` directive to the top of the file.

Example that will not work in server components:

Example with `'use client';` directive:

Example with `ComponentXXX` syntax:

[app router tree shaking](#app-router-tree-shaking)
---------------------------------------------------

To enable tree shaking with app router, enable experimental `optimizePackageImports` feature in your `next.config.mjs`:

[Troubleshooting](#troubleshooting)
-----------------------------------

If you have any issues with Mantine in your Next.js application, please check [Help Center article](https://help.mantine.dev/q/server-components) that covers most common issues with app router and server components.</content>
</page>

<page>
  <title>Usage with Redwood | Mantine</title>
  <url>https://mantine.dev/guides/redwood/</url>
  <content>Usage with RedwoodJS
--------------------

[Get started with a template](#templates)
-----------------------------------------

The easiest way to get started is to use one of the templates. All templates are configured correctly: they include [PostCSS setup](https://mantine.dev/styles/postcss-preset/), [ColorSchemeScript](https://mantine.dev/theming/color-schemes/) and other essential features. Some templates also include additional features like [Jest](https://mantine.dev/guides/jest/), [Storybook](https://mantine.dev/guides/storybook/) and ESLint.

If you are not familiar with GitHub, you can find a detailed instruction on how to bootstrap a project from a template on [this page](https://help.mantine.dev/q/templates-usage).

<table><tbody><tr data-with-row-border="true" data-hover="true"><td></td><td><p>redwood-template</p><p>RedwoodJS template with basic setup</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/mantinedev/redwood-template" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr></tbody></table>

[Generate new application](#generate-new-application)
-----------------------------------------------------

Follow [Redwood getting started guide](https://redwoodjs.com/docs/quick-start) guide to create new Redwood application:

[Installation](#installation)
-----------------------------

**Note that it is recommended to use `yarn` instead of `npm` to install dependencies.**

Open `web` directory before installing dependencies:

Choose packages that you will use in your application:

|  | Package | Description |
| --- | --- | --- |
|  | `@mantine/hooks` | 
Hooks for state and UI management

 |
|  | `@mantine/core` | 

Core components library: inputs, buttons, overlays, etc.

 |
|  | `@mantine/form` | 

Form management library

 |
|  | `@mantine/dates` | 

Date inputs, calendars

 |
|  | `@mantine/charts` | 

Recharts based charts library

 |
|  | `@mantine/notifications` | 

Notifications system

 |
|  | `@mantine/code-highlight` | 

Code highlight with your theme colors and styles

 |
|  | `@mantine/tiptap` | 

Rich text editor based on Tiptap

 |
|  | `@mantine/dropzone` | 

Capture files with drag and drop

 |
|  | `@mantine/carousel` | 

Embla based carousel component

 |
|  | `@mantine/spotlight` | 

Overlay command center

 |
|  | `@mantine/modals` | 

Centralized modals manager

 |
|  | `@mantine/nprogress` | 

Navigation progress

 |

Install dependencies:

[PostCSS setup](#postcss-setup)
-------------------------------

Install PostCSS plugins and [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/):

Create `postcss.config.js` file in `web` directory with the following content:

[Setup](#setup)
---------------

Add styles imports, [MantineProvider](https://mantine.dev/theming/mantine-provider/) and [ColorSchemeScript](https://mantine.dev/theming/color-schemes/) to `web/src/App.tsx` file:

All set! Start development server:</content>
</page>

<page>
  <title>Usage with Gatsby | Mantine</title>
  <url>https://mantine.dev/guides/gatsby/</url>
  <content>[Get started with a template](#templates)
-----------------------------------------

The easiest way to get started is to use one of the templates. All templates are configured correctly: they include [PostCSS setup](https://mantine.dev/styles/postcss-preset/), [ColorSchemeScript](https://mantine.dev/theming/color-schemes/) and other essential features. Some templates also include additional features like [Jest](https://mantine.dev/guides/jest/), [Storybook](https://mantine.dev/guides/storybook/) and ESLint.

If you are not familiar with GitHub, you can find a detailed instruction on how to bootstrap a project from a template on [this page](https://help.mantine.dev/q/templates-usage).

[Generate new application](#generate-new-application)
-----------------------------------------------------

Follow [Gatsby quick start](https://www.gatsbyjs.com/docs/quick-start/) guide to create new Gatsby application:

When asked "Would you like to install a styling system?", select `PostCSS`.

[Installation](#installation)
-----------------------------

Choose packages that you will use in your application:

|  | Package | Description |
| --- | --- | --- |
|  | `@mantine/hooks` | 
Hooks for state and UI management

 |
|  | `@mantine/core` | 

Core components library: inputs, buttons, overlays, etc.

 |
|  | `@mantine/form` | 

Form management library

 |
|  | `@mantine/dates` | 

Date inputs, calendars

 |
|  | `@mantine/charts` | 

Recharts based charts library

 |
|  | `@mantine/notifications` | 

Notifications system

 |
|  | `@mantine/code-highlight` | 

Code highlight with your theme colors and styles

 |
|  | `@mantine/tiptap` | 

Rich text editor based on Tiptap

 |
|  | `@mantine/dropzone` | 

Capture files with drag and drop

 |
|  | `@mantine/carousel` | 

Embla based carousel component

 |
|  | `@mantine/spotlight` | 

Overlay command center

 |
|  | `@mantine/modals` | 

Centralized modals manager

 |
|  | `@mantine/nprogress` | 

Navigation progress

 |

Install dependencies:

[PostCSS setup](#postcss-setup)
-------------------------------

Install PostCSS plugins and [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/):

Create `postcss.config.cjs` file at the root of your application with the following content:

[Setup](#setup)
---------------

Create `src/theme.ts` file with your theme override:

Create `gatsby-ssr.tsx` with the following content:

Create `gatsby-browser.tsx` with the following content:

All set! Start development server:

[CSS modules](#css-modules)
---------------------------

By default, Gatsby has different syntax for importing CSS modules:</content>
</page>

<page>
  <title>Contributing to Mantine | Mantine</title>
  <url>https://mantine.dev/contribute/</url>
  <content>First of all, thank you for showing interest in contributing to Mantine! All your contributions are extremely valuable to the project!

[Ways to contribute](#ways-to-contribute)
-----------------------------------------

*   **Improve documentation:** Fix incomplete or missing docs, bad wording, examples or explanations.
*   **Give feedback:** We are constantly working on making Mantine better. Please share how you use Mantine, what features are missing and what is done well via [GitHub Discussions](https://github.com/mantinedev/mantine/discussions/new) or [Discord](https://discord.gg/wbH82zuWMN).
*   **Share Mantine:** Share links to the Mantine docs with everyone who might be interested! [Share Mantine on X here](https://x.com/intent/tweet?text=Mantine%20%E2%80%93%20new%20React%20library%20with%20100%2B%20components%20and%20hooks.%20It%20has%20native%20dark%20theme%20support%20and%20focuses%20on%20accessibility%20and%20usability.%0A%0Ahttp%3A%2F%2Fmantine.dev%0A%0A%23reactjs%20).
*   **Contribute to the codebase:** Propose new features via [GitHub Issues](https://github.com/mantinedev/mantine/issues/new), or find an [existing issue](https://github.com/mantinedev/mantine/labels/help%20wanted) that you are interested in and work on it!
*   **Give us a code review:** Help us identify problems with the [source code](https://github.com/mantinedev/mantine/tree/master/packages) or make Mantine more performant.

[Contributing workflow](#contributing-workflow)
-----------------------------------------------

*   Decide on what you want to contribute.
*   If you would like to implement a new feature, discuss it with the maintainer ([GitHub Discussions](https://github.com/mantinedev/mantine/discussions/new) or [Discord](https://discord.gg/wbH82zuWMN)) before jumping into coding.
*   After finalizing issue details, you can begin working on the code.
*   Run tests with `npm test` and submit a PR once all tests have passed.
*   Get a code review and fix all issues noticed by the maintainer.
*   If you cannot finish your task or if you change your mind – that's totally fine! Just let us know in the GitHub issue that you created during the first step of this process. The Mantine community is friendly – we won't judge or ask any questions if you decide to cancel your submission.
*   Your PR is merged. You are awesome ❤️!

[Get started with Mantine locally](#get-started-with-mantine-locally)
---------------------------------------------------------------------

*   Install the [editorconfig](https://editorconfig.org/) extension for your editor.
*   Fork the [repository](https://github.com/mantinedev/mantine), then clone or download your fork.
*   Run `nvm use` to switch to the Node version specified in `.nvmrc` file ([install nvm](https://github.com/nvm-sh/nvm)).
*   Install dependencies with yarn – `yarn`
*   Setup project – `npm run setup`
*   Build local version of all packages – `npm run build all`
*   To start storybook – `npm run storybook`
*   To start docs – `npm run docs`
*   To rebuild props descriptions – `npm run docs:docgen`

[npm scripts](#npm-scripts)
---------------------------

All npm scripts are located at [main package.json](https://github.com/mantinedev/mantine/blob/master/package.json). Individual packages do not have dedicated scripts.

### [Development scripts](#development-scripts)

*   `storybook` – Starts the storybook development server. To start storybook for a specific component, use the `npm run storybook Tooltip` command.
*   `docs` – Starts the docs development server.

### [Testing scripts](#testing-scripts)

*   `syncpack` – runs [syncpack](https://www.npmjs.com/package/syncpack)
*   `typecheck` – runs TypeScript typechecking with `tsc --noEmit` on all packages and docs
*   `lint` – runs ESLint on src folder
*   `jest` – runs tests with jest
*   `test` – runs all above testing scripts

### [Docs scripts](#docs-scripts)

*   `docs:docgen` – generates components types information with [docgen script](https://github.com/mantinedev/mantine/blob/master/scripts/docgen/index.ts)
*   `docs:build` – builds docs for production
*   `docs:deploy` – builds and deploys docs to the GitHub Pages</content>
</page>

<page>
  <title>All releases | Mantine</title>
  <url>https://mantine.dev/changelog/previous-versions/</url>
  <content>Version 8.1.0 does not have associated patch releases yet.

**6.0.X** patches:

*   [`6.0.21` – September 17, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.21)
*   [`6.0.19` – August 10, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.19)
*   [`6.0.18` – August 7, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.18)
*   [`6.0.17` – July 18, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.17)
*   [`6.0.16` – July 4, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.16)
*   [`6.0.15` – June 27, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.15)
*   [`6.0.14` – June 20, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.14)
*   [`6.0.13` – May 30, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.13)
*   [`6.0.11` – May 16, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.11)
*   [`6.0.9` – April 25, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.9)
*   [`6.0.8` – April 18, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.8)
*   [`6.0.7` – April 11, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.7)
*   [`6.0.6` – April 4, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.6)
*   [`6.0.5` – March 28, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.5)
*   [`6.0.3` – March 21, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.3)
*   [`6.0.2` – March 14, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.2)
*   [`6.0.1` – March 8, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.1)

**5.9.X** patches:

*   [`5.9.6` – December 31, 2022](https://github.com/mantinedev/mantine/releases/tag/5.9.6)
*   [`5.9.5` – December 17, 2022](https://github.com/mantinedev/mantine/releases/tag/5.9.5)
*   [`5.9.4` – December 12, 2022](https://github.com/mantinedev/mantine/releases/tag/5.9.4)
*   [`5.9.3` – December 10, 2022](https://github.com/mantinedev/mantine/releases/tag/5.9.3)
*   [`5.9.2` – December 5, 2022](https://github.com/mantinedev/mantine/releases/tag/5.9.2)
*   [`5.9.1` – December 4, 2022](https://github.com/mantinedev/mantine/releases/tag/5.9.1)

**5.2.X** patches:

*   [`5.2.7` – September 8, 2022](https://github.com/mantinedev/mantine/releases/tag/5.2.7)
*   [`5.2.6` – September 6, 2022](https://github.com/mantinedev/mantine/releases/tag/5.2.6)
*   [`5.2.5` – September 3, 2022](https://github.com/mantinedev/mantine/releases/tag/5.2.5)
*   [`5.2.4` – August 27, 2022](https://github.com/mantinedev/mantine/releases/tag/5.2.4)
*   [`5.2.3` – August 22, 2022](https://github.com/mantinedev/mantine/releases/tag/5.2.3)
*   [`5.2.2` – August 22, 2022](https://github.com/mantinedev/mantine/releases/tag/5.2.2)

**5.1.X** patches:

*   [`5.1.7` – August 18, 2022](https://github.com/mantinedev/mantine/releases/tag/5.1.7)
*   [`5.1.6` – August 14, 2022](https://github.com/mantinedev/mantine/releases/tag/5.1.6)
*   [`5.1.5` – August 13, 2022](https://github.com/mantinedev/mantine/releases/tag/5.1.5)
*   [`5.1.4` – August 12, 2022](https://github.com/mantinedev/mantine/releases/tag/5.1.4)
*   [`5.1.3` – August 11, 2022](https://github.com/mantinedev/mantine/releases/tag/5.1.3)
*   [`5.1.1` – August 9, 2022](https://github.com/mantinedev/mantine/releases/tag/5.1.1)

**4.2.X** patches:

*   [`4.2.12` – July 3, 2022](https://github.com/mantinedev/mantine/releases/tag/4.2.12)
*   [`4.2.11` – June 26, 2022](https://github.com/mantinedev/mantine/releases/tag/4.2.11)
*   [`4.2.9` – June 12, 2022](https://github.com/mantinedev/mantine/releases/tag/4.2.9)
*   [`4.2.8` – June 5, 2022](https://github.com/mantinedev/mantine/releases/tag/4.2.8)
*   [`4.2.7` – May 29, 2022](https://github.com/mantinedev/mantine/releases/tag/4.2.7)
*   [`4.2.6` – May 22, 2022](https://github.com/mantinedev/mantine/releases/tag/4.2.6)
*   [`4.2.5` – May 15, 2022](https://github.com/mantinedev/mantine/releases/tag/4.2.5)
*   [`4.2.3` – May 8, 2022](https://github.com/mantinedev/mantine/releases/tag/4.2.3)
*   [`4.2.2` – May 1, 2022](https://github.com/mantinedev/mantine/releases/tag/4.2.2)

**4.0.X** patches:

*   [`4.0.9` – March 27, 2022](https://github.com/mantinedev/mantine/releases/tag/4.0.9)
*   [`4.0.8` – March 24, 2022](https://github.com/mantinedev/mantine/releases/tag/4.0.8)
*   [`4.0.7` – March 20, 2022](https://github.com/mantinedev/mantine/releases/tag/4.0.7)
*   [`4.0.6` – March 18, 2022](https://github.com/mantinedev/mantine/releases/tag/4.0.6)
*   [`4.0.5` – March 16, 2022](https://github.com/mantinedev/mantine/releases/tag/4.0.5)
*   [`4.0.4` – March 13, 2022](https://github.com/mantinedev/mantine/releases/tag/4.0.4)
*   [`4.0.3` – March 13, 2022](https://github.com/mantinedev/mantine/releases/tag/4.0.3)
*   [`4.0.2` – March 12, 2022](https://github.com/mantinedev/mantine/releases/tag/4.0.2)
*   [`4.0.1` – March 11, 2022](https://github.com/mantinedev/mantine/releases/tag/4.0.1)

**3.6.X** patches:

*   [`3.6.14` – March 3, 2022](https://github.com/mantinedev/mantine/releases/tag/3.6.14)
*   [`3.6.13` – March 2, 2022](https://github.com/mantinedev/mantine/releases/tag/3.6.13)
*   [`3.6.12` – March 1, 2022](https://github.com/mantinedev/mantine/releases/tag/3.6.12)
*   [`3.6.11` – February 25, 2022](https://github.com/mantinedev/mantine/releases/tag/3.6.11)
*   [`3.6.9` – February 17, 2022](https://github.com/mantinedev/mantine/releases/tag/3.6.9)
*   [`3.6.8` – February 16, 2022](https://github.com/mantinedev/mantine/releases/tag/3.6.8)
*   [`3.6.7` – February 9, 2022](https://github.com/mantinedev/mantine/releases/tag/3.6.7)
*   [`3.6.6` – February 5, 2022](https://github.com/mantinedev/mantine/releases/tag/3.6.6)
*   [`3.6.5` – February 2, 2022](https://github.com/mantinedev/mantine/releases/tag/3.6.5)
*   [`3.6.4` – January 30, 2022](https://github.com/mantinedev/mantine/releases/tag/3.6.4)
*   [`3.6.3` – January 25, 2022](https://github.com/mantinedev/mantine/releases/tag/3.6.3)
*   [`3.6.2` – January 20, 2022](https://github.com/mantinedev/mantine/releases/tag/3.6.2)
*   [`3.6.1` – January 17, 2022](https://github.com/mantinedev/mantine/releases/tag/3.6.1)

**3.1.X** patches:

*   [`3.1.9` – November 13, 2021](https://github.com/mantinedev/mantine/releases/tag/3.1.9)
*   [`3.1.8` – November 10, 2021](https://github.com/mantinedev/mantine/releases/tag/3.1.8)
*   [`3.1.7` – November 8, 2021](https://github.com/mantinedev/mantine/releases/tag/3.1.7)
*   [`3.1.6` – November 5, 2021](https://github.com/mantinedev/mantine/releases/tag/3.1.6)
*   [`3.1.5` – November 5, 2021](https://github.com/mantinedev/mantine/releases/tag/3.1.5)
*   [`3.1.4` – November 3, 2021](https://github.com/mantinedev/mantine/releases/tag/3.1.4)
*   [`3.1.3` – November 2, 2021](https://github.com/mantinedev/mantine/releases/tag/3.1.3)
*   [`3.1.2` – November 1, 2021](https://github.com/mantinedev/mantine/releases/tag/3.1.2)
*   [`3.1.1` – November 1, 2021](https://github.com/mantinedev/mantine/releases/tag/3.1.1)</content>
</page>

<page>
  <title>Get started | Mantine</title>
  <url>https://mantine.dev/core/package/</url>
  <content>Mantine Core components
-----------------------

[@mantine/core](https://www.npmjs.com/package/@mantine/core) package provides essential components: buttons, inputs, modals, typography and many others. `@mantine/core` package is used internally in most of other `@mantine/*` packages – it is required to be installed in your project to use Mantine components.

[Installation](#installation)
-----------------------------

    yarn add @mantine/hooks @mantine/core

[Usage](#usage)
---------------

Follow the [getting started guide](https://mantine.dev/getting-started/) to learn how to complete Mantine setup in your project. Example of using [Stepper](https://mantine.dev/core/stepper/) component:

Step 2 content: Verify email

    import { useState } from 'react';
    import { Stepper, Button, Group } from '@mantine/core';
    
    function Demo() {
      const [active, setActive] = useState(1);
      const nextStep = () => setActive((current) => (current < 3 ? current + 1 : current));
      const prevStep = () => setActive((current) => (current > 0 ? current - 1 : current));
    
      return (
        <>
          <Stepper active={active} onStepClick={setActive}>
            <Stepper.Step label="First step" description="Create an account">
              Step 1 content: Create an account
            </Stepper.Step>
            <Stepper.Step label="Second step" description="Verify email">
              Step 2 content: Verify email
            </Stepper.Step>
            <Stepper.Step label="Final step" description="Get full access">
              Step 3 content: Get full access
            </Stepper.Step>
            <Stepper.Completed>
              Completed, click back button to get to previous step
            </Stepper.Completed>
          </Stepper>
    
          <Group justify="center" mt="xl">
            <Button variant="default" onClick={prevStep}>Back</Button>
            <Button onClick={nextStep}>Next step</Button>
          </Group>
        </>
      );
    }

[License](#license)
-------------------

MIT</content>
</page>

<page>
  <title>MantineProvider | Mantine</title>
  <url>https://mantine.dev/theming/mantine-provider/</url>
  <content>`MantineProvider` provides a [theme object](https://mantine.dev/theming/theme-object/) context value, manages color scheme changes and injects [CSS variables](https://mantine.dev/styles/css-variables/). It must be rendered at the root of your application and should be used only once.

[Usage](#usage)
---------------

[MantineProvider props](#mantineprovider-props)
-----------------------------------------------

`MantineProvider` supports the following props:

### [theme](#theme)

Pass [theme object](https://mantine.dev/theming/theme-object/) override to `theme` prop. It will be merged with the default theme and used in all components.

### [colorSchemeManager](#colorschememanager)

`colorSchemeManager` is used to retrieve and set color scheme value in external storage. By default, `MantineProvider` uses `window.localStorage` to store color scheme value, but you can pass your own implementation to `colorSchemeManager` prop. You can learn more about color scheme management in the [color schemes guide](https://mantine.dev/theming/color-schemes/).

### [defaultColorScheme](#defaultcolorscheme)

`defaultColorScheme` value is used when `colorSchemeManager` cannot retrieve the value from external storage, for example during server side rendering or when the user hasn't selected a preferred color scheme. Possible values are `light`, `dark` and `auto`. By default, color scheme value is `light`. You can learn more about color scheme management in the [color schemes guide](https://mantine.dev/theming/color-schemes/).

### [cssVariablesSelector](#cssvariablesselector)

`cssVariablesSelector` is a CSS selector to which [CSS variables](https://mantine.dev/styles/css-variables/) should be added. By default, it is `:root`. `MantineProvider` generates CSS variables based on given [theme override](https://mantine.dev/theming/theme-object/) and `cssVariablesResolver`, then these variables are rendered into `<style />` tag next to your application. You can learn more about Mantine CSS variables in the [CSS variables guide](https://mantine.dev/styles/css-variables/).

### [withCssVariables](#withcssvariables)

`withCssVariables` determines whether theme CSS variables should be added to given `cssVariablesSelector`. By default, it is set to `true`, you should not change it unless you want to manage CSS variables via `.css` file (Note that in this case you will need to generate all theme tokens that are not a part of the default theme on your side).

### [deduplicateCssVariables](#deduplicatecssvariables)

`deduplicateCssVariables` determines whether CSS variables should be deduplicated: if CSS variable has the same value as in default theme, it is not added in the runtime. By default, it is set to `true`. If set to `false`, all Mantine CSS variables will be added in `<style />` tag even if they have the same value as in the default theme.

### [getRootElement](#getrootelement)

`getRootElement` is a function that returns the root application (usually `html`) element to set `data-mantine-color-scheme` attribute. Default value is `() => document.documentElement` which means that `data-mantine-color-scheme` attribute will be added to `<html />` tag. You can learn more about color scheme management in the [color schemes guide](https://mantine.dev/theming/color-schemes/).

### [classNamesPrefix](#classnamesprefix)

`classNamesPrefix` is a prefix for components static classes (for example `{selector}-Text-root`). Default value is `mantine` – all components will have `mantine-` prefix in their **static classes**.

In this case (default `classNamesPrefix`), [Text](https://mantine.dev/core/text/) component will have the following classes:

*   `mantine-focus-auto` – global utility class
*   `m-3nrA4eL` – component class, usually a random string, with this class library styles are applied
*   `mantine-Text-root` – component static class, part of [Styles API](https://mantine.dev/styles/styles-api/)

With `classNamesPrefix` you can change only **static class**:

Now [Text](https://mantine.dev/core/text/) component will have the following classes:

*   `mantine-focus-auto` – `classNamesPrefix` does not impact global utility classes – it is static and **cannot be changed**
*   `m-3nrA4eL` – `classNamesPrefix` does not impact library class – it is static and **cannot be changed**
*   `app-Text-root` – component static class has `classNamesPrefix` instead of `mantine`

### [withStaticClasses](#withstaticclasses)

`withStaticClasses` determines whether components should have static classes, for example, `mantine-Button-root`. By default, static classes are enabled, to disable them set `withStaticClasses` to `false`:

### [withGlobalClasses](#withglobalclasses)

`withGlobalClasses` determines whether global classes should be added with `<style />` tag. Global classes are required for `hiddenFrom`/`visibleFrom` and `lightHidden`/`darkHidden` props to work. By default, global classes are enabled, to disable them set `withGlobalClasses` to `false`. Note that disabling global classes may break styles of some components.

### [getStyleNonce](#getstylenonce)

`getStyleNonce` is a function to generate [nonce](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) attribute added to dynamic generated `<style />` tags.

### [cssVariablesResolver](#cssvariablesresolver)

`cssVariablesResolver` is a function to generate CSS variables styles based on the [theme object](https://mantine.dev/theming/theme-object/). You can learn more about Mantine CSS variables in the [CSS variables guide](https://mantine.dev/styles/css-variables/#css-variables-resolver).

### [env](#env)

`env` prop can be used in test environment to disable some features that might impact tests and/or make it harder to test components:

*   transitions that mount/unmount child component with delay
*   portals that render child component in a different part of the DOM

To enable test environment, set `env` to `test`:

Note that `env="test"` is indented to be used in test environment only with [Jest](https://mantine.dev/guides/jest/) or [Vitest](https://mantine.dev/guides/vitest/), do not use it in the development or production environments. It is also not recommended to be used with end-to-end testing tools like [Cypress](https://mantine.dev/guides/cypress/) or [Playwright](https://mantine.dev/guides/playwright/).</content>
</page>

<page>
  <title>use-click-outside | Mantine</title>
  <url>https://mantine.dev/hooks/use-click-outside/</url>
  <content>[Usage](#usage)
---------------

[API](#api)
-----------

`use-click-outside` hook accepts 3 arguments:

*   `handler` – function that is called on outside click
*   `events` – optional list of events that trigger outside click, `['mousedown', 'touchstart']` by default
*   `nodes` - optional list of nodes that should not trigger outside click event

The hook returns a `ref` object that must be passed to the element based on which outside clicks should be captured.

[Change events](#change-events)
-------------------------------

By default, `use-click-outside` listens to `mousedown` and `touchstart` events, you can change these events by passing an array of events as second argument:

[Multiple nodes](#multiple-nodes)
---------------------------------

[Set ref type](#set-ref-type)
-----------------------------

[Definition](#definition)
-------------------------</content>
</page>

<page>
  <title>use-color-scheme | Mantine</title>
  <url>https://mantine.dev/hooks/use-color-scheme/</url>
  <content>[Usage](#usage)
---------------

`use-color-scheme` hook returns preferred OS color scheme value (`dark` or `light`) and subscribes to changes:

Your system color scheme is light

[Limitations](#limitations)
---------------------------

`use-color-scheme` uses [use-media-query](https://mantine.dev/hooks/use-media-query/) under the hood. It relies on `window.matchMedia()` [API](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) and always returns the specified initial value (first argument, `light` by default) if the API is not available (for example, during the server-side rendering).

[Get initial value in effect](#get-initial-value-in-effect)
-----------------------------------------------------------

By default, to support server-side rendering, `use-color-scheme` does not calculate the initial value on the first render during state initialization. Instead, the value is calculated in `useEffect` and updated after the parent component mounts.

If your application does not have server-side rendering, you can enable immediate calculation of the initial value by changing `getInitialValueInEffect` option:

[Definition](#definition)
-------------------------

[Exported types](#exported-types)
---------------------------------

`UseColorSchemeValue` and `UseMediaQueryOptions` types are exported from `@mantine/hooks` package, you can import them in your application:</content>
</page>

<page>
  <title>use-element-size | Mantine</title>
  <url>https://mantine.dev/hooks/use-element-size/</url>
  <content>[Usage](#usage)
---------------

Resize textarea by dragging its right bottom corner

Width: 0, height: 0

    import { useElementSize } from '@mantine/hooks';
    
    function Demo() {
      const { ref, width, height } = useElementSize();
    
      return (
        <>
          <textarea ref={ref} style={{ width: 400, height: 120 }} />
          <div>Width: {width}, height: {height}</div>
        </>
      );
    }

[API](#api)
-----------

`use-element-size` is a simpler version of [use-resize-observer](https://mantine.dev/hooks/use-resize-observer/) hook. Hook returns a `ref` object that should be passed to the observed element, and the element's `height` and `width`. On the first render (as well as during SSR), or when no element is being observed, `width` and `height` properties are equal to `0`.

    import { useElementSize } from '@mantine/hooks';
    
    const { ref, width, height } = useElementSize();

[Definition](#definition)
-------------------------

    type ObserverRect = Omit<DOMRectReadOnly, 'toJSON'>;
    
    function useResizeObserver<T extends HTMLElement = any>(
      options?: ResizeObserverOptions
    ): readonly [React.RefObject<T>, ObserverRect];</content>
</page>

<page>
  <title>use-event-listener | Mantine</title>
  <url>https://mantine.dev/hooks/use-event-listener/</url>
  <content>[Usage](#usage)
---------------

`use-event-listener` adds a given event listener to an element to which `ref` is assigned. Hook supports the same options as `addEventListener` method. After the component is unmounted, the listener is automatically removed.

    import { useState, useCallback } from 'react';
    import { Button } from '@mantine/core';
    import { useEventListener } from '@mantine/hooks';
    
    function Demo() {
      const [count, setCount] = useState(0);
      const increment = useCallback(() => setCount((c) => c + 1), []);
      const ref = useEventListener('click', increment);
      return <Button ref={ref}>Button clicks: {count}</Button>;
    }

[Definition](#definition)
-------------------------

    function useEventListener<K extends keyof HTMLElementEventMap, T extends HTMLElement = any>(
      type: K,
      listener: (this: HTMLDivElement, ev: HTMLElementEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions,
    ): React.RefCallback<T | null></content>
</page>

<page>
  <title>use-file-dialog | Mantine</title>
  <url>https://mantine.dev/hooks/use-file-dialog/</url>
  <content>[Usage](#usage)
---------------

`use-file-dialog` allows capturing one or more files from the user without file input element:

    import { Button, Group, List } from '@mantine/core';
    import { useFileDialog } from '@mantine/hooks';
    
    function Demo() {
      const fileDialog = useFileDialog();
    
      const pickedFiles = Array.from(fileDialog.files || []).map((file) => (
        <List.Item key={file.name}>{file.name}</List.Item>
      ));
    
      return (
        <div>
          <Group>
            <Button onClick={fileDialog.open}>Pick files</Button>
            {pickedFiles.length > 0 && (
              <Button variant="default" onClick={fileDialog.reset}>
                Reset
              </Button>
            )}
          </Group>
          {pickedFiles.length > 0 && <List mt="lg">{pickedFiles}</List>}
        </div>
      );
    }

[Definition](#definition)
-------------------------

    interface UseFileDialogOptions {
      /** Determines whether multiple files are allowed, `true` by default */
      multiple?: boolean;
    
      /** `accept` attribute of the file input, '*' by default */
      accept?: string;
    
      /** `capture` attribute of the file input */
      capture?: string;
    
      /** Determines whether the user can pick a directory instead of file, `false` by default */
      directory?: boolean;
    
      /** Determines whether the file input state should be reset when the file dialog is opened, `false` by default */
      resetOnOpen?: boolean;
    
      /** Initial selected files */
      initialFiles?: FileList | File[];
    
      /** Called when files are selected */
      onChange?: (files: FileList | null) => void;
    
      /** Called when file dialog is canceled */
      onCancel?: () => void;
    }
    
    interface UseFileDialogReturnValue {
      files: FileList | null;
      open: () => void;
      reset: () => void;
    }
    
    function useFileDialog(input?: UseFileDialogOptions): UseFileDialogReturnValue;

[Exported types](#exported-types)
---------------------------------

`UseFileDialogOptions` and `UseFileDialogReturnValue` types are exported from `@mantine/hooks` package, you can import them in your application:

    import type { UseFileDialogOptions, UseFileDialogReturnValue } from '@mantine/hooks';</content>
</page>

<page>
  <title>use-focus-return | Mantine</title>
  <url>https://mantine.dev/hooks/use-focus-return/</url>
  <content>[Usage](#usage)
---------------

`use-focus-return` automatically returns focus to the last focused element when a given condition is met. For example, it is used in [Modal](https://mantine.dev/core/modal/) component to restore focus after the modal was closed.

Close the modal with the `Escape` key and see how focus returns to the button after the modal closes:

In most cases, you should use this hook with [use-focus-trap](https://mantine.dev/hooks/use-focus-trap/).

If `shouldReturnFocus` option is set to `false` you can call returned function to focus last active element:

[Definition](#definition)
-------------------------

[Exported types](#exported-types)
---------------------------------

`UseFocusReturnOptions` and `UseFocusReturnReturnValue` types are exported from `@mantine/hooks` package, you can import them in your application:</content>
</page>

<page>
  <title>use-focus-trap | Mantine</title>
  <url>https://mantine.dev/hooks/use-focus-trap/</url>
  <content>[Usage](#usage)
---------------

`use-focus-trap` traps focus at the given node, for example in modal, drawer or menu. Node must include at least one focusable element. When the node unmounts, the focus trap is automatically released.

[API](#api)
-----------

The hook accepts focus trap active state as a single argument:

The hook returns `ref` that should be passed to the element:

[Combine with other ref based hooks](#combine-with-other-ref-based-hooks)
-------------------------------------------------------------------------

To combine `use-focus-trap` with other ref based hooks, use [use-merged-ref](https://mantine.dev/hooks/use-merged-ref/) hook:

[Initial focus](#initial-focus)
-------------------------------

By default, focus trap will move focus to the first interactive element. To specify the element that should receive initial focus, add `data-autofocus` attribute:

[Definition](#definition)
-------------------------</content>
</page>

<page>
  <title>use-fullscreen | Mantine</title>
  <url>https://mantine.dev/hooks/use-fullscreen/</url>
  <content>[Usage](#usage)
---------------

`use-fullscreen` allows to enter/exit fullscreen for given element using the [Fullscreen API](https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API). By default, if you don't provide `ref`, the hook will target `document.documentElement`:

[Custom target element](#custom-target-element)
-----------------------------------------------

The hook returns an optional `ref` function that can be passed to an element to act as root. Be sure to follow best practices to not [confuse or trap the end user](https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API/Guide#things_your_users_want_to_know):

[Definition](#definition)
-------------------------

[Exported types](#exported-types)
---------------------------------

`UseFullscreenReturnValue` type is exported from `@mantine/hooks` package, you can import it in your application:</content>
</page>

<page>
  <title>use-focus-within | Mantine</title>
  <url>https://mantine.dev/hooks/use-focus-within/</url>
  <content>[Usage](#usage)
---------------

`use-focus-within` hook detects if any element within the other element has focus. It works the same way as `:focus-within` CSS selector:

One of elements has focus: false

    import { useFocusWithin } from '@mantine/hooks';
    import { TextInput, Button, Box, Text } from '@mantine/core';
    
    function Demo() {
      const { ref, focused } = useFocusWithin();
    
      return (
        <div ref={ref}>
          <Box
            p="xl"
            style={{
              backgroundColor: focused ? 'var(--mantine-color-blue-light)' : 'transparent',
            }}
          >
            <Text size="sm">One of elements has focus: {focused.toString()}</Text>
            <TextInput label="Focus this input" placeholder="Styles will be added to parent" />
            <Button mt="md">Button</Button>
          </Box>
        </div>
      );
    }

[Definition](#definition)
-------------------------

    interface UseFocusWithinOptions {
      onFocus?: (event: FocusEvent) => void;
      onBlur?: (event: FocusEvent) => void;
    }
    
    interface UseFocusWithinReturnValue<T extends HTMLElement = any> {
      ref: React.RefCallback<T | null>;
      focused: boolean;
    }
    
    function useFocusWithin<T extends HTMLElement = any>(
      options?: UseFocusWithinOptions,
    ): UseFocusWithinReturnValue<T>

[Exported types](#exported-types)
---------------------------------

`UseFocusWithinOptions` and `UseFocusWithinReturnValue` types are exported from `@mantine/hooks` package, you can import them in your application:

    import type { UseFocusWithinOptions, UseFocusWithinReturnValue } from '@mantine/hooks';</content>
</page>

<page>
  <title>use-in-viewport | Mantine</title>
  <url>https://mantine.dev/hooks/use-in-viewport/</url>
  <content>[Usage](#usage)
---------------

`use-in-viewport` is a simpler alternative to [use-intersection](https://mantine.dev/hooks/use-intersection/) that only checks if the element is visible in the viewport:

    import { Box, Text } from '@mantine/core';
    import { useInViewport } from '@mantine/hooks';
    
    function Demo() {
      const { ref, inViewport } = useInViewport();
      return (
        <>
          <Text ta="center">{inViewport ? 'Box is visible' : 'Scroll to see box'}</Text>
          <Box h={64} style={{ overflow: 'scroll' }}>
            <Box h={128}></Box>
            <Box ref={ref} bg="blue" h={32} p={8}>
              <Text ta="center" c="white">
                A box
              </Text>
            </Box>
          </Box>
        </>
      );
    }

[Definition](#definition)
-------------------------

    interface UseInViewportReturnValue<T extends HTMLElement = any> {
      inViewport: boolean;
      ref: React.RefCallback<T | null>;
    }
    
    function useInViewport<T extends HTMLElement = any>(): UseInViewportReturnValue<T>

[Exported types](#exported-types)
---------------------------------

`UseInViewportReturnValue` type is exported from `@mantine/hooks` package, you can import it in your application:

    import type { UseInViewportReturnValue } from '@mantine/hooks';</content>
</page>

<page>
  <title>use-hover | Mantine</title>
  <url>https://mantine.dev/hooks/use-hover/</url>
  <content>[Usage](#usage)
---------------

    import { useHover } from '@mantine/hooks';
    
    function Demo() {
      const { hovered, ref } = useHover();
      return (
        <div ref={ref}>
          {hovered ? 'I am hovered' : 'Put mouse over me please'}
        </div>
      );
    }

[Definition](#definition)
-------------------------

    interface UseHoverReturnValue<T extends HTMLElement = any> {
      hovered: boolean;
      ref: React.RefCallback<T | null>;
    }
    
    function useHover<T extends HTMLElement = any>(): UseHoverReturnValue<T>

[Exported types](#exported-types)
---------------------------------

`UseHoverReturnValue` type is exported from `@mantine/hooks` package, you can import it in your application:

    import type { UseHoverReturnValue } from '@mantine/hooks';</content>
</page>

<page>
  <title>use-intersection | Mantine</title>
  <url>https://mantine.dev/hooks/use-intersection/</url>
  <content>[Usage](#usage)
---------------

`use-intersection` returns information about the intersection of a given element with its scroll container or body element with [Intersection Observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API):

[API](#api)
-----------

The hook accepts `IntersectionObserver`'s options as its only optional argument:

The hook returns a `ref` function that should be passed to the observed element, and the latest entry, as returned by `IntersectionObserver`'s callback. See [Intersection Observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API) documentation to learn everything about options.

On the first render (as well as during SSR), or when no element is being observed, the entry is `null`.

[Definition](#definition)
-------------------------

[Exported types](#exported-types)
---------------------------------

`UseIntersectionReturnValue` type is exported from `@mantine/hooks` package, you can import it in your application:</content>
</page>

<page>
  <title>use-long-press | Mantine</title>
  <url>https://mantine.dev/hooks/use-long-press/</url>
  <content>[Usage](#usage)
---------------

    import { Button } from '@mantine/core';
    import { useLongPress } from '@mantine/hooks';
    import { notifications } from '@mantine/notifications';
    
    function Demo() {
      const handlers = useLongPress(() => notifications.show({ message: 'Long press triggered' }));
      return <Button {...handlers}>Press and hold</Button>;
    }

[Definition](#definition)
-------------------------

    interface UseLongPressOptions {
      /** Time in milliseconds to trigger the long press, default is 400ms */
      threshold?: number;
    
      /** Callback triggered when the long press starts */
      onStart?: (event: React.MouseEvent | React.TouchEvent) => void;
    
      /** Callback triggered when the long press finishes */
      onFinish?: (event: React.MouseEvent | React.TouchEvent) => void;
    
      /** Callback triggered when the long press is canceled */
      onCancel?: (event: React.MouseEvent | React.TouchEvent) => void;
    }
    
    interface UseLongPressReturnValue {
      onMouseDown: (event: React.MouseEvent) => void;
      onMouseUp: (event: React.MouseEvent) => void;
      onMouseLeave: (event: React.MouseEvent) => void;
      onTouchStart: (event: React.TouchEvent) => void;
      onTouchEnd: (event: React.TouchEvent) => void;
    }
    
    function useLongPress(
      onLongPress: (event: React.MouseEvent | React.TouchEvent) => void,
      options?: UseLongPressOptions,
    ): UseLongPressReturnValue

[Exported types](#exported-types)
---------------------------------

`UseLongPressOptions` and `UseLongPressReturnValue` types are exported from `@mantine/hooks` package, you can import them in your application:

    import type { UseLongPressOptions, UseLongPressReturnValue } from '@mantine/hooks';</content>
</page>

<page>
  <title>use-media-query | Mantine</title>
  <url>https://mantine.dev/hooks/use-media-query/</url>
  <content>[Usage](#usage)
---------------

`use-media-query` subscribes to media queries. It receives a media query as an argument and returns `true` if the given media query matches the current state. The hook relies on `window.matchMedia()` [API](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) and will return `false` if the API is not available, unless an initial value is provided in the second argument.

Resize browser window to trigger `window.matchMedia` event:

Breakpoint does not match

[Server Side Rendering](#server-side-rendering)
-----------------------------------------------

During server side rendering the hook will always return `false` as `window.matchMedia` api is not available, if that is not a desired behavior, you can override the initial value:

[Definition](#definition)
-------------------------

[Exported types](#exported-types)
---------------------------------

`UseMediaQueryOptions` type is exported from `@mantine/hooks` package, you can import it in your application:</content>
</page>

<page>
  <title>use-mouse | Mantine</title>
  <url>https://mantine.dev/hooks/use-mouse/</url>
  <content>[Usage](#usage)
---------------

Mouse coordinates `{ x: 0, y: 0 }`

    import { Text, Code, Group, Box } from '@mantine/core';
    import { useMouse } from '@mantine/hooks';
    
    function Demo() {
      const { ref, x, y } = useMouse();
    
      return (
        <>
          <Group justify="center">
            <Box ref={ref} w={300} h={180} bg="var(--mantine-color-blue-light)" />
          </Group>
          <Text ta="center">
            Mouse coordinates <Code>{`{ x: ${x}, y: ${y} }`}</Code>
          </Text>
        </>
      );
    }

If you do not provide `ref`, mouse position is tracked relative to the document element:

Mouse coordinates `{ x: 0, y: 0 }`

    import { Text, Code } from '@mantine/core';
    import { useMouse } from '@mantine/hooks';
    
    function Demo() {
      const { x, y } = useMouse();
    
      return (
        <Text ta="center">
          Mouse coordinates <Code>{`{ x: ${x}, y: ${y} }`}</Code>
        </Text>
      );
    }

[API](#api)
-----------

Set `resetOnExit` option to reset mouse position to `0, 0` when mouse leaves the element:

    import { useMouse } from '@mantine/hooks';
    
    const { ref, x, y } = useMouse({ resetOnExit: true });

The hook returns an object with `ref` and `x`, `y` mouse coordinates:

    import { useMouse } from '@mantine/hooks';
    
    const {
      ref, // -> pass ref to target element, if not used document element will be used as target element
      x, // -> mouse x position
      y, // -> mouse y position
    } = useMouse();

On the first render (as well as during SSR), both `x` and `y` values are equal to `0`.

[Definition](#definition)
-------------------------

    function useMouse<T extends HTMLElement = any>(options?: {
      resetOnExit?: boolean;
    }): {
      x: number;
      y: number;
      ref: React.RefObject<T>;
    };</content>
</page>

<page>
  <title>use-mutation-observer | Mantine</title>
  <url>https://mantine.dev/hooks/use-mutation-observer/</url>
  <content>[Usage](#usage)
---------------

`use-mutation-observer` is a wrapper for the [MutationObserver](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver). It allows subscribing changes being made to the DOM tree.

Last detected mutation: Not mutated yet

    import { useState } from 'react';
    import { Button, Text } from '@mantine/core';
    import { useMutationObserver } from '@mantine/hooks';
    
    function Demo() {
      const [lastMutation, setLastMutation] = useState('');
    
      const ref = useMutationObserver<HTMLButtonElement>(
        (mutations) => {
          mutations.forEach((mutation) => {
            if (mutation.type === 'attributes' && mutation.attributeName === 'data-mutation') {
              mutation.target instanceof HTMLElement &&
                setLastMutation(mutation.target.dataset.mutation || '');
            }
          });
        },
        {
          attributes: true,
          attributeFilter: ['data-mutation'],
        }
      );
    
      return (
        <>
          <Button
            ref={ref}
            onClick={(event) => {
              event.currentTarget.dataset.mutation = Math.random().toFixed(3);
            }}
          >
            Click to change to data-mutation attribute
          </Button>
          <Text mt={10} size="sm">
            Last detected mutation: {lastMutation || 'Not mutated yet'}
          </Text>
        </>
      );
    }

[Target element](#target-element)
---------------------------------

If you cannot pass `ref` to the target element, you can pass a function to resolve the target element as a third argument.

Press Ctrl + Shift + L to change direction

Direction was changed to: Not changed yet

    import { useState } from 'react';
    import { Kbd, Text } from '@mantine/core';
    import { useMutationObserver } from '@mantine/hooks';
    
    function Demo() {
      const [lastMutation, setLastMutation] = useState('');
    
      useMutationObserver(
        (mutations) => {
          mutations.forEach((mutation) => {
            if (mutation.type === 'attributes' && mutation.attributeName === 'dir') {
              mutation.target instanceof HTMLElement &&
                setLastMutation(mutation.target.getAttribute('dir') || '');
            }
          });
        },
        {
          attributes: true,
          attributeFilter: ['dir'],
        },
        () => document.documentElement
      );
    
      return (
        <>
          <Text>
            Press <Kbd>Ctrl</Kbd> + <Kbd>Shift</Kbd> + <Kbd>L</Kbd> to change direction
          </Text>
    
          <Text mt={10}>Direction was changed to: {lastMutation || 'Not changed yet'}</Text>
        </>
      );
    }

[Definition](#definition)
-------------------------

    function useMutationObserver<Element extends HTMLElement>(
      callback: MutationCallback,
      options: MutationObserverInit,
      target?: HTMLElement | (() => HTMLElement) | null
    ): RefObject<Element>;</content>
</page>

<page>
  <title>use-orientation | Mantine</title>
  <url>https://mantine.dev/hooks/use-orientation/</url>
  <content>[Usage](#usage)
---------------

`useOrientation` returns an object with the current orientation of the device:

Angle: `0`

Type: `landscape-primary`

    import { Code, Text } from '@mantine/core';
    import { useOrientation } from '@mantine/hooks';
    
    function Demo() {
      const { angle, type } = useOrientation();
      return (
        <>
          <Text>
            Angle: <Code>{angle}</Code>
          </Text>
          <Text>
            Type: <Code>{type}</Code>
          </Text>
        </>
      );
    }

[Definition](#definition)
-------------------------

    interface UseOrientationOptions {
      /** Default angle value, used until the real can be retrieved
       * (during server side rendering and before js executes on the page)
       * If not provided, the default value is `0`
       * */
      defaultAngle?: number;
    
      /** Default angle value, used until the real can be retrieved
       * (during server side rendering and before js executes on the page)
       * If not provided, the default value is `'landscape-primary'`
       * */
      defaultType?: OrientationType;
    
      /** If true, the initial value will be resolved in useEffect (ssr safe)
       *  If false, the initial value will be resolved in useLayoutEffect (ssr unsafe)
       *  True by default.
       */
      getInitialValueInEffect?: boolean;
    }
    
    interface UseOrientationReturnType {
      angle: number;
      type: OrientationType;
    }
    
    function useOrientation(options?: UseOrientationOptions): UseOrientationReturnType;

[Exported types](#exported-types)
---------------------------------

`UseOrientationOptions` and `UseOrientationReturnType` types are exported from `@mantine/hooks` package, you can import them in your application:

    import type { UseOrientationOptions, UseOrientationReturnType } from '@mantine/hooks';</content>
</page>

<page>
  <title>use-radial-move | Mantine</title>
  <url>https://mantine.dev/hooks/use-radial-move/</url>
  <content>[Usage](#usage)
---------------

`use-radial-move` hook can be used to create custom radial sliders, for example [AngleSlider](https://mantine.dev/core/angle-slider/) component is based on this hook. It works similar to [use-move](https://mantine.dev/hooks/use-move/) hook.

Example of creating custom radial slider:

    import { useState } from 'react';
    import { Box } from '@mantine/core';
    import { useRadialMove } from '@mantine/hooks';
    import classes from './Demo.module.css';
    
    function Demo() {
      const [value, setValue] = useState(115);
      const { ref } = useRadialMove(setValue);
    
      return (
        <Box className={classes.root} ref={ref} style={{ '--angle': `${value}deg` }}>
          <div className={classes.value}>{value}°</div>
          <div className={classes.thumb} />
        </Box>
      );
    }

[Definition](#definition)
-------------------------

    interface UseRadialMoveOptions {
      /** Number by which value is incremented/decremented with mouse and touch events, `0.01` by default */
      step?: number;
    
      /** Called in `onMouseUp` and `onTouchEnd` events with the current value */
      onChangeEnd?: (value: number) => void;
    
      /** Called in `onMouseDown` and `onTouchStart` events */
      onScrubStart?: () => void;
    
      /** Called in `onMouseUp` and `onTouchEnd` events */
      onScrubEnd?: () => void;
    }
    
    interface UseRadialMoveReturnValue<T extends HTMLElement = any> {
      /** Ref to be passed to the element that should be used for radial move */
      ref: React.RefCallback<T | null>;
    
      /** Indicates whether the radial move is active */
      active: boolean;
    }
    
    function useRadialMove<T extends HTMLElement = HTMLDivElement>(
      onChange: (value: number) => void,
      options?: UseRadialMoveOptions,
    ): UseRadialMoveReturnValue<T>;

[Exported types](#exported-types)
---------------------------------

`UseRadialMoveOptions` and `UseRadialMoveReturnValue` types are exported from `@mantine/hooks` package, you can import them in your application:

    import type { UseRadialMoveOptions, UseRadialMoveReturnValue } from '@mantine/hooks';</content>
</page>

<page>
  <title>use-reduced-motion | Mantine</title>
  <url>https://mantine.dev/hooks/use-reduced-motion/</url>
  <content>Detects if user prefers to reduce motion

[Usage](#usage)
---------------

`use-reduced-motion` detects if user [prefers to reduce motion](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion). It uses [use-media-query](https://mantine.dev/hooks/use-media-query/) hook under the hood. Hook relies on `window.matchMedia()` [API](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) and will always return `false` if api is not available (e.g. during server side rendering), unless the initial value is provided in the first argument.

Use hook to detect if user prefers to reduce motion (`(prefers-reduced-motion: reduce)` media query) and set animations duration based on this value.

You prefer not to reduce motion

[Definition](#definition)
-------------------------</content>
</page>

<page>
  <title>use-scroll-spy | Mantine</title>
  <url>https://mantine.dev/hooks/use-scroll-spy/</url>
  <content>[Usage](#usage)
---------------

`use-scroll-spy` hook tracks scroll position and returns index of the element that is currently in the viewport. It is useful for creating table of contents components (like in mantine.dev sidebar on the right side) and similar features.

[Hook options](#hook-options)
-----------------------------

`use-scroll-spy` accepts an object with options:

*   `selector` - selector to get headings, by default it is `'h1, h2, h3, h4, h5, h6'`
*   `getDepth` - a function to retrieve depth of heading, by default depth is calculated based on tag name
*   `getValue` - a function to retrieve heading value, by default `element.textContent` is used

Example of using custom options to get headings with `data-heading` attribute:

[Reinitializing hook data](#reinitializing-hook-data)
-----------------------------------------------------

By default, `use-scroll-spy` does not track changes in the DOM. If you want to update headings data after the parent component has mounted, you can use `reinitialize` function:

[Definition](#definition)
-------------------------

All types used in the definition are exported from `@mantine/hooks` package.

[Exported types](#exported-types)
---------------------------------

`UseScrollSpyOptions` and `UseScrollSpyReturnType` types are exported from `@mantine/hooks` package, you can import them in your application:</content>
</page>

<page>
  <title>use-scroll-into-view | Mantine</title>
  <url>https://mantine.dev/hooks/use-scroll-into-view/</url>
  <content>[Usage](#usage)
---------------

`use-scroll-into-view` handles scroll behavior for any scrollable element. Basic usage works the same way as `element.scrollIntoView()`. Hook adjusts scrolling animation with respect to the `reduced-motion` user preference.

[API](#api)
-----------

The hook is configured with settings object:

*   `onScrollFinish` – function that will be called after scroll animation
*   `easing` – custom math easing function
*   `duration` - duration of scroll animation in milliseconds
*   `axis` - axis of scroll
*   `cancelable` - indicator if animation may be interrupted by user scrolling
*   `offset` - additional distance between the nearest edge and element
*   `isList` - indicator that prevents content jumping in scrolling lists with multiple targets, for example Select, Carousel

Hook returns an object with:

*   `scrollIntoView` – function that starts scroll animation
*   `cancel` – function that stops scroll animation
*   `targetRef` - ref of target HTML node
*   `scrollableRef` - ref of scrollable parent HTML element, if not used document element will be used

Returned `scrollIntoView` function accepts single optional argument `alignment` - optional target element alignment relatively to parent based on current axis.

[Easing](#easing)
-----------------

The hook accept custom `easing` math function to control the flow of animation. It takes `t` argument, which is a number between `0` and `1`.

Default easing is `easeInOutQuad` - more info [here](https://easings.net/#easeInOutQuad). You can find other popular examples on [easings.net](https://easings.net/)

[Parent node](#parent-node)
---------------------------

[Scroll X axis](#scroll-x-axis)
-------------------------------

[Definition](#definition)
-------------------------

[Exported types](#exported-types)
---------------------------------

`UseScrollIntoViewOptions` and `UseScrollIntoViewReturnValue` types are exported from `@mantine/hooks` package, you can import them in your application:</content>
</page>

<page>
  <title>use-viewport-size | Mantine</title>
  <url>https://mantine.dev/hooks/use-viewport-size/</url>
  <content>[Usage](#usage)
---------------

`use-viewport-size` returns current viewport's `width` and `height`, it subscribes to `resize` and `orientationchange` events, during ssr hook will return `{ width: 0, height: 0 }`:

Width: 0, height: 0

    import { useViewportSize } from '@mantine/hooks';
    
    function Demo() {
      const { height, width } = useViewportSize();
      return <>Width: {width}, height: {height}</>;
    }

[Definition](#definition)
-------------------------

    function useViewportSize(): {
      height: number;
      width: number;
    };

[

use-scroll-spy

](https://mantine.dev/hooks/use-scroll-spy/)[

use-window-event

](https://mantine.dev/hooks/use-window-event/)</content>
</page>

<page>
  <title>use-window-event | Mantine</title>
  <url>https://mantine.dev/hooks/use-window-event/</url>
  <content>[Usage](#usage)
---------------

`use-window-event` adds event listener to `window` object on component mount and removes it on unmount:

    import { useEffect } from 'react';
    import { useWindowEvent } from '@mantine/hooks';
    
    const handler = (event: KeyboardEvent) => console.log(event);
    
    // regular way
    useEffect(() => {
      window.addEventListener('keydown', handler);
      return () => window.removeEventListener('keydown', handler);
    }, []);
    
    // with use-window-event hook
    useWindowEvent('keydown', handler);

[Example](#example)
-------------------

Search focus with `⌘ + K` on mac or `Ctrl + K` on windows and linux on Mantine docs website:

    import { useRef } from 'react';
    import { useWindowEvent } from '@mantine/hooks';
    
    function Demo() {
      const inputRef = useRef<HTMLInputElement>(null);
    
      useWindowEvent('keydown', (event) => {
        if (event.code === 'KeyK' && (event.ctrlKey || event.metaKey)) {
          event.preventDefault();
          inputRef.current?.focus();
        }
      });
    
      return <input ref={inputRef} />;
    }

[Definition](#definition)
-------------------------

The hook has the same definition as `window.addEventListener` function:

    function useWindowEvent<K extends keyof WindowEventMap>(
      type: K,
      listener: (this: Window, ev: WindowEventMap[K]) => any,
      options?: boolean | AddEventListenerOptions
    ): void;</content>
</page>

<page>
  <title>use-window-scroll | Mantine</title>
  <url>https://mantine.dev/hooks/use-window-scroll/</url>
  <content>[Usage](#usage)
---------------

`use-window-scroll` returns current scroll position and a function to scroll smoothly to given position:

Scroll position x: 0, y: 0

    import { useWindowScroll } from '@mantine/hooks';
    import { Button, Text, Group } from '@mantine/core';
    
    function Demo() {
      const [scroll, scrollTo] = useWindowScroll();
    
      return (
        <Group justify="center">
          <Text>
            Scroll position x: {scroll.x}, y: {scroll.y}
          </Text>
          <Button onClick={() => scrollTo({ y: 0 })}>Scroll to top</Button>
        </Group>
      );
    }

[Definition](#definition)
-------------------------

    interface UseWindowScrollPosition {
      x: number;
      y: number;
    }
    
    type UseWindowScrollTo = (position: Partial<UseWindowScrollPosition>) => void;
    type UseWindowScrollReturnValue = [UseWindowScrollPosition, UseWindowScrollTo];
    
    function useWindowScroll(): UseWindowScrollReturnValue;

[Exported types](#exported-types)
---------------------------------

`UseWindowScrollTo`, `UseWindowScrollPosition` and `UseWindowScrollReturnValue` types are exported from `@mantine/hooks` package, you can import them in your application:

    import type { UseWindowScrollTo, UseWindowScrollPosition, UseWindowScrollReturnValue } from '@mantine/hooks';</content>
</page>

<page>
  <title>use-counter | Mantine</title>
  <url>https://mantine.dev/hooks/use-counter/</url>
  <content>[Usage](#usage)
---------------

    import { Group, Button, Text } from '@mantine/core';
    import { useCounter } from '@mantine/hooks';
    
    function Demo() {
      const [count, handlers] = useCounter(0, { min: 0, max: 10 });
    
      return (
        <>
          <Text>Count: {count}</Text>
          <Group justify="center">
            <Button onClick={handlers.increment}>Increment</Button>
            <Button onClick={handlers.decrement}>Decrement</Button>
            <Button onClick={handlers.reset}>Reset</Button>
            <Button onClick={() => handlers.set(5)}>Set 5</Button>
          </Group>
        </>
      );
    }

[Definition](#definition)
-------------------------

    interface UseCounterOptions {
      min?: number;
      max?: number;
    }
    
    interface UseCounterOptions {
      min?: number;
      max?: number;
    }
    
    interface UseCounterHandlers {
      increment: () => void;
      decrement: () => void;
      set: (value: number) => void;
      reset: () => void;
    }
    
    type UseCounterReturnValue = [number, UseCounterHandlers];
    
    function useCounter(
      initialValue?: number,
      options?: UseCounterOptions,
    ): UseCounterReturnValue

[Exported types](#exported-types)
---------------------------------

`UseCounterOptions`, `UseCounterHandlers` and `UseCounterReturnValue` types are exported from `@mantine/hooks` package, you can import them in your application:

    import type { UseCounterOptions, UseCounterHandlers, UseCounterReturnValue } from '@mantine/hooks';</content>
</page>

<page>
  <title>use-debounced-callback | Mantine</title>
  <url>https://mantine.dev/hooks/use-debounced-callback/</url>
  <content>[Usage](#usage)
---------------

`use-debounced-callback` creates a debounced version of the given function, delaying its execution until a specified time has elapsed since the last invocation.

[flushOnUnmount option](#flushonunmount-option)
-----------------------------------------------

By default, the callback is not fired when the component unmounts. If you want to execute the pending callback before the component unmounts, set `flushOnUnmount: true`:

You can call the `flush` method to execute the debounced callback immediately:

[Definition](#definition)
-------------------------

[Exported types](#exported-types)
---------------------------------

`UseDebouncedCallbackOptions` and `UseDebouncedCallbackReturnValue` types are exported from `@mantine/hooks` package, you can import them in your application:</content>
</page>

<page>
  <title>use-debounced-state | Mantine</title>
  <url>https://mantine.dev/hooks/use-debounced-state/</url>
  <content>[Usage](#usage)
---------------

`use-debounced-state` hook debounces value changes. This can be useful in case you want to perform a heavy operation based on react state, for example, send search request. Unlike [use-debounced-value](https://mantine.dev/hooks/use-debounced-value/) it is designed to work with uncontrolled components.

Enter value to see debounce effect

Debounced value: \[empty string\]

[Differences from use-debounce-value](#differences-from-use-debounce-value)
---------------------------------------------------------------------------

*   You do not have direct access to the non-debounced value.
*   It is used for uncontrolled inputs (`defaultValue` prop instead of `value`), e.g. does not render with every state change like a character typed in an input.
*   It does not work with custom state providers or props, and it uses `useState` internally.

[Leading update](#leading-update)
---------------------------------

You can immediately update value with first call with `{ leading: true }` options:

Enter value to see debounce effect

Debounced value: \[empty string\]

[Definition](#definition)
-------------------------

[Exported types](#exported-types)
---------------------------------

`UseDebouncedStateOptions` and `UseDebouncedStateReturnValue` types are exported from `@mantine/hooks` package, you can import them in your application:</content>
</page>

<page>
  <title>use-debounced-value | Mantine</title>
  <url>https://mantine.dev/hooks/use-debounced-value/</url>
  <content>[Usage](#usage)
---------------

`use-debounced-value` hook debounces value changes. This can be useful in case you want to perform a heavy operation based on react state, for example, send search request. Unlike [use-debounced-state](https://mantine.dev/hooks/use-debounced-state/) it is designed to work with controlled components.

Enter value to see debounce effect

Value: \[empty string\]

Debounced value: \[empty string\]

[Differences from use-debounced-state](#differences-from-use-debounced-state)
-----------------------------------------------------------------------------

*   You have direct access to the non-debounced value.
*   It is used for controlled inputs (`value` prop instead of `defaultValue`), e.g. renders on every state change like a character typed in an input.
*   It works with props or other state providers, and it does not force use of `useState`.

[Leading update](#leading-update)
---------------------------------

You can immediately update value with first call with `{ leading: true }` options:

Enter value to see debounce effect

Value: \[empty string\]

Debounced value: \[empty string\]

[Cancel update](#cancel-update)
-------------------------------

Hook provides `cancel` callback, you can use it to cancel update. Update cancels automatically on component unmount.

In this example, type in some text and click the cancel button within a second to cancel debounced value change:

Enter value to see debounce effect

Value: \[empty string\]

Debounced value: \[empty string\]

[Definition](#definition)
-------------------------

[Exported types](#exported-types)
---------------------------------

`UseDebouncedValueOptions` and `UseDebouncedValueReturnValue` types are exported from `@mantine/hooks` package, you can import them in your application:</content>
</page>

<page>
  <title>use-disclosure | Mantine</title>
  <url>https://mantine.dev/hooks/use-disclosure/</url>
  <content>Manages boolean state, provides open, close and toggle handlers, usually used with modals, drawers and popovers

[Usage](#usage)
---------------

`use-disclosure` hook manages boolean state. It provides `open`, `close` and `toggle` handlers and accepts optional `onOpen` and `onClose` callbacks. You can use it to manage controlled modals, popovers and other similar components:

[Callbacks](#callbacks)
-----------------------

The `onOpen` and `onClose` callbacks execute when the opened state changes:

[Definition](#definition)
-------------------------

[Exported types](#exported-types)
---------------------------------

`UseDisclosureOptions`, `UseDisclosureHandlers` and `UseDisclosureReturnValue` types are exported from `@mantine/hooks` package, you can import them in your application:</content>
</page>

<page>
  <title>use-id | Mantine</title>
  <url>https://mantine.dev/hooks/use-id/</url>
  <content>[Usage](#usage)
---------------

`use-id` hook generates a random id that persists across renders. The hook is usually used to bind input elements to labels. The generated random id is saved to ref and will not change unless the component is unmounted.

    import { useId } from '@mantine/hooks';
    
    function Input({ id }: { id?: string }) {
      const uuid = useId(id);
    
      return (
        <>
          <label htmlFor={uuid}>Input label</label>
          <input type="text" id={uuid} />
        </>
      );
    }
    
    // input and label will have id 'my-id'
    const withId = <Input id="my-id" />;
    
    // input and label will have random id 'mantine-fZMoF'
    const withoutId = <Input />;

[Definition](#definition)
-------------------------

    function useId(id: string): string;</content>
</page>

<page>
  <title>use-input-state | Mantine</title>
  <url>https://mantine.dev/hooks/use-input-state/</url>
  <content>[Usage](#usage)
---------------

`use-input-state` handles state of native inputs (with event in `onChange` handler) and custom inputs (with value in `onChange` handler). Hook works with all Mantine and native inputs:

    import { useState } from 'react';
    import { NumberInput, TextInput } from '@mantine/core';
    import { useInputState } from '@mantine/hooks';
    
    function WithUseInputState() {
      const [stringValue, setStringValue] = useInputState('');
      const [numberValue, setNumberValue] = useInputState<
        string | number
      >(0);
    
      return (
        <>
          <input
            type="text"
            value={stringValue}
            onChange={setStringValue}
          />
          <TextInput value={stringValue} onChange={setStringValue} />
          <NumberInput value={numberValue} onChange={setNumberValue} />
        </>
      );
    }
    
    function WithUseState() {
      const [stringValue, setStringValue] = useState('');
      const [numberValue, setNumberValue] = useState<string | number>(0);
    
      return (
        <>
          <input
            type="text"
            value={stringValue}
            onChange={(event) =>
              setStringValue(event.currentTarget.value)
            }
          />
          <TextInput
            value={stringValue}
            onChange={(event) =>
              setStringValue(event.currentTarget.value)
            }
          />
          <NumberInput value={numberValue} onChange={setNumberValue} />
        </>
      );
    }

[Definition](#definition)
-------------------------

    type UseInputStateReturnValue<T> = [
      T,
      (value: null | undefined | T | React.ChangeEvent<any>) => void,
    ];
    
    function useInputState<T>(initialState: T): UseInputStateReturnValue<T>

[Exported types](#exported-types)
---------------------------------

`UseInputStateReturnValue` type is exported from `@mantine/hooks` package, you can import it in your application:

    import type { UseInputStateReturnValue } from '@mantine/hooks';</content>
</page>

<page>
  <title>use-list-state | Mantine</title>
  <url>https://mantine.dev/hooks/use-list-state/</url>
  <content>[Usage](#usage)
---------------

`use-list-state` provides an API to work with list state:

[API](#api)
-----------

`use-list-state` takes an array as a single argument and returns a list of values and handlers to change them in a tuple, similar to `useState` hook.

The hook provides handlers to work with array data:

*   `append` – add items to the end of the list
*   `prepend` – add items to the start of the list
*   `pop` – remove last item
*   `shift` – remove first item
*   `insert` – insert items at given index
*   `remove` – remove items at given indices
*   `reorder` – move item from one position to another
*   `swap` – swap items positions
*   `apply` – apply given function to all items in the list
*   `applyWhere` - apply given function to selective items using condition
*   `setItem` – replace item at given index
*   `setItemProp` – set item property at given index
*   `setState` – set list state with react action
*   `filter` - filter values with callback function

[Indeterminate state checkbox example](#indeterminate-state-checkbox-example)
-----------------------------------------------------------------------------

Receive all notifications

Receive email notifications

Receive sms notifications

Receive push notifications

[UseListStateHandlers type](#useliststatehandlers-type)
-------------------------------------------------------

`@mantine/hooks` package exports `UseListStateHandlers`. It is a generic type that contains all handlers from `useListState` hook. It can be used to type handlers in your components.

`UseListStateHandlers` type:

The type is useful when you want to pass `use-list-state` handlers to child components as a prop:

[Set item type](#set-item-type)
-------------------------------

By default, `use-list-state` will use type from `initialValues`. If you call the hook with an empty array, you must specify item type:

[Definition](#definition)
-------------------------

[Exported types](#exported-types)
---------------------------------

`UseListStateHandlers` type is exported from `@mantine/hooks` package, you can import it in your application:</content>
</page>

<page>
  <title>use-local-storage | Mantine</title>
  <url>https://mantine.dev/hooks/use-local-storage/</url>
  <content>[Usage](#usage)
---------------

`use-local-storage` allows using value from the `localStorage` as react state. The hook works the same way as `useState`, but also writes the value to the `localStorage`:

[Example](#example)
-------------------

Example of a color scheme toggle button that uses `use-local-storage` hook to store current color scheme in the `localStorage`:

[Remove value](#remove-value)
-----------------------------

Use `removeValue` callback to clean `localStorage`/`sessionStorage`. When value is removed it is reset to `defaultValue`:

[Browser tabs synchronization](#browser-tabs-synchronization)
-------------------------------------------------------------

`use-local-storage` subscribes to [storage event](https://developer.mozilla.org/en-US/docs/Web/API/Window/storage_event). When state changes in one tab, it automatically updates the value in all other opened browser tabs. You can test this feature by opening 2 tabs with Mantine docs side by side and changing the color scheme (button on the top right or `⌘ + J` on MacOS and `Ctrl + J` on Windows and Linux).

[Serialize/deserialize JSON](#serializedeserialize-json)
--------------------------------------------------------

By default, the hook will serialize/deserialize data with `JSON.stringify`/`JSON.parse`. If you need to store data in local storage that cannot be serialized with `JSON.stringify` – provide your own serialization handlers:

[Usage with superjson](#usage-with-superjson)
---------------------------------------------

[superjson](https://github.com/blitz-js/superjson) is compatible with `JSON.stringify`/`JSON.parse` but works for `Date`, `Map`, `Set` and `BigInt`:

[use-session-storage](#use-session-storage)
-------------------------------------------

`use-session-storage` hook works the same way as `use-local-storage` hook but uses `sessionStorage` instead of `window.localStorage`:

[Set value type](#set-value-type)
---------------------------------

You can specify value type same as in `useState` hook:

[Read storage value](#read-storage-value)
-----------------------------------------

To read value from storage without using hook, use `readLocalStorageValue`/`readSessionStorageValue` functions. Functions accept the same arguments as `use-local-storage`/`use-session-storage` hooks:

[Definition](#definition)
-------------------------

[Exported types](#exported-types)
---------------------------------

`UseStorageOptions` and `UseStorageReturnValue` types are exported from `@mantine/hooks` package, you can import them in your application:</content>
</page>

<page>
  <title>use-map | Mantine</title>
  <url>https://mantine.dev/hooks/use-map/</url>
  <content>    import { IconPlus, IconTrash } from '@tabler/icons-react';
    import { ActionIcon, Group, Table } from '@mantine/core';
    import { useMap } from '@mantine/hooks';
    
    function Demo() {
      const map = useMap([
        ['/hooks/use-media-query', 4124],
        ['/hooks/use-clipboard', 8341],
        ['/hooks/use-fetch', 9001],
      ]);
    
      const rows = Array.from(map.entries()).map(([key, value]) => (
        <Table.Tr key={key}>
          <Table.Td>{key}</Table.Td>
          <Table.Td>{value}</Table.Td>
          <Table.Td>
            <Group>
              <ActionIcon variant="default" onClick={() => map.set(key, value + 1)} fw={500}>
                <IconPlus stroke={1.5} size={18} />
              </ActionIcon>
              <ActionIcon variant="default" onClick={() => map.delete(key)} c="red">
                <IconTrash stroke={1.5} size={18} />
              </ActionIcon>
            </Group>
          </Table.Td>
        </Table.Tr>
      ));
    
      return (
        <Table layout="fixed">
          <Table.Thead>
            <Table.Tr>
              <Table.Th>Page</Table.Th>
              <Table.Th>Views last month</Table.Th>
              <Table.Th />
            </Table.Tr>
          </Table.Thead>
          <Table.Tbody>{rows}</Table.Tbody>
        </Table>
      );
    }</content>
</page>

<page>
  <title>use-pagination | Mantine</title>
  <url>https://mantine.dev/hooks/use-pagination/</url>
  <content>[Usage](#usage)
---------------

`use-pagination` is a state management hook for [Pagination](https://mantine.dev/core/pagination/) component, it manages pagination with controlled and uncontrolled state:

[Controlled](#controlled)
-------------------------

The hook supports controlled mode, provide `page` and `onChange` props to manage state from outside:

[Siblings](#siblings)
---------------------

Control number of active item siblings with `siblings`:

1 sibling (default)

2 siblings

3 siblings

[Boundaries](#boundaries)
-------------------------

Control number of items on each boundary with `boundaries`:

1 boundary (default)

2 boundaries

3 boundaries

[Definition](#definition)
-------------------------

[Exported types](#exported-types)
---------------------------------

`UsePaginationOptions` and `UsePaginationReturnValue` types are exported from `@mantine/hooks` package, you can import them in your application:</content>
</page>

<page>
  <title>use-queue | Mantine</title>
  <url>https://mantine.dev/hooks/use-queue/</url>
  <content>[Usage](#usage)
---------------

`use-queue` limits the number of data in current state and places the rest of it in a queue. For example, in [@mantine/notifications](https://mantine.dev/x/notifications/) package number of notifications that is currently displayed is limited and other new notifications are added to the queue and displayed once available space appears.

[API](#api)
-----------

The hook accepts one argument – a configuration object with keys:

*   `initialValues` – optional initial values (divided between state and queue according to limit), defaults to empty array
*   `limit` – maximum number of items that state can include, every next item after the limit is exceeded is put in queue

Return value:

*   `state` – current state
*   `queue` – current queue
*   `add` – add any number of items to state or queue
*   `update` – apply given function to all items in state and queue, use it to filter, modify or add items
*   `cleanQueue` – remove all items from the queue

[Set item type](#set-item-type)
-------------------------------

By default, the hook will get types information from `initialValues` automatically:

If you do not provide `initialValues`, pass in type for state item:

[Definition](#definition)
-------------------------

[Exported types](#exported-types)
---------------------------------

`UseQueueOptions` and `UseQueueReturnValue` types are exported from `@mantine/hooks` package, you can import them in your application:</content>
</page>

<page>
  <title>use-previous | Mantine</title>
  <url>https://mantine.dev/hooks/use-previous/</url>
  <content>[Usage](#usage)
---------------

`use-previous` stores the previous value of a state in a ref. It returns `undefined` on initial render and the previous value of a state after rerender:

Current value:

Previous value:

    import { TextInput, Text } from '@mantine/core';
    import { usePrevious, useInputState } from '@mantine/hooks';
    
    function Demo() {
      const [value, setValue] = useInputState('');
      const previousValue = usePrevious(value);
    
      return (
        <div>
          <TextInput
            label="Enter some text here"
            placeholder="Enter some text here"
            id="previous-demo-input"
            value={value}
            onChange={setValue}
          />
          <Text mt="md">Current value: {value}</Text>
          <Text>Previous value: {previousValue}</Text>
        </div>
      );
    }

[Definition](#definition)
-------------------------

    function usePrevious<T>(value: T): T | undefined;</content>
</page>

<page>
  <title>use-set | Mantine</title>
  <url>https://mantine.dev/hooks/use-set/</url>
  <content>[Usage](#usage)
---------------

`useSet` return [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) object that can be used as React state: `add`, `clear` and `delete` methods trigger state updates.

Add new scope

Duplicate scopes are not allowed

`@mantine``@mantine-tests``@mantinex`

    import { useState } from 'react';
    import { Code, Stack, TextInput } from '@mantine/core';
    import { useSet } from '@mantine/hooks';
    
    function Demo() {
      const [input, setInput] = useState('');
      const scopes = useSet<string>(['@mantine', '@mantine-tests', '@mantinex']);
    
      const isDuplicate = scopes.has(input.trim().toLowerCase());
    
      const items = Array.from(scopes).map((scope) => <Code key={scope}>{scope}</Code>);
    
      return (
        <>
          <TextInput
            label="Add new scope"
            placeholder="Enter scope"
            description="Duplicate scopes are not allowed"
            value={input}
            onChange={(event) => setInput(event.currentTarget.value)}
            error={isDuplicate && 'Scope already exists'}
            onKeyDown={(event) => {
              if (event.nativeEvent.code === 'Enter' && !isDuplicate) {
                scopes.add(input.trim().toLowerCase());
                setInput('');
              }
            }}
          />
    
          <Stack gap={5} align="flex-start" mt="md">
            {items}
          </Stack>
        </>
      );
    }

[Definition](#definition)
-------------------------

    function useSet<T>(values?: T[]): Set<T>;</content>
</page>

<page>
  <title>use-set-state | Mantine</title>
  <url>https://mantine.dev/hooks/use-set-state/</url>
  <content>    import { useSetState } from '@mantine/hooks';
    
    const [state, setState] = useSetState({
      name: 'John',
      age: 35,
      job: 'Engineer',
    });
    
    state; // -> { name: 'John', age: 35, job: 'Engineer' }
    
    setState({ name: 'Jane' }); // -> { name: 'Jane', age: 35, job: 'Engineer' }
    setState({ age: 25, job: 'Manager' }); // -> { name: 'Jane', age: 25, job: 'Manager' }
    setState((current) => ({ age: current.age + 7 })); // -> { name: 'Jane', age: 32, job: 'Manager' }</content>
</page>

<page>
  <title>use-state-history | Mantine</title>
  <url>https://mantine.dev/hooks/use-state-history/</url>
  <content>[Usage](#usage)
---------------

`useStateHistory` hook is used to create a state with history, it returns current value, handlers to go back/forward and a history object with all previous values and current index.

Current value: 1

{
  "history": \[
    1
  \],
  "current": 0
}

[Definition](#definition)
-------------------------

`UseStateHistoryHandlers` and `StateHistory` interfaces are exported from `@mantine/hooks` package.

[Exported types](#exported-types)
---------------------------------

`UseStateHistoryHandlers`, `UseStateHistoryReturnValue` and `UseStateHistoryValue` types are exported from `@mantine/hooks` package, you can import them in your application:</content>
</page>

<page>
  <title>use-throttled-callback | Mantine</title>
  <url>https://mantine.dev/hooks/use-throttled-callback/</url>
  <content>[Usage](#usage)
---------------

`useThrottledCallback` accepts a function and a wait time in milliseconds. It returns a throttled version of the function that will only be called at most once every `wait` milliseconds.

    import { Text, TextInput } from '@mantine/core';
    import { useThrottledCallback } from '@mantine/hooks';
    
    function Demo() {
      const [throttledValue, setValue] = useState('');
      const throttledSetValue = useThrottledCallback((value) => setValue(value), 1000);
    
      return (
        <>
          <TextInput
            placeholder="Search"
            onChange={(event) => throttledSetValue(event.currentTarget.value)}
          />
          <Text>Throttled value: {throttledValue || '–'}</Text>
        </>
      );
    }

[Definition](#definition)
-------------------------

    function useThrottledCallback<T extends (...args: any[]) => any>(
      callback: T,
      wait: number
    ): (...args: Parameters<T>) => void;</content>
</page>

<page>
  <title>use-throttled-state | Mantine</title>
  <url>https://mantine.dev/hooks/use-throttled-state/</url>
  <content>[Usage](#usage)
---------------

`useThrottledState` works similar to `useState` but throttles the state updates. `setThrottledState` handler in the example below will be called at most once every 1000ms.

    import { Text, TextInput } from '@mantine/core';
    import { useThrottledState } from '@mantine/hooks';
    
    function Demo() {
      const [throttledValue, setThrottledValue] = useThrottledState('', 1000);
    
      return (
        <>
          <TextInput
            placeholder="Search"
            onChange={(event) => setThrottledValue(event.currentTarget.value)}
          />
          <Text>Throttled value: {throttledValue || '–'}</Text>
        </>
      );
    }

[Definition](#definition)
-------------------------

    function useThrottledState<T = any>(
      defaultValue: T,
      wait: number
    ): readonly [T, (newValue: React.SetStateAction<T>) => void];</content>
</page>

<page>
  <title>use-throttled-value | Mantine</title>
  <url>https://mantine.dev/hooks/use-throttled-value/</url>
  <content>[Usage](#usage)
---------------

`useThrottledValue` accepts a value and a wait time in milliseconds. It returns a throttled value that cannot change more than once every `wait` milliseconds.

    import { Text, TextInput } from '@mantine/core';
    import { useThrottledValue } from '@mantine/hooks';
    
    function Demo() {
      const [value, setValue] = useState('');
      const throttledValue = useThrottledValue(value, 1000);
    
      return (
        <>
          <TextInput placeholder="Search" onChange={(event) => setValue(event.currentTarget.value)} />
          <Text>Throttled value: {throttledValue || '–'}</Text>
        </>
      );
    }

[Definition](#definition)
-------------------------

    function useThrottledValue<T>(value: T, wait: number): T;</content>
</page>

<page>
  <title>use-toggle | Mantine</title>
  <url>https://mantine.dev/hooks/use-toggle/</url>
  <content>[Usage](#usage)
---------------

`use-toggle` implements a common state pattern – it switches state between given values:

[API](#api)
-----------

The hook accepts an array as single argument, the first option will be used as the default value.

The hook returns an array with state value and toggle function:

If you do not provide an array with options, then `use-toggle` will use boolean values with `false` as default:

[Set type](#set-type)
---------------------

By default, TypeScript will guess your type, but in most cases it's better to use const assertion to prevent type widening:

[Definition](#definition)
-------------------------

[Exported types](#exported-types)
---------------------------------

`UseToggleReturnValue` type is exported from `@mantine/hooks` package, you can import it in your application:</content>
</page>

<page>
  <title>use-uncontrolled | Mantine</title>
  <url>https://mantine.dev/hooks/use-uncontrolled/</url>
  <content>[Usage](#usage)
---------------

`use-uncontrolled` manages state for both controlled and uncontrolled components:

    import { useUncontrolled } from '@mantine/hooks';
    
    interface CustomInputProps {
      value?: string;
      defaultValue?: string;
      onChange?: (value: string) => void;
    }
    
    function CustomInput({
      value,
      defaultValue,
      onChange,
    }: CustomInputProps) {
      const [_value, handleChange] = useUncontrolled({
        value,
        defaultValue,
        finalValue: 'Final',
        onChange,
      });
    
      return (
        <input
          type="text"
          value={_value}
          onChange={(event) => handleChange(event.currentTarget.value)}
        />
      );
    }

[Set value type](#set-value-type)
---------------------------------

By default, the hook will set type automatically, but you can provide your own type:

    import { useUncontrolled } from '@mantine/hooks';
    
    function Demo() {
      const [_value, handleChange] = useUncontrolled<number>({
        value: 10,
        defaultValue: 5,
        finalValue: 20,
        onChange: (val) => console.log(val > 10),
      });
    }

[Definition](#definition)
-------------------------

    interface UseUncontrolledOptions<T> {
      /** Value for controlled state */
      value?: T;
    
      /** Initial value for uncontrolled state */
      defaultValue?: T;
    
      /** Final value for uncontrolled state when value and defaultValue are not provided */
      finalValue?: T;
    
      /** Controlled state onChange handler */
      onChange?: (value: T) => void;
    }
    
    type UseUncontrolledReturnValue<T> = [
      /** Current value */
      T,
    
      /** Handler to update the state, passes `value` and `payload` to `onChange` */
      (value: T, ...payload: any[]) => void,
    
      /** True if the state is controlled, false if uncontrolled */
      boolean,
    ];
    
    function useUncontrolled<T>(input: UseUncontrolledOptions<T>): UseUncontrolledReturnValue<T>;

[Exported types](#exported-types)
---------------------------------

`UseUncontrolledOptions` and `UseUncontrolledReturnValue` types are exported from `@mantine/hooks` package, you can import them in your application:

    import type { UseUncontrolledOptions, UseUncontrolledReturnValue } from '@mantine/hooks';</content>
</page>

<page>
  <title>use-validated-state | Mantine</title>
  <url>https://mantine.dev/hooks/use-validated-state/</url>
  <content>[Usage](#usage)
---------------

`use-validated-state` validates state with a given rule each time state is set. It returns an object with current validation state, last valid value and current value:

    import { useValidatedState } from '@mantine/hooks';
    
    const [{ lastValidValue, value, valid }, setValue] =
      useValidatedState('valid', (state) => state === 'valid');
    
    lastValidValue; // -> valid
    value; // -> valid
    valid; // -> true
    
    setValue('invalid');
    
    lastValidValue; // -> valid
    value; // -> invalid
    valid; // -> false

[Example](#example)
-------------------

Current value: \[empty string\]

Last valid value: \[empty string\]

    import { TextInput, Text, Box } from '@mantine/core';
    import { useValidatedState } from '@mantine/hooks';
    
    function Demo() {
      const [{ value, lastValidValue, valid }, setEmail] = useValidatedState(
        '',
        (val) => /^\S+@\S+$/.test(val),
        true
      );
    
      return (
        <Box maw={320} mx="auto" style={{ overflowWrap: 'break-word' }}>
          <TextInput
            value={value}
            onChange={(event) => setEmail(event.currentTarget.value)}
            withAsterisk
            error={!valid}
            placeholder="email@example.com"
            label="Your email"
          />
    
          <Text size="sm" mt="md">
            <Text inherit c="dimmed" component="span">
              Current value:
            </Text>{' '}
            {value || '[empty string]'}
          </Text>
    
          <Text size="sm">
            <Text inherit c="dimmed" component="span">
              Last valid value:
            </Text>{' '}
            {lastValidValue || '[empty string]'}
          </Text>
        </Box>
      );
    }

[Definition](#definition)
-------------------------

    interface UseValidatedStateValue<T> {
      /** Current value */
      value: T;
    
      /** Last valid value */
      lastValidValue: T | undefined;
    
      /** True if the current value is valid, false otherwise */
      valid: boolean;
    }
    
    type UseValidatedStateReturnValue<T> = [
      /** Current value */
      UseValidatedStateValue<T>,
      /** Handler to update the state, passes `value` and `payload` to `onChange` */
      (value: T) => void,
    ];
    
    function useValidatedState<T>(
      initialValue: T,
      validate: (value: T) => boolean,
      initialValidationState?: boolean,
    ): UseValidatedStateReturnValue<T>

[Exported types](#exported-types)
---------------------------------

`UseValidatedStateValue` and `UseValidatedStateReturnValue` types are exported from `@mantine/hooks` package, you can import them in your application:

    import type { UseValidatedStateValue, UseValidatedStateReturnValue } from '@mantine/hooks';</content>
</page>

<page>
  <title>use-clipboard | Mantine</title>
  <url>https://mantine.dev/hooks/use-clipboard/</url>
  <content>[Usage](#usage)
---------------

`use-clipboard` hook provides a simple way to copy text to the clipboard, track the copied state, handle errors, and reset the state after a given timeout. It uses [navigator.clipboard.writeText](https://caniuse.com/mdn-api_clipboard_writetext) API under the hood.

[Limitations](#limitations)
---------------------------

Due to security reasons `use-clipboard` hook will not work in iframes and may not work with local files opened with `file://` protocol (hook will work fine with local websites that are using `http://` protocol). You can learn more about `navigator.clipboard` [here](https://web.dev/async-clipboard/).

[Definition](#definition)
-------------------------

[Exported types](#exported-types)
---------------------------------

`UseClipboardOptions` and `UseClipboardReturnValue` types are exported from `@mantine/hooks` package, you can import them in your application:</content>
</page>

<page>
  <title>use-document-title | Mantine</title>
  <url>https://mantine.dev/hooks/use-document-title/</url>
  <content>Sets document.title to given string

[Usage](#usage)
---------------

`use-document-title` sets `document.title` property with `React.useLayoutEffect` hook. `use-document-title` is not called during server side rendering. Use this hook with client only applications, for isomorphic use more advanced options (for example, [react-helmet](https://github.com/nfl/react-helmet)).

Call hook with a string that should be set as document title in any component. `use-document-title` triggers every time value changes and the value is not an empty string (trailing whitespace is trimmed) or `null`.

[Definition](#definition)
-------------------------</content>
</page>

<page>
  <title>use-document-visibility | Mantine</title>
  <url>https://mantine.dev/hooks/use-document-visibility/</url>
  <content>`use-document-visibility` hook returns current [document.visibilityState](https://developer.mozilla.org/en-US/docs/Web/API/Document/visibilityState) – it allows detecting if the current tab is active:

Switch to another tab to see document title change

    import { Text } from '@mantine/core';
    import { useDocumentTitle, useDocumentVisibility } from '@mantine/hooks';
    
    function Demo() {
      const documentState = useDocumentVisibility();
      useDocumentTitle(`Document is ${documentState}`);
      return <Text>Switch to another tab to see document title change</Text>;
    }</content>
</page>

<page>
  <title>use-favicon | Mantine</title>
  <url>https://mantine.dev/hooks/use-favicon/</url>
  <content>[Usage](#usage)
---------------

`use-favicon` appends `<link />` element to head component with given favicon in `useLayoutEffect`. The hook is not called during server side rendering.

Call hook with a favicon URL (supported formats: `.ico`, `.png`, `.svg` and `.gif`) that should be set as favicon. The hook is triggered every time the URL changes and the value is not an empty string (trailing whitespace is trimmed) or `null`.

    import { useState } from 'react';
    import { useFavicon } from '@mantine/hooks';
    import { Group, Button } from '@mantine/core';
    
    function Demo() {
      const [favicon, setFavicon] = useState('https://mantine.dev/favicon.svg');
      const setMantineFavicon = () => setFavicon('https://mantine.dev/favicon.svg');
      const setMantineUIFavicon = () => setFavicon('https://ui.mantine.dev/favicon.svg');
    
      useFavicon(favicon);
    
      return (
        <Group justify="center">
          <Button onClick={setMantineFavicon}>Mantine favicon</Button>
          <Button onClick={setMantineUIFavicon}>Mantine UI favicon</Button>
        </Group>
      );
    }

[Definition](#definition)
-------------------------

    function useFavicon(url: string): void;</content>
</page>

<page>
  <title>use-fetch | Mantine</title>
  <url>https://mantine.dev/hooks/use-fetch/</url>
  <content>    import { Box, Button, Code, Group, LoadingOverlay, Text } from '@mantine/core';
    import { useFetch } from '@mantine/hooks';
    
    interface Item {
      userId: number;
      id: number;
      title: string;
      completed: boolean;
    }
    
    function Demo() {
      const { data, loading, error, refetch, abort } = useFetch<Item[]>(
        'https://jsonplaceholder.typicode.com/todos/'
      );
    
      return (
        <div>
          {error && <Text c="red">{error.message}</Text>}
    
          <Group>
            <Button onClick={refetch} color="blue">
              Refetch
            </Button>
            <Button onClick={abort} color="red">
              Abort
            </Button>
          </Group>
          <Box pos="relative" mt="md">
            <Code block>{data ? JSON.stringify(data.slice(0, 3), null, 2) : 'Fetching'}</Code>
            <LoadingOverlay visible={loading} />
          </Box>
        </div>
      );
    }</content>
</page>

<page>
  <title>use-hash | Mantine</title>
  <url>https://mantine.dev/hooks/use-hash/</url>
  <content>[Usage](#usage)
---------------

`use-hash` returns hash from URL, subscribes to its changes with [hashchange event](https://developer.mozilla.org/en-US/docs/Web/API/Window/hashchange_event) and allows changing it with `setHash` function:

[Initial state value](#initial-state-value)
-------------------------------------------

By default, `use-hash` will retrieve value in `useEffect`. If you want to get initial value as soon as hook is called, set `getInitialValueInEffect` to `false`. Note that this option is not compatible with server side rendering – you can only use it if your app is client-side only.

[Definition](#definition)
-------------------------

[Exported types](#exported-types)
---------------------------------

`UseHashOptions` and `UseHashReturnValue` types are exported from `@mantine/hooks` package, you can import them in your application:</content>
</page>

<page>
  <title>use-headroom | Mantine</title>
  <url>https://mantine.dev/hooks/use-headroom/</url>
  <content>Create headers that are hidden after user scrolls past given distance

[Usage](#usage)
---------------

Use `use-headroom` hook to create headers that are hidden after user scrolls past the given distance in px. The hook returns a boolean value that determines whether the element should be pinned or hidden. Hook returns `true` when the current scroll position is less than the specified `fixedAt` value and after user scrolled up.

[Definition](#definition)
-------------------------

[Exported types](#exported-types)
---------------------------------

`UseHeadroomOptions` type is exported from `@mantine/hooks` package, you can import it in your application:</content>
</page>

<page>
  <title>use-idle | Mantine</title>
  <url>https://mantine.dev/hooks/use-idle/</url>
  <content>[Usage](#usage)
---------------

`use-idle` detects if user does nothing for a given time in ms:

[Custom events](#custom-events)
-------------------------------

By default, the hook will listen to `keypress`, `mousemove`, `touchmove`, `wheel`, `click` and `scroll` events to set idle status. To change that, provide a list of events in the `options` argument:

[Initial state](#initial-state)
-------------------------------

By default, the hook will return an idle state. To change that, provide an initial state value in the `options` argument:

### [Definition](#definition)

[Exported types](#exported-types)
---------------------------------

`UseIdleOptions` type is exported from `@mantine/hooks` package, you can import it in your application:</content>
</page>

<page>
  <title>use-interval | Mantine</title>
  <url>https://mantine.dev/hooks/use-interval/</url>
  <content>[Usage](#usage)
---------------

Page loaded **0** seconds ago

[Auto invoke interval](#auto-invoke-interval)
---------------------------------------------

To automatically start interval when component is mounted, set `autoInvoke` option to `true`:

[API](#api)
-----------

Arguments:

*   `fn` – function that is called at each interval tick
*   `interval` – amount of milliseconds between each tick

Return object:

*   `start` – start interval
*   `stop` – stop interval
*   `toggle` – toggle interval
*   `active` – current interval status

[Definition](#definition)
-------------------------

[Exported types](#exported-types)
---------------------------------

`UseIntervalOptions` and `UseIntervalReturnValue` types are exported from `@mantine/hooks` package, you can import them in your application:</content>
</page>

<page>
  <title>use-merged-ref | Mantine</title>
  <url>https://mantine.dev/hooks/use-merged-ref/</url>
  <content>[Usage](#usage)
---------------

`use-merged-ref` accepts any number of refs and returns a function that should be passed to the `ref` prop. Use this hook when you need to use more than one ref on a single dom node, for example, when you want to use [use-click-outside](https://mantine.dev/hooks/use-click-outside/) and [use-focus-trap](https://mantine.dev/hooks/use-focus-trap/) hooks and also get a ref for yourself:

[mergeRefs function](#mergerefs-function)
-----------------------------------------

`use-merged-ref` hooks memoizes refs with `useCallback` hook, but in some cases memoizing is not a valid strategy, for example, when you are working with a list of dynamic components React will complain that different number of hooks was called across two renders. To fix that issue, use `mergeRefs` function instead:

`mergeRefs` works the same way as `use-merged-ref`, but does not use hooks internally. Use it only when you cannot use `use-merged-ref`. Note that `mergeRefs` will not work correctly with [use-focus-trap](https://mantine.dev/hooks/use-focus-trap/) hook, you are required to use `use-merged-ref` with it.

[assignRef function](#assignref-function)
-----------------------------------------

`assignRef` function can be used to assign refs that are not memoized with `useCallback`. It is usually used to assign refs that do not reference elements:

[Set node type](#set-node-type)
-------------------------------

[Definition](#definition)
-------------------------</content>
</page>

<page>
  <title>use-os | Mantine</title>
  <url>https://mantine.dev/hooks/use-os/</url>
  <content>[Usage](#usage)
---------------

`use-os` returns user's os. Possible values are: `undetermined`, `macos`, `ios`, `windows`, `android`, `linux`, `chromeos`. If the OS cannot be identified, for example, during server side rendering `undetermined` will be returned.

    import { useOs } from '@mantine/hooks';
    
    function Demo() {
      const os = useOs();
      return <>Your os is <b>{os}</b></>;
    }

[Definition](#definition)
-------------------------

    type UseOSReturnValue =
      | 'undetermined'
      | 'macos'
      | 'ios'
      | 'windows'
      | 'android'
      | 'linux'
      | 'chromeos';
    
    interface UseOsOptions {
      getValueInEffect: boolean;
    }
    
    function getOS(options?: UseOsOptions): UseOSReturnValue;

[Exported types](#exported-types)
---------------------------------

`UseOsOptions` and `UseOSReturnValue` types are exported from `@mantine/hooks` package, you can import them in your application:

    import type { UseOsOptions, UseOSReturnValue } from '@mantine/hooks';</content>
</page>

<page>
  <title>use-page-leave | Mantine</title>
  <url>https://mantine.dev/hooks/use-page-leave/</url>
  <content>Mouse left the page 0 times

    import { useState } from 'react';
    import { usePageLeave } from '@mantine/hooks';
    
    function Demo() {
      const [leftsCount, setLeftsCount] = useState(0);
      usePageLeave(() => setLeftsCount((p) => p + 1));
      return <>Mouse left the page {leftsCount} times</>;
    }</content>
</page>

<page>
  <title>use-network | Mantine</title>
  <url>https://mantine.dev/hooks/use-network/</url>
  <content>[Usage](#usage)
---------------

`use-network` hook returns an object with current connection status:

| Property | Value |
| --- | --- |
| Online | 
Online

 |
| rtt |  |
| downlink |  |
| effectiveType |  |
| saveData | 

false

 |

    import { Text, Table } from '@mantine/core';
    import { useNetwork } from '@mantine/hooks';
    
    function Demo() {
      const networkStatus = useNetwork();
    
      return (
        <Table maw={300} layout="fixed" mx="auto">
          <Table.Thead>
            <Table.Tr>
              <Table.Th>Property</Table.Th>
              <Table.Th>Value</Table.Th>
            </Table.Tr>
          </Table.Thead>
    
          <Table.Tbody>
            <Table.Tr>
              <Table.Td>Online</Table.Td>
              <Table.Td>
                <Text size="sm" c={networkStatus.online ? 'teal.6' : 'red.6'}>
                  {networkStatus.online ? 'Online' : 'Offline'}
                </Text>
              </Table.Td>
            </Table.Tr>
    
            <Table.Tr>
              <Table.Td>rtt</Table.Td>
              <Table.Td>{networkStatus.rtt}</Table.Td>
            </Table.Tr>
    
            <Table.Tr>
              <Table.Td>downlink</Table.Td>
              <Table.Td>{networkStatus.downlink}</Table.Td>
            </Table.Tr>
    
            <Table.Tr>
              <Table.Td>effectiveType</Table.Td>
              <Table.Td>{networkStatus.effectiveType}</Table.Td>
            </Table.Tr>
    
            <Table.Tr>
              <Table.Td>saveData</Table.Td>
              <Table.Td>
                <Text size="sm" c={networkStatus.saveData ? 'teal.6' : 'red.6'}>
                  {networkStatus.saveData ? 'true' : 'false'}
                </Text>
              </Table.Td>
            </Table.Tr>
          </Table.Tbody>
        </Table>
      );
    }

[Browser support](#browser-support)
-----------------------------------

`use-network` uses experimental `navigator.connection`, see [browser compatibility table](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/connection#browser_compatibility).

[Definition](#definition)
-------------------------

    interface UserNetworkReturnValue {
      online: boolean;
      downlink?: number;
      downlinkMax?: number;
      effectiveType?: 'slow-2g' | '2g' | '3g' | '4g';
      rtt?: number;
      saveData?: boolean;
      type?: 'bluetooth' | 'cellular' | 'ethernet' | 'wifi' | 'wimax' | 'none' | 'other' | 'unknown';
    }
    
    function useNetwork(): UserNetworkReturnValue;

[Exported types](#exported-types)
---------------------------------

`UserNetworkReturnValue` type is exported from `@mantine/hooks` package, you can import it in your application:

    import type { UserNetworkReturnValue } from '@mantine/hooks';</content>
</page>

<page>
  <title>use-text-selection | Mantine</title>
  <url>https://mantine.dev/hooks/use-text-selection/</url>
  <content>[Usage](#usage)
---------------

`use-text-selection` returns current text selection:

Select some text here or anywhere on the page and it will be displayed below

Selected text:

    import { useTextSelection } from '@mantine/hooks';
    
    function Demo() {
      const selection = useTextSelection();
      return (
        <>
          <div>Select some text here or anywhere on the page and it will be displayed below</div>
          <div>Selected text: {selection?.toString()}</div>
        </>
      );
    }

[Definition](#definition)
-------------------------

    function useTextSelection(): Selection | null;

[

use-page-leave

](https://mantine.dev/hooks/use-page-leave/)[

use-timeout

](https://mantine.dev/hooks/use-timeout/)</content>
</page>

<page>
  <title>use-did-update | Mantine</title>
  <url>https://mantine.dev/hooks/use-did-update/</url>
  <content>[Usage](#usage)
---------------

`use-did-update` hook works the same way as `useEffect` but it is not called when component is mounted:

    import { useDidUpdate } from '@mantine/hooks';
    
    function Demo() {
      useDidUpdate(
        () => console.log("Will not be called when mounted"),
        [dependency1, dependency2]
      );
    }

[Definition](#definition)
-------------------------

    function useDidUpdate(fn: React.EffectCallback, dependencies?: any[]): void;

[

use-timeout

](https://mantine.dev/hooks/use-timeout/)[

use-force-update

](https://mantine.dev/hooks/use-force-update/)</content>
</page>

<page>
  <title>use-timeout | Mantine</title>
  <url>https://mantine.dev/hooks/use-timeout/</url>
  <content>[Usage](#usage)
---------------

[API](#api)
-----------

Arguments:

*   `callback` – function that will be called after the timer elapses
*   `delay` – number of milliseconds the timer should wait before the specified function is executed
*   `options: { autoInvoke }` - determines whether the timer should be started on mount, defaults to false

Return object:

*   `start` - starts the timer
*   `clear` – cancels the timer

[Definition](#definition)
-------------------------

[Exported types](#exported-types)
---------------------------------

`UseTimeoutOptions` and `UseTimeoutReturnValue` types are exported from `@mantine/hooks` package, you can import them in your application:</content>
</page>

<page>
  <title>use-force-update | Mantine</title>
  <url>https://mantine.dev/hooks/use-force-update/</url>
  <content>[Usage](#usage)
---------------

`use-force-update` returns a function, which when called rerenders the component:

mantine-y03421dg9

    import { Button, Text, Group } from '@mantine/core';
    import { useForceUpdate, randomId } from '@mantine/hooks';
    
    function Demo() {
      const forceUpdate = useForceUpdate();
    
      return (
        <Group justify="center">
          <Text>{randomId()}</Text>
          <Button onClick={forceUpdate}>Force update</Button>
        </Group>
      );
    }

[Definition](#definition)
-------------------------

    function useForceUpdate(): () => void;

[

use-did-update

](https://mantine.dev/hooks/use-did-update/)[

use-is-first-render

](https://mantine.dev/hooks/use-is-first-render/)</content>
</page>

<page>
  <title>use-isomorphic-effect | Mantine</title>
  <url>https://mantine.dev/hooks/use-isomorphic-effect/</url>
  <content>[Usage](#usage)
---------------

`use-isomorphic-effect` is a replacement for `useLayoutEffect` hook that works in both browser and server environments.

    import { useIsomorphicEffect } from '@mantine/hooks';
    
    function Demo() {
      useIsomorphicEffect(() => {
        document.title = 'title';
      });
    
      return null;
    }

[

use-is-first-render

](https://mantine.dev/hooks/use-is-first-render/)[

use-logger

](https://mantine.dev/hooks/use-logger/)</content>
</page>

<page>
  <title>use-is-first-render | Mantine</title>
  <url>https://mantine.dev/hooks/use-is-first-render/</url>
  <content>[Usage](#usage)
---------------

`useIsFirstRender` returns true if the component is being rendered for the first time, otherwise it returns false.

    import { useState } from 'react';
    import { Button, Text } from '@mantine/core';
    import { useIsFirstRender } from '@mantine/hooks';
    
    function Demo() {
      const [counter, setCounter] = useState(0);
      const firstRender = useIsFirstRender();
      return (
        <div>
          <Text>
            Is first render:{' '}
            <Text span c={firstRender ? 'teal' : 'red'}>
              {firstRender ? 'Yes' : 'No!'}
            </Text>
          </Text>
          <Button onClick={() => setCounter((c) => c + 1)} mt="sm">
            Rerendered {counter} times, click to rerender
          </Button>
        </div>
      );
    }

[Definition](#definition)
-------------------------

    function useIsFirstRender(): boolean;</content>
</page>

<page>
  <title>use-logger | Mantine</title>
  <url>https://mantine.dev/hooks/use-logger/</url>
  <content>[Usage](#usage)
---------------

`use-logger` logs given values to the console each time component renders. Open devtools to see state changes in console:

    import { useState } from 'react';
    import { useLogger } from '@mantine/hooks';
    import { Button } from '@mantine/core';
    
    function Demo() {
      const [count, setCount] = useState(0);
      useLogger('Demo', [{ count, hello: 'world' }]);
      return <Button onClick={() => setCount((c) => c + 1)}>Update state ({count})</Button>;
    }

[Definition](#definition)
-------------------------

    function useLogger(componentName: string, props: any[]): any;</content>
</page>

<page>
  <title>use-mounted | Mantine</title>
  <url>https://mantine.dev/hooks/use-mounted/</url>
  <content>[Usage](#usage)
---------------

`useMounted` hook returns `true` if component is mounted and `false` if it's not.

    import { useMounted } from '@mantine/hooks';
    
    function Demo() {
      const mounted = useMounted();
      return (
        <div>
          {mounted ? 'Component is mounted' : 'Component is not mounted'}
        </div>
      );
    }

[Definition](#definition)
-------------------------

    function useMounted(): boolean;

[

use-logger

](https://mantine.dev/hooks/use-logger/)[

use-shallow-effect

](https://mantine.dev/hooks/use-shallow-effect/)</content>
</page>

<page>
  <title>use-shallow-effect | Mantine</title>
  <url>https://mantine.dev/hooks/use-shallow-effect/</url>
  <content>[Usage](#usage)
---------------

`use-shallow-effect` works exactly like `useEffect`, but performs shallow dependencies comparison instead of referential comparison:

    import { useEffect } from 'react';
    import { useShallowEffect } from '@mantine/hooks';
    
    // Will be called on each render
    useEffect(() => {}, [{ a: 1 }]);
    
    // Will be called only once
    useShallowEffect(() => {}, [{ a: 1 }]);

Hook works with primitive values, arrays and objects:

    import { useShallowEffect } from '@mantine/hooks';
    
    // Primitive values are handled like in useEffect
    useShallowEffect(() => {}, [1, 2, 3]);
    
    // Arrays with primitive values will not trigger callback
    useShallowEffect(() => {}, [[1], [2], [3]]);
    
    // Objects with primitive values will not trigger callback
    useShallowEffect(() => {}, [{ a: 1 }, { b: 2 }]);
    
    // Arrays with objects will trigger callback since values are not shallow equal
    useShallowEffect(() => {}, [[{ a: 1 }], [{ b: 2 }]]);

[Definition](#definition)
-------------------------

    function useShallowEffect(
      cb: () => void,
      dependencies?: React.DependencyList
    ): void;</content>
</page>

<page>
  <title>Unstyled / headless | Mantine</title>
  <url>https://mantine.dev/styles/unstyled/</url>
  <content>Unstyled components
-------------------

[Using Mantine as a headless UI library](#using-mantine-as-a-headless-ui-library)
---------------------------------------------------------------------------------

You can use Mantine as a headless UI library. To do that, simply do not import `@mantine/*/styles.css` in your application. Then you will be able to apply styles to Mantine components using [Styles API](https://mantine.dev/styles/styles-api/) with a styling solution of your choice.

[HeadlessMantineProvider](#headlessmantineprovider)
---------------------------------------------------

`HeadlessMantineProvider` is an alternative to [MantineProvider](https://mantine.dev/theming/mantine-provider/) that should be used when you want to use Mantine as a headless UI library. It removes all features that are related to Mantine styles:

*   Mantine classes are not applied to components
*   Inline CSS variables are not added with `style` attribute
*   All color scheme related features are removed
*   Global styles are not generated

Limitations of `HeadlessMantineProvider`:

*   [Color scheme switching](https://mantine.dev/theming/color-schemes/) will not work. If your application has a dark mode, you will need to implement it on your side.
*   Props that are related to styles in all components (`color`, `radius`, `size`, etc.) will have no effect.
*   Some components that rely on styles will become unusable ([Grid](https://mantine.dev/core/grid/), [SimpleGrid](https://mantine.dev/core/simple-grid/), [Container](https://mantine.dev/core/container/), etc.).
*   `lightHidden`/`darkHidden`, `visibleFrom`/`hiddenFrom` props will not work.
*   [Style props](https://mantine.dev/styles/style-props/) will work only with explicit values, for example `mt="xs"` will not work, but `mt={5}` will.

To use `HeadlessMantineProvider`, follow [getting started guide](https://mantine.dev/getting-started/) and replace `MantineProvider` with `HeadlessMantineProvider`. Note that you do not need to use [ColorSchemeScript](https://mantine.dev/theming/color-schemes/#colorschemescript) in your application, it will not have any effect, you can ignore this part of the guide.

[unstyled prop](#unstyled-prop)
-------------------------------

Most of Mantine components support `unstyled` prop that removes library styles from the component and allows you to style it from scratch. Note that `unstyled` prop is not supported by compound components (`Tabs.Tab`, `Menu.Dropdown`, `Accordion.Control`, etc.) – it only works on root component (`Tabs`, `Menu`, `Accordion`, etc.).

Unstyled [Tabs](https://mantine.dev/core/tabs/) component:

> **Choosing between unstyled prop and headless components**
> 
> `unstyled` prop is useful when you want to remove library styles from a single component, but keep styles for other components. For example, if [Tabs](https://mantine.dev/core/tabs/) component does not meet your design system requirements, but all other components do, you can use `unstyled` prop to remove styles from Tabs and style it from scratch, while keeping all other components styled with Mantine styles.
> 
> Note that `unstyled` prop does not remove Mantine library styles from your `.css` bundle – it only does not apply them to component with `unstyled` prop.</content>
</page>

<page>
  <title>Browser support | Mantine</title>
  <url>https://mantine.dev/browser-support/</url>
  <content>Mantine is tested on real devices in the following browsers before each minor and major release: Chrome, Safari, Firefox, Edge, Safari for iOS, Chrome for Android. Testing in other browsers is not performed.

[Supported browsers](#supported-browsers)
-----------------------------------------

All Mantine components and hooks were tested to work in the following browsers:

*   Chromium browsers 108+ – Chrome, Edge, Chrome for Android, etc.
*   Firefox 101+
*   Safari 15.4+
*   IE (any version) is not supported

Browsers version that support [:where selector](https://caniuse.com/mdn-css_selectors_where) and [@layer directive](https://caniuse.com/mdn-css_at-rules_layer) features that are required for Mantine styles (any versions below may have major issues with styles):

*   Chromium browsers 99+ – Chrome, Edge, Chrome for Android, etc.
*   Firefox 97+
*   Safari 15.4+

[CSS features that contribute to browser support](#css-features-that-contribute-to-browser-support)
---------------------------------------------------------------------------------------------------

Mantine components use the following CSS features:

*   [:where selector](https://caniuse.com/mdn-css_selectors_where) in all components
*   [@layer directive](https://caniuse.com/mdn-css_at-rules_layer) in all styles
*   [:has pseudo-class](https://caniuse.com/css-has) in several components for non-critical styles
*   [flexbox gap](https://caniuse.com/flexbox-gap) in most components
*   [dvh units](https://caniuse.com/mdn-css_types_length_viewport_percentage_units_dynamic) in several components
*   [color-mix](https://caniuse.com/mdn-css_types_color_color-mix) function is not used in any components by default, but can be used on your side with [alpha](https://mantine.dev/styles/postcss-preset/#alpha-function) PostCSS function.
*   [aspect-ratio](https://caniuse.com/mdn-css_properties_aspect-ratio) CSS property is used in several components
*   [container queries](https://caniuse.com/css-container-queries) are used in several components if the option is explicitly enabled via prop

All CSS features listed above are supported in all modern browsers (90% or more of global usage as of January 2024).

If you need to support older browsers, you should:

*   check the component `Browser support` section before usage and decide whether this component will work for your case
*   install corresponding polyfills that are required for hook/component to work in older browsers
*   check that component works in those browsers on your side (we do not test Mantine in browsers that are older than those that are listed above)

[Polyfills](#polyfills)
-----------------------

Mantine does not include any polyfills by default, you should install them manually if you need to support older browsers. Usually, polyfills are automatically added to the project by your framework bundler (webpack, vite, etc.) based on the browserslist configuration.</content>
</page>

<page>
  <title>About Mantine | Mantine</title>
  <url>https://mantine.dev/about/</url>
  <content>Mantine is a React components library focused on providing great user and developer experience. Mantine development was started in January 2021 and the 1.0 version was released on [May 3rd, 2021](https://github.com/mantinedev/mantine/releases/tag/1.0.0), and since then, [more than 200 releases have been published](https://github.com/mantinedev/mantine/releases).

[Releases cycle](#releases-cycle)
---------------------------------

All `@mantine/*` packages follow [semver](https://semver.org/):

*   Patches (1.0.X) are usually released every one or two weeks
*   Minor versions (1.X.0) are usually released once every 1-2 months
*   Major versions (X.0.0) are released when breaking changes are required, usually a new major version is released once every 1-2 years

[Previous versions documentation](#previous-versions-documentation)
-------------------------------------------------------------------

*   [v1.mantine.dev](https://v1.mantine.dev/)
*   [v2.mantine.dev](https://v2.mantine.dev/)
*   [v3.mantine.dev](https://v3.mantine.dev/)
*   [v4.mantine.dev](https://v4.mantine.dev/)
*   [v5.mantine.dev](https://v5.mantine.dev/)
*   [v6.mantine.dev](https://v6.mantine.dev/)
*   [v7.mantine.dev](https://v7.mantine.dev/)

[Project maintenance](#project-maintenance)
-------------------------------------------

Mantine is built and maintained by [Vitaly Rtishchev](https://github.com/rtivital) and [more than 500 other contributors](https://github.com/mantinedev/mantine/graphs/contributors). Most of new features and components/hooks are added to the library based on feedback from the community – you can participate in new features discussions on [GitHub](https://github.com/mantinedev/mantine/discussions) or [Discord](https://discord.gg/wbH82zuWMN).

[Stats](#stats)
---------------

Stats are counted automatically each time new version is published:

*   125 components (all `@mantine/*` packages)
*   73 hooks (`@mantine/hooks` package)
*   299 documentation pages
*   1203 demos

[Mantine logo](#mantine-logo)
-----------------------------

Download Mantine logos in `.svg` format:

You can also install `@mantinex/mantine-logo` package and import `MantineLogo` component. Note that the package depends on `@mantine/core` and `@mantine/hooks` packages.</content>
</page>

<page>
  <title>Support | Mantine</title>
  <url>https://mantine.dev/support/</url>
  <content>This guide will help you understand how to get help, report bugs and connect with the community. Keep in mind that Mantine is maintained by a small team of developers, all Mantine projects are open-source and free for everyone.

[Get help](#get-help)
---------------------

If you have any questions, need help with Mantine, want to request a feature, or just want to chat with other developers, you can:

*   Join [Mantine Discord server](https://discord.gg/wbH82zuWMN)
*   Ask questions using [GitHub discussion](https://github.com/orgs/mantinedev/discussions)
*   Visit [Help Center](https://help.mantine.dev/) to browse FAQ and guides

[Report an issue](#report-an-issue)
-----------------------------------

We use GitHub issues to track bugs. You can find a list of current open issues on [this page](https://github.com/mantinedev/mantine/issues). Usually, it takes up to 3 weeks to review and fix the issue. Issues reported on GitHub are fixed only in patch releases (8.0.x) – minor and major releases are reserved for new features and breaking changes.

If you found a bug and want to report it, please follow these steps:

1.  Search for similar issues on GitHub, maybe someone has already reported it.
2.  Make sure that you are using the latest version of Mantine, the issue might have been already fixed.
3.  If you did not find similar issues, [create a new one](https://github.com/mantinedev/mantine/issues/new/choose), make sure to use one of the provided templates and provide as much information as possible, including a [minimal reproduction example](https://stackoverflow.com/help/minimal-reproducible-example).
4.  Wait for the issue to be reviewed and fixed.

[Get help on GitHub Discussions](#get-help-on-github-discussions)
-----------------------------------------------------------------

[GitHub discussion](https://github.com/orgs/mantinedev/discussions) are used for questions, feature requests, feedback, showcase and discussions. If clearly stated, questions are usually answered within 24 hours. To get help on GitHub Discussions:

1.  Before creating a new discussion, search for similar topics on [GitHub](https://github.com/orgs/mantinedev/discussions) and [Help Center](https://help.mantine.dev/).
2.  If you did not find similar topics, [create a new discussion](https://github.com/orgs/mantinedev/discussions).
3.  Wait for the discussion to be reviewed and answered.
4.  If the provided answer solves your issue, mark it as a solution.

[Support Mantine](#support-mantine)
-----------------------------------

All contributions to the projects are welcome and appreciated. There are many ways to support the project:

*   Share your feedback in [GitHub Discussions](https://github.com/mantinedev/mantine/discussions/categories/feedback) – we are always happy to hear your thoughts on how to improve Mantine. Most of the new features and components are based on the feedback received from the community.
*   Help others on [Discord](https://discord.gg/wbH82zuWMN) and/or [GitHub Discussions](https://github.com/mantinedev/mantine/discussions). There are usually 10-20 new questions every day, you can help people with their issues and questions. While helping others, you will learn yourself and become more proficient with React and Mantine.
*   Give us a code review. You are welcome to explore the [source code](https://github.com/mantinedev/mantine) of `@mantine/*` packages and provide your feedback on how it can be improved. We are always open to new ideas and suggestions.
*   Send us some [kind words](https://github.com/mantinedev/mantine/discussions/categories/kind-words). We usually receive only bug reports and feature requests, it is always nice to hear that people enjoy working with Mantine.
*   Star the project on [GitHub](https://github.com/mantinedev/mantine). It is a small thing that helps us grow and get more people interested in the project.
*   [Contribute](https://mantine.dev/contribute/) to the Mantine codebase. We welcome all kinds of contributions: if you do not have much experience with React/TypeScript, you can help us improve the documentation to make it more clear and understandable for new developers. If you are an experienced React developer, you can help us with open [issues](https://github.com/mantinedev/mantine/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22).
*   If you are using Mantine at work and your company wants to support the project, you can allocate some time of your engineers to contribute to Mantine.</content>
</page>

<page>
  <title>Usage with Storybook | Mantine</title>
  <url>https://mantine.dev/guides/storybook/</url>
  <content>Setup Mantine in Storybook
--------------------------

Note that this guide covers only Storybook 7.0+ integration. If you are using older version of Storybook, it will not work for you.

[Add Storybook to your application](#add-storybook-to-your-application)
-----------------------------------------------------------------------

If you already have Storybook in your application, you can skip this step.

Follow [Storybook getting started](https://storybook.js.org/docs/react/get-started/install/) guide to add Storybook to your application:

[Configure addons](#configure-addons)
-------------------------------------

Note that `@storybook/addon-styling-webpack` is required only if you are not using Vite. **If you are using Vite, do not install `@storybook/addon-styling-webpack` and do not add it to the addons section in `main.ts` file**.

Install Storybook addons:

*   [storybook-dark-mode](https://storybook.js.org/addons/storybook-dark-mode/)
*   [@storybook/addon-styling-webpack](https://storybook.js.org/addons/@storybook/addon-styling-webpack)

Add addons to `.storybook/main.ts`:

[Theme object](#theme-object)
-----------------------------

To shared [theme object](https://mantine.dev/theming/theme-object/) between your application and Storybook, create `src/theme.ts` (or any other path in your application) file with your theme override:

Then you will be able to use the same theme both in your application and Storybook:

[Storybook preview](#storybook-preview)
---------------------------------------

If `.storybook/preview.tsx` file does not exist, create it and add the following content:

All set! Start Storybook:</content>
</page>

<page>
  <title>Usage with TypeScript | Mantine</title>
  <url>https://mantine.dev/guides/typescript/</url>
  <content>All `@mantine/*` packages are fully compatible with TypeScript. All examples in the documentation are written in TypeScript – you can copy-paste them to your project without any changes.

This guide will help you get familiar with types that `@mantine/core` package exports.

[Components props types](#components-props-types)
-------------------------------------------------

Each `@mantine/` package that exports components, exports props types for these components as well. You can import component props types by adding `Props` to the component name, for example, you can import Button and DatePicker components props like so:

Note that there are two variations of props types: for polymorphic components and for regular components. Regular components props types include `React.ComponentPropsWithoutRef<'X'>`, where `X` is the root element type, for example `'div'`.

Example of extending regular component props:

[Polymorphic components](https://mantine.dev/guides/polymorphic/) props types do not include `React.ComponentPropsWithoutRef<'X'>` because their root element depends on the `component` prop value.

Example of extending [polymorphic components](https://mantine.dev/guides/polymorphic/) props:

[ElementProps type](#elementprops-type)
---------------------------------------

`ElementProps` is a utility type similar to `React.ComponentPropsWithoutRef`, but with additional features. It replaces native elements `style` prop with Mantine [style prop](https://mantine.dev/styles/style/) and allows omitting properties that are passed as a second type.

[MantineTheme type](#mantinetheme-type)
---------------------------------------

`MantineTheme` is a type of [theme object](https://mantine.dev/theming/theme-object/). You can use it to add types to functions that accept theme object as an argument:

[MantineThemeOverride type](#mantinethemeoverride-type)
-------------------------------------------------------

`MantineThemeOverride` type is a deep partial of `MantineTheme`. It can be used in functions that accept theme override as an argument:

[MantineColorScheme type](#mantinecolorscheme-type)
---------------------------------------------------

`MantineColorScheme` is a union of `'light' | 'dark' | 'auto'` values. You can use to add types to function that accept color scheme as an argument:

[MantineSize type](#mantinesize-type)
-------------------------------------

`MantineSize` type is a union of `'xs' | 'sm' | 'md' | 'lg' | 'xl'` values. You can use to add types to various props that accept size as an argument, for example, `radius`, `shadow`, `p`.

[Theme object declarations](#theme-object-declarations)
-------------------------------------------------------

You can change `theme.other` and `theme.colors` types by extending `MantineTheme` interface in `.d.ts` file. Create `mantine.d.ts` anywhere in your project (must be included in `tsconfig.json`) to extend theme object types.

To override `theme.other`:

To override `theme.colors`:

You can also customize size related types for `theme.spacing`, `theme.radius`, `theme.breakpoints`, `theme.fontSizes`, `theme.lineHeights`, and `theme.shadows` similarly.

To override `theme.spacing` and `theme.radius`

Note that extending theme type is not required, it is only needed if you want to make your theme object types more strict and add autocomplete in your editor.

[Custom variants types](#custom-variants-types)
-----------------------------------------------

You can define types for custom [variants](https://mantine.dev/styles/variants-sizes/) by extending `{x}Props` interface with the new variant type in your `mantine.d.ts` file.

Example of adding custom variant type to [Button](https://mantine.dev/core/button/) component:</content>
</page>

<page>
  <title>Usage with JavaScript | Mantine</title>
  <url>https://mantine.dev/guides/javascript/</url>
  <content>[Is it possible to use Mantine with JavaScript?](#is-it-possible-to-use-mantine-with-javascript)
------------------------------------------------------------------------------------------------

Yes, it is possible to use all `@mantine/*` packages (as well as all other npm packages) with JavaScript. `@mantine/*` packages are written in TypeScript and have type definitions, so you will get some the benefits of TypeScript (like autocompletion in your IDE) when using them with JavaScript.

[Transforming demos code to JavaScript](#transforming-demos-code-to-javascript)
-------------------------------------------------------------------------------

All demos in Mantine documentation are written in TypeScript. In most cases there is no difference between TypeScript and JavaScript code – you do not have to do anything.

To transform TypeScript code to JavaScript you can use [TypeScript playground](https://www.typescriptlang.org/play?jsx=1&preserveValueImports=false#code/Q) – paste demo code into the playground and all types will be removed. Note that you will also need to remove type imports from the code.

Example of transformed code:

[Should Mantine be used with JavaScript?](#should-mantine-be-used-with-javascript)
----------------------------------------------------------------------------------

It is recommended to use Mantine with TypeScript, it does not require deep knowledge of TypeScript and will make your code more robust and easier to maintain. For example, you will get type errors when you pass invalid props to components or when you use non-existing props. TypeScript will also help you during migration to new versions of Mantine – you will get type errors when props/components that you have in your code are removed/renamed/changed.

If you are not familiar with TypeScript yet, using Mantine with TypeScript will be a great opportunity to learn it. You can use any of [templates](https://mantine.dev/getting-started/) to get started – all of them include TypeScript support out of the box.</content>
</page>

<page>
  <title>Testing with Jest | Mantine</title>
  <url>https://mantine.dev/guides/jest/</url>
  <content>This guide will help you setup [Jest](https://jestjs.io/) and [React Testing Library](https://testing-library.com/docs/react-testing-library/intro) for your project. Note that this guide only covers shared logic that can be applied to any framework, and it does not cover initial setup of [Jest](https://jestjs.io/) and [React Testing Library](https://testing-library.com/docs/react-testing-library/intro) as it may vary depending on the framework you are using.

[Custom render](#custom-render)
-------------------------------

All Mantine components require [MantineProvider](https://mantine.dev/theming/mantine-provider/) to be present in the component tree. To add [MantineProvider](https://mantine.dev/theming/mantine-provider/) to the component tree in your tests, create a [custom render](https://testing-library.com/docs/react-testing-library/setup/#custom-render) function:

It is usually more convenient to export all `@testing-library/*` functions that you are planning to use from `./testing-utils/index.ts` file:

Then you should import all testing utilities from `./testing-utils` instead of `@testing-library/react`:

[Mock WEB APIs](#mock-web-apis)
-------------------------------

Most of Mantine components depend on browser APIs like `window.matchMedia` or `ResizeObserver`. These APIs are not available in `jest-environment-jsdom` environment and you will need to mock them in your tests.

Create `jest.setup.js` file in your project root and add the following code to it:

Then add it as a setup file in your `jest.config.js`:

[Framework specific setup](#framework-specific-setup)
-----------------------------------------------------

Jest setup for different frameworks may vary and usually change over time. To learn how to setup Jest for your framework, either check [Jest](https://jestjs.io/docs/getting-started) and [React Testing Library](https://testing-library.com/docs/react-testing-library/intro) documentation or check one of the premade [templates](https://mantine.dev/getting-started/). Most of the templates include Jest setup, and you can use them as a reference.

[Testing examples](#testing-examples)
-------------------------------------

You can find testing examples in Mantine Help Center:

*   [How can I test Modal/Drawer/Popover components?](https://help.mantine.dev/q/portals-testing)
*   [How can I test Select/MultiSelect components?](https://help.mantine.dev/q/combobox-testing)</content>
</page>

<page>
  <title>Testing with Vitest | Mantine</title>
  <url>https://mantine.dev/guides/vitest/</url>
  <content>This guide will help you setup [Vitest](https://vitest.dev/) and [React Testing Library](https://testing-library.com/docs/react-testing-library/intro) for your project. Note that this guide intended for projects that use [Vite](https://vitejs.dev/) as a bundler, if you are using other frameworks/bundlers, it is recommended to use [Jest](https://mantine.dev/guides/jest/) instead.

[Installation](#installation)
-----------------------------

Install vitest and react testing library:

If you want to run tests from your IDE, install one of the [extensions](https://vitest.dev/guide/ide).

[Configuration](#configuration)
-------------------------------

Add vitest configuration to your Vite config file:

Then create `vitest.setup.mjs` file in your project root and add the following code to it:

The code above mocks `window.matchMedia` and `ResizeObserver` APIs that are not available in `jsdom` environment but are required by some Mantine components.

Optionally you can add vitest scripts to your `package.json`:

[Custom render](#custom-render)
-------------------------------

All Mantine components require [MantineProvider](https://mantine.dev/theming/mantine-provider/) to be present in the component tree. To add [MantineProvider](https://mantine.dev/theming/mantine-provider/) to the component tree in your tests, create a [custom render](https://testing-library.com/docs/react-testing-library/setup/#custom-render) function:

It is usually more convenient to export all `@testing-library/*` functions that you are planning to use from `./testing-utils/index.ts` file:

Then you should import all testing utilities from `./testing-utils` instead of `@testing-library/react`:

[Example of a full setup](#example-of-a-full-setup)
---------------------------------------------------

You can find an example with a full Vitest setup in [mantine-vite-template](https://github.com/mantinedev/vite-template).</content>
</page>

<page>
  <title>eslint-config-mantine | Mantine</title>
  <url>https://mantine.dev/eslint-config-mantine/</url>
  <content>[eslint-config-mantine](https://github.com/mantinedev/eslint-config-mantine) is a set of ESLint rules and configurations used in Mantine projects. You can use it in your project to ensure that your code follows the same style and conventions as Mantine.

[Installation](#installation)
-----------------------------

Mantine ESLint config requires ESLint 9 or higher:

[Usage](#usage)
---------------

Add the following configuration to your `eslint.config.mjs`:

[Rules and source code](#rules-and-source-code)
-----------------------------------------------

Mantine ESLint config extends recommended [ESLint](https://eslint.org/docs/rules/), [typescript-eslint](https://typescript-eslint.io/) and [eslint-plugin-jsx-a11y](https://github.com/jsx-eslint/eslint-plugin-jsx-a11y) rules and adds custom rules and configurations. You can find the full list of rules and source code in the [eslint-config-mantine repository](https://github.com/mantinedev/eslint-config-mantine/blob/master/eslint.config.js).</content>
</page>

<page>
  <title>Version v8.1.0 | Mantine</title>
  <url>https://mantine.dev/changelog/8-1-0/</url>
  <content>[Support Mantine development](#support-mantine-development)
-----------------------------------------------------------

You can now sponsor Mantine development with [OpenCollective](https://opencollective.com/mantinedev). All funds are used to improve Mantine and create new features and components.

[Sponsor Mantine](https://opencollective.com/mantinedev)

[DatePicker presets](#datepicker-presets)
-----------------------------------------

[DatePicker](https://mantine.dev/dates/date-picker/), [DatePickerInput](https://mantine.dev/dates/date-picker-input/) and [DateTimePicker](https://mantine.dev/dates/date-time-picker/) now support `presets` prop that allows you to add custom date presets. Presets are displayed next to the calendar:

[Calendar headerControlsOrder](#calendar-headercontrolsorder)
-------------------------------------------------------------

[Calendar](https://mantine.dev/dates/calendar/) and other components based on it now support `headerControlsOrder` prop. You can use `headerControlsOrder` prop to change the order of header controls. The prop accepts an array of `'next' | 'previous' | 'level`. Note that each control can be used only once in the array.

[Popover middlewares improvements](#popover-middlewares-improvements)
---------------------------------------------------------------------

[Popover](https://mantine.dev/core/popover/) component now handles `shift` and `flip` Floating UI differently. Starting from 8.1.0 version, the popover dropdown position is not changed when the popover is opened. `shift` and `flip` middlewares are used only once to calculate the initial position of the dropdown.

This change fixes incorrect flipping/shifting behavior when there is dynamic content in the dropdown. For example, searchable [Select](https://mantine.dev/core/select/) and [DatePickerInput](https://mantine.dev/dates/date-picker-input/) without `consistentWeeks` option.

Previous behavior:

New behavior:

[use-long-press hook](#use-long-press-hook)
-------------------------------------------

New [use-long-press](https://mantine.dev/hooks/use-long-press/) hook:

[Reference area support in charts](#reference-area-support-in-charts)
---------------------------------------------------------------------

[BarChart](https://mantine.dev/charts/bar-chart/), [AreaChart](https://mantine.dev/charts/area-chart/) and [LineChart](https://mantine.dev/charts/line-chart/) components now support reference area. Reference area is a rectangular area that can be used to highlight a specific region of the chart:

[use-form resetField handler](#use-form-resetfield-handler)
-----------------------------------------------------------

[use-form](https://mantine.dev/form/use-form/) now has a `resetField` method that resets field value to its initial value:

[TagsInput isDuplicate prop](#tagsinput-isduplicate-prop)
---------------------------------------------------------

You can now use `isDuplicate` prop in [TagsInput](https://mantine.dev/core/tags-input/) component to control how duplicates are detected. It is a function that receives two arguments: tag value and current tags. The function must return `true` if the value is duplicate.

Example of using `isDuplicate` to allow using the same value with different casing:

[Slider domain prop](#slider-domain-prop)
-----------------------------------------

[Slider](https://mantine.dev/core/slider/) component now supports `domain` prop that allows setting the possible range of values independently of the `min` and `max` values:

[RangeSlider pushOnOverlap prop](#rangeslider-pushonoverlap-prop)
-----------------------------------------------------------------

[RangeSlider](https://mantine.dev/core/slider/) component now supports `pushOnOverlap` prop that defines whether the slider should push the overlapping thumb when the user drags it.

[Hooks types exports](#hooks-types-exports)
-------------------------------------------

`@mantine/hooks` package now exports all types used in hooks options and return values. For example, you can now import [use-uncontrolled](https://mantine.dev/hooks/use-uncontrolled/) types like this:

Types exported from the library:

[zod v4 with use-form](#zod-v4-with-use-form)
---------------------------------------------

You can now use zod v4 with [use-form](https://mantine.dev/form/use-form/). To use zod 4:

*   Update `mantine-form-zod-resolver` to `1.2.1` or later version
*   Update zod to version `3.25.0` or later
*   Replace `zod` imports with `zod/v4` (only if you have `zod@3` in your `package.json`)
*   Replace `zodResolver` with `zod4Resolver` in your code
*   All other code remains the same

Example with zod v4:

[Documentation updates](#documentation-updates)
-----------------------------------------------

*   [use-debounced-callback](https://mantine.dev/hooks/use-debounced-callback/) documentation was updated to include new `flush` and `flushOnUnmount` features
*   Documentation about exported types was added to all applicable hooks

[Other changes](#other-changes)
-------------------------------

*   All components now support `bdrs` style prop to set border radius.
*   [DateTimePicker](https://mantine.dev/dates/date-time-picker/) now supports `defaultTimeValue` prop
*   [Tooltip](https://mantine.dev/core/tooltip/) now supports `autoContrast` prop.
*   Handlers returned from [use-counter](https://mantine.dev/hooks/use-counter/) are now memoized.
*   Return value of [use-event-listener](https://mantine.dev/hooks/use-event-listener/), [use-focus-within](https://mantine.dev/hooks/use-focus-within/), [use-focus-trap](https://mantine.dev/hooks/use-focus-trap/), [use-hover](https://mantine.dev/hooks/use-hover/), [use-move](https://mantine.dev/hooks/use-move/), [use-radial-move](https://mantine.dev/hooks/use-radial-move/) changed (`React.RefObject` -> `React.RefCallback`), required to fix incorrect ref handling in several cases. For more information, see the issue on GitHub – [#7406](https://github.com/mantinedev/mantine/issues/7406).
*   Deprecated `React.MutableRefObject` type was replaced with `React.RefObject` in all packages to better support React 19 types.
*   `positionDependencies` prop is now deprecated in [Tooltip](https://mantine.dev/core/tooltip/), [Popover](https://mantine.dev/core/popover/) and other components based on Popover. The prop is no longer required and can be safely removed. `positionDependencies` prop will be removed in 9.0 release.</content>
</page>

<page>
  <title>Version v7.17.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-17-0/</url>
  <content>[Portal reuseTargetNode prop](#portal-reusetargetnode-prop)
-----------------------------------------------------------

[Portal](https://mantine.dev/core/portal/) component now supports `reuseTargetNode` prop which allows to reuse the same target node for all instances. This option is more performant than the previous behavior, it is recommended to be enabled. This option will be enabled by default in the `8.0` major release.

To enable reuseTargetNode option in all components that depend on Portal, add the following code to your [theme](https://mantine.dev/theming/theme-object/):

Example usage. In the following example, all three paragraphs will be rendered in the same target node:

[use-form formRootRule](#use-form-formrootrule)
-----------------------------------------------

`formRootRule` is a special rule path that can be used to [validate](https://mantine.dev/form/validation/) objects and arrays alongside with their nested fields. For example, it is useful when you want to capture a list of values, validate each value individually and then validate the list itself to not be empty:

Another example is to validate an object fields combination:

[isJSONString and isNotEmptyHTML form validators](#isjsonstring-and-isnotemptyhtml-form-validators)
---------------------------------------------------------------------------------------------------

New `isJSONString` and `isNotEmptyHTML` [form validators](https://mantine.dev/form/validators/):

*   `isNotEmptyHTML` checks that form value is not an empty HTML string. Empty string, string with only HTML tags and whitespace are considered to be empty.
*   `isJSONString` checks that form value is a valid JSON string.

[Popover onDismiss](#popover-ondismiss)
---------------------------------------

[Popover](https://mantine.dev/core/popover/) now supports `onDismiss` prop, which makes it easier to subscribe to outside clicks and escape key presses to close popover:

[MantineProvider env](#mantineprovider-env)
-------------------------------------------

[MantineProvider](https://mantine.dev/theming/mantine-provider/) component now supports `env` prop. It can be used in test environment to disable some features that might impact tests and/or make it harder to test components:

*   transitions that mount/unmount child component with delay
*   portals that render child component in a different part of the DOM

To enable test environment, set `env` to `test`:

[use-file-dialog hook](#use-file-dialog-hook)
---------------------------------------------

New [use-file-dialog](https://mantine.dev/hooks/use-file-dialog/) allows capturing one or more files from the user without file input element:

[Remix deprecation](#remix-deprecation)
---------------------------------------

[Remix](https://remix.run/) is deprecated, the documentation related to Remix integration was removed, use [React Router](https://mantine.dev/guides/react-router/) instead. To simplify maintenance, Remix/React Router templates were archived and will not be updated.

[Help center updates](#help-center-updates)
-------------------------------------------

*   [I get hydration warning about data-mantine-color-scheme attribute, what does it mean?](https://help.mantine.dev/q/color-scheme-hydration-warning) question
*   [How can I apply styles to all Mantine components?](https://help.mantine.dev/q/apply-styles-to-all) question

[Other changes](#other-changes)
-------------------------------

*   [Tooltip](https://mantine.dev/core/tooltip/) now supports customizing `middlewares`
*   [ScrollArea](https://mantine.dev/core/scroll-area/) now supports `overscrollBehavior` prop
*   [Affix](https://mantine.dev/core/affix/) now supports `theme.spacing` values for `position` prop
*   [Anchor](https://mantine.dev/core/anchor/) now supports `underline="not-hover"` option to display underline only when the link is not hovered</content>
</page>

<page>
  <title>Version v8.0.0 | Mantine</title>
  <url>https://mantine.dev/changelog/8-0-0/</url>
  <content>[Support Mantine development](#support-mantine-development)
-----------------------------------------------------------

You can now sponsor Mantine development with [OpenCollective](https://opencollective.com/mantinedev). All funds are used to improve Mantine and create new features and components.

[Sponsor Mantine](https://opencollective.com/mantinedev)

[Migration guide](#migration-guide)
-----------------------------------

This changelog covers breaking changes and new features in Mantine 8.0. To migrate your application to Mantine 8.0, follow [7.x → 8.x migration guide](https://mantine.dev/guides/7x-to-8x/).

[Granular global styles exports](#granular-global-styles-exports)
-----------------------------------------------------------------

Global styles are now split between 3 files:

*   `baseline.css` – a minimal CSS reset, sets `box-sizing: border-box` and changes font properties
*   `default-css-variables.css` – contains all CSS variables generated from the default theme
*   `global.css` – global classes used in Mantine components

If you previously imported individual styles from `@mantine/core` package, you need to update imports to use new files:

If you imported `@mantine/core/styles.css`, no changes are required – all new files are already included in `styles.css`.

[Menu with submenus](#menu-with-submenus)
-----------------------------------------

[Menu](https://mantine.dev/core/menu/) component now supports submenus:

[Popover hideDetached](#popover-hidedetached)
---------------------------------------------

[Popover](https://mantine.dev/core/popover/) component now supports `hideDetached` prop to configure how the dropdown behaves when the target element is hidden with styles (`display: none`, `visibility: hidden`, etc.), removed from the DOM, or when the target element is scrolled out of the viewport.

By default, `hideDetached` is enabled – the dropdown is hidden with the target element. You can change this behavior with `hideDetached={false}`. To see the difference, try to scroll the root element of the following demo:

[Date values as strings](#date-values-as-strings)
-------------------------------------------------

All `@mantine/dates` components now use date strings in `YYYY-MM-DD` or `YYYY-MM-DD HH:mm:ss` format instead of `Date` objects. This change was made to resolve issues related to timezones – now the output of all `@mantine/dates` components does not include any timezone-specific information. Follow [7.x → 8.x migration guide](https://mantine.dev/guides/7x-to-8x/) to learn how to update the code to use new string values.

Example of using [DatePicker](https://mantine.dev/dates/date-picker/) component with string values:

[DatesProvider timezone](#datesprovider-timezone)
-------------------------------------------------

`DatesProvider` component no longer supports `timezone` option – all `@mantine/dates` components now use strings in `YYYY-MM-DD HH:mm:ss` format as values and do not contain timezone information.

If you need to handle timezones in your application, you can use a dedicated dates library ([dayjs](https://day.js.org/), [luxon](https://moment.github.io/luxon/#/), [date-fns](https://date-fns.org/)) to update timezone values.

Example of using Mantine components with [dayjs](https://day.js.org/):

[TimePicker component](#timepicker-component)
---------------------------------------------

New [TimePicker](https://mantine.dev/dates/time-picker/) component is an alternative to [TimeInput](https://mantine.dev/dates/time-input/) that offers more features. It supports 24-hour and 12-hour formats, dropdown with hours, minutes and seconds, and more.

[DateTimePicker component changes](#datetimepicker-component-changes)
---------------------------------------------------------------------

[DateTimePicker](https://mantine.dev/dates/date-time-picker/) component now uses [TimePicker](https://mantine.dev/dates/time-picker/) under the hood instead of [TimeInput](https://mantine.dev/dates/time-input/). You can now use all [TimePicker](https://mantine.dev/dates/time-picker/) features with [DateTimePicker](https://mantine.dev/dates/date-time-picker/) component.

Prop `timeInputProps` is no longer available, to pass props down to the underlying [TimePicker](https://mantine.dev/dates/time-picker/) you need to use `timePickerProps` prop.

Example of enabling dropdown and setting `12h` format for time picker:

[TimeValue component](#timevalue-component)
-------------------------------------------

New [TimeValue](https://mantine.dev/dates/time-value/) component can be used to display a formatted time string with similar formatting options to [TimePicker](https://mantine.dev/dates/time-picker/) component.

24h format: 18:45

12h format: 6:45 PM

[TimeGrid component](#timegrid-component)
-----------------------------------------

New [TimeGrid](https://mantine.dev/dates/time-grid/) component allows to capture time value from the user with a predefined set of time slots:

[Heatmap component](#heatmap-component)
---------------------------------------

New [Heatmap](https://mantine.dev/charts/heatmap/) component allows to display data in a calendar heatmap format:

MonWedFriSunFebMarAprMayJunJulAugSepOctNovDecJan

[CodeHighlight changes](#codehighlight-changes)
-----------------------------------------------

[@mantine/code-highlight](https://mantine.dev/x/code-highlight/) package no longer depends on [highlight.js](https://highlightjs.org/). Instead, it now provides a new API based on adapters that allows using any syntax highlighter of your choice. Out of the, box `@mantine/code-highlight` provides adapters for [shiki](https://shiki.matsu.io/) and [highlight.js](https://highlightjs.org/).

To learn about the migration process and how to use the new adapters API, check the updated [CodeHighlight documentation](https://mantine.dev/x/code-highlight/) and [7.x → 8.x migration guide](https://mantine.dev/guides/7x-to-8x/).

[CodeHighlight with shiki](#codehighlight-with-shiki)
-----------------------------------------------------

You can now use [CodeHighlight](https://mantine.dev/x/code-highlight/) component with [shiki](https://shiki.matsu.io/).

[Shiki](https://shiki.matsu.io/) library provides the most advanced syntax highlighting for TypeScript and CSS/Sass code. It uses textmate grammars to highlight code (same as in VSCode). Shiki adapter is recommended if you need to highlight advanced TypeScript (generics, jsx nested in props) or CSS code (custom syntaxes, newest features). Shiki adapter is used for all code highlighting in Mantine documentation.

To use shiki adapter, you need to install `shiki` package:

Then wrap your app with `CodeHighlightAdapterProvider` and provide `createShikiAdapter` as `adapter` prop:

After that, you can use `CodeHighlight` component in your application:

[Carousel changes](#carousel-changes)
-------------------------------------

[@mantine/carousel](https://mantine.dev/x/carousel/) package was updated to use the latest version of `embla-carousel-react` package. This update includes breaking changes:

*   `speed` and `draggable` props were removed – they are no longer supported by `embla-carousel-react`
*   It is now required to install both `embla-carousel` and `embla-carousel-react` packages explicitly
*   `useAnimationOffsetEffect` hook was removed – the issue it addressed was fixed in `embla-carousel-react`
*   `Embla` type export was removed, you should use `EmblaCarouselType` from `embla-carousel` instead
*   Props that were previously passed to embla are now grouped under `emblaOptions` prop

Follow the [7.x → 8.x migration guide](https://mantine.dev/guides/7x-to-8x/) to update your application to use the latest version of `@mantine/carousel`.

[Switch withThumbIndicator](#switch-withthumbindicator)
-------------------------------------------------------

[Switch](https://mantine.dev/core/switch/) component styles were updated to include indicator inside the thumb. You can change it by setting `withThumbIndicator` prop:

I agree to sell my privacy

With thumb indicator

Disabled

[Theme types augmentation](#theme-types-augmentation)
-----------------------------------------------------

You can now augment `spacing`, `radius`, `breakpoints`, `fontSizes`, `lineHeights`, and `shadows` types. To learn more about this feature, follow [this guide](https://mantine.dev/guides/typescript/#theme-object-declarations).

Example of types augmentation for `spacing` and `radius`:

[Other changes](#other-changes)
-------------------------------

*   [Kbd](https://mantine.dev/core/kbd/) component now supports `size` prop
*   [DateInput](https://mantine.dev/dates/date-input/) component no longer supports `preserveTime` prop, use different component to capture time values
*   [ScrollArea](https://mantine.dev/core/scroll-area/) component no longer has forced `display: table` styles on the wrapper element of the content. It also now supports `content` Styles API selector to apply styles to the content element.
*   [Image](https://mantine.dev/core/image/) component no longer includes `flex: 0` styles by default
*   [SegmentedControl](https://mantine.dev/core/segmented-control/) default height values were changed to match sizes of [Input](https://mantine.dev/core/input/) components
*   Type of `wrapperProps` prop in all components that support it (`Checkbox`, `Radio`, `Chip`, most inputs) was changed to more strict type
*   [Portal](https://mantine.dev/core/portal/) component now has `reuseTargetNode` prop enabled by default
*   [use-form](https://mantine.dev/form/use-form/) `setFieldValue` handler types are now stricter
*   [Menu.Item](https://mantine.dev/core/menu/) no longer has `data-hovered` attribute, use `:hover` and `:focus` selectors instead to apply styles
*   [use-os](https://mantine.dev/hooks/use-os/) now supports Chrome OS detection, its return type now includes `chromeos` value in the union
*   The default eye dropper icon of [ColorInput](https://mantine.dev/core/color-input/) component was updated
*   The default spacing of [Notification](https://mantine.dev/core/notification/) component was increased
*   [Code](https://mantine.dev/core/code/) component color styles were updated</content>
</page>

<page>
  <title>Version v7.16.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-16-0/</url>
  <content>[use-scroll-spy hook](#use-scroll-spy-hook)
-------------------------------------------

New [use-scroll-spy](https://mantine.dev/hooks/use-scroll-spy/) hook tracks scroll position and returns index of the element that is currently in the viewport. It is useful for creating table of contents components (like in mantine.dev sidebar on the right side) and similar features.

[TableOfContents component](#tableofcontents-component)
-------------------------------------------------------

New [TableOfContents](https://mantine.dev/core/table-of-contents/) component is built on top of `use-scroll-spy` hook and can be used to create table of contents components like the one on the right side of mantine.dev documentation sidebar:

[Input.ClearButton component](#inputclearbutton-component)
----------------------------------------------------------

New `Input.ClearButton` component can be used to add clear button to custom inputs based on `Input` component. `size` of the clear button is automatically inherited from the input:

[Popover with overlay](#popover-with-overlay)
---------------------------------------------

[Popover](https://mantine.dev/core/popover/) and other components based on it now support `withOverlay` prop:

[Container queries in Carousel](#container-queries-in-carousel)
---------------------------------------------------------------

You can now use [container queries](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment/Container_queries) in [Carousel](https://mantine.dev/x/carousel/) component. With container queries, all responsive values are adjusted based on the container width, not the viewport width.

Example of using container queries. To see how the grid changes, resize the root element of the demo with the resize handle located at the bottom right corner of the demo:

[RangeSlider restrictToMarks](#rangeslider-restricttomarks)
-----------------------------------------------------------

[RangeSlider](https://mantine.dev/core/slider/) component now supports `restrictToMarks` prop:

[Pagination withPages prop](#pagination-withpages-prop)
-------------------------------------------------------

[Pagination](https://mantine.dev/core/pagination/) component now supports `withPages` prop which allows hiding pages controls and displaying only previous and next buttons:

[useForm touchTrigger option](#useform-touchtrigger-option)
-----------------------------------------------------------

[use-form](https://mantine.dev/form/use-form/) hook now supports `touchTrigger` option that allows customizing events that change touched state. It accepts two options:

*   `change` (default) – field will be considered touched when its value changes or it has been focused
*   `focus` – field will be considered touched only when it has been focused

Example of using `focus` trigger:

[Help Center updates](#help-center-updates)
-------------------------------------------

*   [Native browser validation does not work in some components, what should I do?](https://help.mantine.dev/q/native-required) question
*   [My styles are broken with disabled JavaScript. What should I do?](https://help.mantine.dev/q/disabled-js) question
*   [How can I add fuzzy search to Select component?](https://help.mantine.dev/q/select-fuzzy) question
*   [use-local-storage hook returns real value only after mounting, is it a bug?](https://help.mantine.dev/q/local-storage-effect) question
*   [How can I upload files from Dropzone component?](https://help.mantine.dev/q/dropzone-upload) question

[Other changes](#other-changes)
-------------------------------

*   [Autocomplete](https://mantine.dev/core/autocomplete/) now supports `clearable` prop
*   [where-\* mixins](https://mantine.dev/styles/postcss-preset/#where--mixins) documentation has been added
*   [use-local-storage](https://mantine.dev/hooks/use-local-storage/) hook now supports `sync` option which allows disabling synchronization between browser tabs</content>
</page>

<page>
  <title>Version v7.14.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-14-0/</url>
  <content>[AngleSlider component](#angleslider-component)
-----------------------------------------------

New [AngleSlider](https://mantine.dev/core/angle-slider/) component:

[RadialBarChart component](#radialbarchart-component)
-----------------------------------------------------

New [RadialBarChart](https://mantine.dev/charts/radial-bar-chart/) component:

[FunnelChart component](#funnelchart-component)
-----------------------------------------------

New [FunnelChart](https://mantine.dev/charts/funnel-chart/) component:

[Modal.Stack and Drawer.Stack components](#modalstack-and-drawerstack-components)
---------------------------------------------------------------------------------

New [Modal.Stack](https://mantine.dev/core/modal/) and [Drawer.Stack](https://mantine.dev/core/drawer/) components simplify usage of multiple modals/drawers at the same time.

Use `Modal.Stack` component to render multiple modals at the same time. `Modal.Stack` keeps track of opened modals, manages z-index values, focus trapping and `closeOnEscape` behavior. `Modal.Stack` is designed to be used with `useModalsStack` hook.

Differences from using multiple `Modal` components:

*   `Modal.Stack` manages z-index values – modals that are opened later will always have higher z-index value disregarding their order in the DOM
*   `Modal.Stack` disables focus trap and `Escape` key handling for all modals except the one that is currently opened
*   Modals that are not currently opened are present in the DOM but are hidden with `opacity: 0` and `pointer-events: none`
*   Only one overlay is rendered at a time

[useModalsStack/useDrawersStack hooks](#usemodalsstackusedrawersstack-hooks)
----------------------------------------------------------------------------

`useModalsStack` hook provides an easy way to control multiple modals at the same time. It accepts an array of unique modals ids and returns an object with the following properties:

Example of using `useModalsStack` with `Modal` component:

[Restrict Slider selection to marks](#restrict-slider-selection-to-marks)
-------------------------------------------------------------------------

[Slider](https://mantine.dev/core/slider/) component now supports `restrictToMarks` prop that restricts slider value to marks only. Note that in this case `step` prop is ignored:

[BarChart SVG pattern fill](#barchart-svg-pattern-fill)
-------------------------------------------------------

[BarChart](https://mantine.dev/charts/bar-chart/) now can be used with SVG pattern fill:

[Help center updates](#help-center-updates)
-------------------------------------------

*   New [Can I use nested inline styles with Mantine components?](https://help.mantine.dev/q/nested-inline-styles) question
*   New [Can I use PostCSS function in inline styles?](https://help.mantine.dev/q/postcss-fns-inline) question
*   New [Why my Carousel slides are in vertical orientation?](https://help.mantine.dev/q/carousel-missing-styles) question
*   New [My buttons are transparent and the background is visible only on hover, what is wrong?](https://help.mantine.dev/q/transparent-buttons) question
*   New [Can I have different primary color for light and dark color schemes?](https://help.mantine.dev/q/primary-virtual-color) question
*   New [How can I change body background color?](https://help.mantine.dev/q/body-background) question
*   New [My Popover dropdown closes when I click on the dropdown of nested Popover](https://help.mantine.dev/q/nested-popover-closes) question

[Other changes](#other-changes)
-------------------------------

*   [useTree](https://mantine.dev/core/tree/) hook now accepts `onNodeExpand` and `onNodeCollapse` callbacks
*   [useTree](https://mantine.dev/core/tree/) hook now returns additional `checkAllNodes`, `uncheckAllNodes` and `setCheckedState` handlers
*   [Tree](https://mantine.dev/core/tree/) component now includes `getTreeExpandedState` to generate expanded state based on the tree data
*   [use-form](https://mantine.dev/form/use-form/) now supports `form.replaceListItem` handler to replace list item at given index</content>
</page>

<page>
  <title>Version v7.15.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-15-0/</url>
  <content>[Support Mantine development](#support-mantine-development)
-----------------------------------------------------------

You can now sponsor Mantine development with [OpenCollective](https://opencollective.com/mantinedev). All funds will be used to improve Mantine and create new features and components.

[Sponsor Mantine](https://opencollective.com/mantinedev)

[use-radial-move hook](#use-radial-move-hook)
---------------------------------------------

New [use-radial-move](https://mantine.dev/hooks/use-radial-move/) hook can be used to create custom radial sliders:

[BarChart color based on value](#barchart-color-based-on-value)
---------------------------------------------------------------

[BarChart](https://mantine.dev/charts/bar-chart/) component now supports `getBarColor` prop to assign color based on value. `getBarColor` function is called with two arguments: value and series object. It should return a color string (theme color reference or any valid CSS color value).

[Button.GroupSection and ActionIcon.GroupSection](#buttongroupsection-and-actionicongroupsection)
-------------------------------------------------------------------------------------------------

`ActionIcon.GroupSection` and `Button.GroupSection` are new components that can be used in `ActionIcon.Group`/`Button.Group` to create sections that are not `ActionIcon`/`Button` components:

[Table vertical variant](#table-vertical-variant)
-------------------------------------------------

[Table](https://mantine.dev/core/table/) component now support `variant="vertical"`:

<table data-variant="vertical" data-with-table-border="true"><tbody><tr data-with-row-border="true"><th>Epic name</th><td>7.x migration</td></tr><tr data-with-row-border="true"><th>Status</th><td>Open</td></tr><tr data-with-row-border="true"><th>Total issues</th><td>135</td></tr><tr data-with-row-border="true"><th>Total story points</th><td>874</td></tr><tr data-with-row-border="true"><th>Last updated at</th><td>September 26, 2024 17:41:26</td></tr></tbody></table>

[Table tabular numbers](#table-tabular-numbers)
-----------------------------------------------

[Table](https://mantine.dev/core/table/) component now supports `tabularNums` prop to render numbers in tabular style. It sets `font-variant-numeric: tabular-nums` which makes numbers to have equal width. This is useful when you have columns with numbers and you want them to be aligned:

| Product | Units sold |
| --- | --- |
| Apples | 2,214,411,234 |
| Oranges | 9,983,812,411 |
| Bananas | 1,234,567,890 |
| Pineapples | 9,948,810,000 |
| Pears | 9,933,771,111 |

[Update function in modals manager](#update-function-in-modals-manager)
-----------------------------------------------------------------------

[Modals manager](https://mantine.dev/x/modals/) now supports `modals.updateModal` and `modals.updateContextModal` function to update modal after it was opened:

[useForm submitting state](#useform-submitting-state)
-----------------------------------------------------

[use-form](https://mantine.dev/form/use-form/) hook now supports `form.submitting` field and `form.setSubmitting` function to track form submission state.

`form.submitting` field will be set to `true` if function passed to `form.onSubmit` returns a promise. After the promise is resolved or rejected, `form.submitting` will be set to `false`:

You can also manually set `form.submitting` to `true` or `false`:

[useForm onSubmitPreventDefault option](#useform-onsubmitpreventdefault-option)
-------------------------------------------------------------------------------

[use-form](https://mantine.dev/form/use-form/) hook now supports `onSubmitPreventDefault` option. This option is useful if you want to integrate `useForm` hook with [server actions](https://github.com/mantinedev/mantine/issues/7142). By default, `event.preventDefault()` is called on the form `onSubmit` handler. If you want to change this behavior, you can pass `onSubmitPreventDefault` option to `useForm` hook. It can have the following values:

*   `always` (default) - always call `event.preventDefault()`
*   `never` - never call `event.preventDefault()`
*   `validation-failed` - call `event.preventDefault()` only if validation failed

[Subtle RichTextEditor variant](#subtle-richtexteditor-variant)
---------------------------------------------------------------

[RichTextEditor](https://mantine.dev/x/tiptap/) component now supports `subtle` variant:

[onExitTransitionEnd and onEnterTransitionEnd](#onexittransitionend-and-onentertransitionend)
---------------------------------------------------------------------------------------------

[Modal](https://mantine.dev/core/modal/) and [Drawer](https://mantine.dev/core/drawer/) components now support `onExitTransitionEnd` and `onEnterTransitionEnd` props, which can be used to run code after exit/enter transition is finished. For example, this is useful when you want to clear data after modal is closed:

[Week numbers in DatePicker](#week-numbers-in-datepicker)
---------------------------------------------------------

[DatePicker](https://mantine.dev/dates/date-picker/) and other components based on Calendar component now support `withWeekNumbers` prop to display week numbers:

| # | Mo | Tu | We | Th | Fr | Sa | Su |
| --- | --- | --- | --- | --- | --- | --- | --- |
| 22 |  |  |  |  |  |  |  |
| 23 |  |  |  |  |  |  |  |
| 24 |  |  |  |  |  |  |  |
| 25 |  |  |  |  |  |  |  |
| 26 |  |  |  |  |  |  |  |
| 27 |  |  |  |  |  |  |  |

[New demo: BarChart with overlay](#new-demo-barchart-with-overlay)
------------------------------------------------------------------

[Variants types augmentation](#variants-types-augmentation)
-----------------------------------------------------------

[Custom variants](https://mantine.dev/styles/variants-sizes/#custom-variants-types) types augmentation guide was added to the documentation.

Example of adding custom variant type to [Button](https://mantine.dev/core/button/) component:

[Help Center updates](#help-center-updates)
-------------------------------------------

*   [How to use Mantine template on GitHub?](https://help.mantine.dev/q/templates-usage) and [How can I submit a template to Mantine documentation?](https://help.mantine.dev/q/submit-template) pages were moved from the documentation to Help Center
*   [How that thing is done on mantine.dev website?](https://help.mantine.dev/q/how-that-thing-is-done) question
*   [Why is it required to have 10 shades per color?](https://help.mantine.dev/q/ten-shades-per-color) question
*   [Why I see color scheme flickering on page load?](https://help.mantine.dev/q/color-scheme-flickering) question
*   [How can I test Modal/Drawer/Popover components?](https://help.mantine.dev/q/portals-testing) question</content>
</page>

<page>
  <title>Version v7.13.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-13-0/</url>
  <content>[Container queries support in Grid](#container-queries-support-in-grid)
-----------------------------------------------------------------------

You can now use [container queries](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment/Container_queries) in [Grid](https://mantine.dev/core/grid/) component. With container queries, all responsive values are adjusted based on the container width, not the viewport width.

Example of using container queries. To see how the grid changes, resize the root element of the demo with the resize handle located at the bottom right corner of the demo:

[CompositeChart component](#compositechart-component)
-----------------------------------------------------

New [CompositeChart](https://mantine.dev/charts/composite-chart/) component allows using `Line`, `Area` and `Bar` charts together in a single chart:

[Points labels](#points-labels)
-------------------------------

[LineChart](https://mantine.dev/charts/line-chart/) and [AreaChart](https://mantine.dev/charts/area-chart/) now support `withPointLabels` prop to display labels on data points:

[ScatterChart](https://mantine.dev/charts/scatter-chart/) also supports point labels, but also allows to control which axis should display labels with `pointLabels` prop:

[BarChart: Mixed stacks](#barchart-mixed-stacks)
------------------------------------------------

You can now control how [BarChart](https://mantine.dev/charts/bar-chart/) series are stacked by setting `stackId` property in series object:

[BarChart: Minimum bar size](#barchart-minimum-bar-size)
--------------------------------------------------------

[BarChart](https://mantine.dev/charts/bar-chart/) now supports `minBarSize` prop to set the minimum size of the bar in px:

[New demo: Custom Tabs variant](#new-demo-custom-tabs-variant)
--------------------------------------------------------------

A new example of adding a custom variant to [Tabs](https://mantine.dev/core/tabs/) component with [FloatingIndicator](https://mantine.dev/core/floating-indicator/):

[New demo: Custom slider](#new-demo-custom-slider)
--------------------------------------------------

Example of [use-move](https://mantine.dev/hooks/use-move/) hook usage to create a custom slider:

[Help Center updates](#help-center-updates)
-------------------------------------------

*   New [How to integrate custom input with use-form hook?](https://help.mantine.dev/q/custom-input-use-form) question
*   New [Can I remove MultiSelect placeholder when the component has selected values?](https://help.mantine.dev/q/multiselect-value-placeholder) question
*   New [How can I load fonts in React Router?](https://help.mantine.dev/q/react-router-load-fonts) question
*   New [My styles are overridden by Mantine components styles, what should I do?](https://help.mantine.dev/q/styles-order) question
*   New [Why I cannot use one polymorphic component in component prop of another polymorphic component?](https://help.mantine.dev/q/polymorphic-in-polymorphic) question
*   New [Can I use an array of strings as a list in use-form?](https://help.mantine.dev/q/list-of-strings-in-use-form) question

[Other changes](#other-changes)
-------------------------------

*   New demo has been added to [Chip](https://mantine.dev/core/chip/) component with an example of how to deselect radio chip
*   [BarChart](https://mantine.dev/charts/bar-chart/) now supports `maxBarWidth` prop to set the maximum width of each bar in px</content>
</page>

<page>
  <title>Version v7.11.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-11-0/</url>
  <content>[withProps function](#withprops-function)
-----------------------------------------

All Mantine components now have `withProps` static function that can be used to add default props to the component:

[Avatar initials](#avatar-initials)
-----------------------------------

[Avatar](https://mantine.dev/core/avatar/) component now supports displaying initials with auto generated color based on the given `name` value. To display initials instead of the default placeholder, set `name` prop to the name of the person, for example, `name="John Doe"`. If the name is set, you can use `color="initials"` to generate color based on the name:

[BubbleChart component](#bubblechart-component)
-----------------------------------------------

New [BubbleChart](https://mantine.dev/charts/bubble-chart/) component:

[BarChart waterfall type](#barchart-waterfall-type)
---------------------------------------------------

[BarChart](https://mantine.dev/charts/bar-chart/) component now supports `waterfall` type which is useful for visualizing changes in values over time:

[LineChart gradient type](#linechart-gradient-type)
---------------------------------------------------

[LineChart](https://mantine.dev/charts/line-chart/) component now supports `gradient` type which renders line chart with gradient fill:

[Right Y axis](#right-y-axis)
-----------------------------

[LineChart](https://mantine.dev/charts/line-chart/), [BarChart](https://mantine.dev/charts/bar-chart/) and [AreaChart](https://mantine.dev/charts/area-chart/) components now support `rightYAxis` prop which renders additional Y axis on the right side of the chart:

[RadarChart legend](#radarchart-legend)
---------------------------------------

[RadarChart](https://mantine.dev/charts/radar-chart/) component now supports legend:

[TagsInput acceptValueOnBlur](#tagsinput-acceptvalueonblur)
-----------------------------------------------------------

[TagsInput](https://mantine.dev/core/tags-input/) component behavior has been changed. Now By default, if the user types in a value and blurs the input, the value is added to the list. You can change this behavior by setting `acceptValueOnBlur` to `false`. In this case, the value is added only when the user presses `Enter` or clicks on a suggestion.

[Transition delay](#transition-delay)
-------------------------------------

[Transition](https://mantine.dev/core/transition/) component now supports `enterDelay` and `exitDelay` props to delay transition start:

[Documentation updates](#documentation-updates)
-----------------------------------------------

*   New [segmented progress](https://mantine.dev/core/progress/#example-progress-with-segments) example has been added to `Progress` component documentation
*   [Select](https://mantine.dev/core/select/), [TagsInput](https://mantine.dev/core/tags-input/) and [MultiSelect](https://mantine.dev/core/multi-select/) components documentation now includes additional demo on how to change the dropdown width
*   New [DatePicker](https://mantine.dev/dates/date-picker/#exclude-dates) example for `excludeDate` prop

[Other changes](#other-changes)
-------------------------------

*   [Pagination](https://mantine.dev/core/pagination/) component now supports `hideWithOnePage` prop which hides pagination when there is only one page
*   [Spoiler](https://mantine.dev/core/spoiler/) component now supports controlled expanded state with `expanded` and `onExpandedChange` props
*   [Burger](https://mantine.dev/core/burger/) component now supports `lineSize` prop to change lines height
*   [Calendar](https://mantine.dev/dates/calendar/), [DatePicker](https://mantine.dev/dates/date-picker/) and other similar components now support `highlightToday` prop to highlight today's date</content>
</page>

<page>
  <title>Version v7.12.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-12-0/</url>
  <content>[Notifications at any position](#notifications-at-any-position)
---------------------------------------------------------------

It is now possible to display notifications at any position on the screen with [@mantine/notifications package](https://mantine.dev/x/notifications/):

[Subscribe to notifications state](#subscribe-to-notifications-state)
---------------------------------------------------------------------

You can now subscribe to notifications state changes with `useNotifications` hook:

Notifications state

\[\]

Notifications queue

\[\]

[SemiCircleProgress component](#semicircleprogress-component)
-------------------------------------------------------------

New [SemiCircleProgress](https://mantine.dev/core/semi-circle-progress/) component:

Fill direction

Right to left

Left to right

[Tree checked state](#tree-checked-state)
-----------------------------------------

[Tree](https://mantine.dev/core/tree/) component now supports checked state:

[Disable specific features in postcss-preset-mantine](#disable-specific-features-in-postcss-preset-mantine)
-----------------------------------------------------------------------------------------------------------

You can now disable specific features of the [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/) by setting them to `false` in the configuration object. This feature is available starting from `postcss-preset-mantine@1.17.0`.

[Help Center updates](#help-center-updates)
-------------------------------------------

*   [Server components guide](https://help.mantine.dev/q/server-components) has been updated to include `Component.extend` usage in server components.
*   [A guide on applying input focus styles](https://help.mantine.dev/q/input-focus-styles) has been updated to work correctly with [PasswordInput](https://mantine.dev/core/password-input/) and other components in which the `input` selector is not used for actual input element.
*   The guide on [how to disable all inputs in the form](https://help.mantine.dev/q/disable-all-inputs-in-form) now includes additional instructions for [use-form](https://mantine.dev/form/use-form/).
*   New [Can I have color schemes other than light and dark?](https://help.mantine.dev/q/light-dark-is-not-enough) guide explains the difference between color scheme and theme and why Mantine does not support custom color schemes.
*   New [Why VSCode cannot autoimport Text component?](https://help.mantine.dev/q/why-vscode-cannot-autoimport-text) guide explains why VSCode cannot automatically import `Text` component.
*   New [Are Mantine components accessible?](https://help.mantine.dev/q/are-mantine-components-accessible) question
*   New [How can I focus the first input with error with use-form?](https://help.mantine.dev/q/focus-first-input-with-error) question
*   New [How to scroll to the top of the form if the form is submitted with errors?](https://help.mantine.dev/q/scroll-to-the-top-of-the-form) question
*   New [Why my notifications are displayed at a wrong position?](https://help.mantine.dev/q/notifications-missing-styles) question
*   New [Why my screen is completely empty after I've added notifications package?](https://help.mantine.dev/q/notifications-empty-screen) question
*   New [Why can I not use value/label data structure with Autocomplete/TagsInput?](https://help.mantine.dev/q/autocomplete-value-label) question
*   New [Why FileButton does not work in Menu?](https://help.mantine.dev/q/file-button-in-menu) question
*   New [How can I display different elements in light and dark color schemes?](https://help.mantine.dev/q/light-dark-elements) question

[Other changes](#other-changes)
-------------------------------

*   [use-interval](https://mantine.dev/hooks/use-interval/) hook now supports `autoInvoke` option to start the interval automatically when the component mounts.
*   [use-form](https://mantine.dev/form/use-form/) with `mode="uncontrolled"` now triggers additional rerender when dirty state changes to allow subscribing to form state changes.
*   [ScrollArea](https://mantine.dev/core/scroll-area/) component now supports `onTopReached` and `onBottomReached` props. The functions are called when the user scrolls to the top or bottom of the scroll area.
*   [Accordion.Panel](https://mantine.dev/core/accordion/) component now supports `onTransitionEnd` prop that is called when the panel animation completes.</content>
</page>

<page>
  <title>Version v7.10.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-10-0/</url>
  <content>[Tree component](#tree-component)
---------------------------------

New [Tree](https://mantine.dev/core/tree/) component:

[form.getInputNode](#formgetinputnode)
--------------------------------------

New `form.getInputNode(path)` handler returns input DOM node for the given field path. Form example, it can be used to focus input on form submit if there is an error:

[Container queries in SimpleGrid](#container-queries-in-simplegrid)
-------------------------------------------------------------------

You can now use [container queries](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment/Container_queries) in [SimpleGrid](https://mantine.dev/core/simple-grid/) component. With container queries, grid columns and spacing will be adjusted based on the container width, not the viewport width.

Example of using container queries. To see how the grid changes, resize the root element of the demo with the resize handle located at the bottom right corner of the demo:

[Checkbox and Radio indicators](#checkbox-and-radio-indicators)
---------------------------------------------------------------

New [Checkbox.Indicator](https://mantine.dev/core/checkbox/#checkboxindicator) and [Radio.Indicator](https://mantine.dev/core/radio/#radioindicator) components look exactly the same as `Checkbox` and `Radio` components, but they do not have any semantic meaning, they are just visual representations of checkbox and radio states.

`Checkbox.Indicator` component:

`Radio.Indicator` component:

[Checkbox and Radio cards](#checkbox-and-radio-cards)
-----------------------------------------------------

New [Checkbox.Card](https://mantine.dev/core/checkbox/#checkboxcard-component) and [Radio.Card](https://mantine.dev/core/radio/#radiocard-component) components can be used as replacements for `Checkbox` and `Radio` to build custom cards/buttons/etc. that work as checkboxes and radios. Components are accessible by default and support the same keyboard interactions as `input[type="checkbox"]` and `input[type="radio"]`.

`Checkbox.Card` component:

`Checkbox.Card` component with `Checkbox.Group`:

Pick packages to install

Choose all packages that you will need in your application

CurrentValue: –

`Radio.Card` component:

`Radio.Card` component with `Radio.Group`:

Pick one package to install

Choose a package that you will need in your application

CurrentValue: –

[bd style prop](#bd-style-prop)
-------------------------------

New [bd style prop](https://mantine.dev/styles/style-props/) can be used to set `border` CSS property. It is available in all components that support style props.

Border width value is automatically converted to rem. For border color you can reference theme colors similar to other style props:</content>
</page>

<page>
  <title>Version v7.9.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-9-0/</url>
  <content>[@mantine/emotion package](#mantineemotion-package)
---------------------------------------------------

New [@mantine/emotion](https://mantine.dev/styles/emotion/) package is now available to simplify migration from [6.x to 7.x](https://mantine.dev/guides/6x-to-7x/). It includes `createStyles` function and additional functionality for `sx` and `styles` props for all components similar to what was available in `@mantine/core` package in v6.

If you still haven't migrated to 7.x because of the change in styling approach, you can now have a smoother transition by using `@mantine/emotion` package. To learn more about the package, visit the [documentation page](https://mantine.dev/styles/emotion/) and updated [6.x to 7.x migration guide](https://mantine.dev/guides/6x-to-7x/).

[React 18.3 support](#react-183-support)
----------------------------------------

All `@mantine/*` components and hooks have been updated to support React 18.3. It is recommended to update your application as well to prepare for the upcoming [React 19 release](https://react.dev/blog/2024/04/25/react-19).

[use-field hook](#use-field-hook)
---------------------------------

New [use-field](https://mantine.dev/form/use-field/) hook is now available in `@mantine/form` package. It can be used as a simpler alternative to [use-form](https://mantine.dev/form/use-form/) hook to manage state of a single input without the need to create a form. The hook supports most of `use-form` hook features: validation with function, touched and dirty state, error message, validation on change/blur and more.

`use-field` hook also supports async validation:

[Custom PostCSS mixins](#custom-postcss-mixins)
-----------------------------------------------

You can now define custom mixins that are not included in [mantine-postcss-preset](https://mantine.dev/styles/postcss-preset/) by specifying them in the `mixins` option. To learn about mixins syntax, follow [postcss-mixins documentation](https://github.com/postcss/postcss-mixins#readme). Note that this feature is available in `postcss-preset-mantine` starting from version 1.15.0.

Example of adding `clearfix` and `circle` mixins:

Then you can use these mixins in your styles:

[use-matches hook](#use-matches-hook)
-------------------------------------

New `use-matches` hook exported from `@mantine/core` is an alternative to [use-media-query](https://mantine.dev/hooks/use-media-query/) if you need to match multiple media queries and values. It accepts an object with media queries as keys and values at given breakpoint as values.

Note that `use-matches` hook uses the same logic as [use-media-query](https://mantine.dev/hooks/use-media-query/) under the hood, it is not recommended to be used as a primary source of responsive styles, especially if you have ssr in your application.

In the following example:

*   Starting from `theme.breakpoints.lg`, color will be `red.9`
*   Between `theme.breakpoints.sm` and `theme.breakpoints.lg`, color will be `orange.9`
*   Below `theme.breakpoints.sm`, color will be `blue.9`

Box with color that changes based on screen size

[BarChart value label](#barchart-value-label)
---------------------------------------------

[BarChart](https://mantine.dev/charts/bar-chart/) now supports `withBarValueLabel` prop that allows displaying value label on top of each bar:

[Documentation updates](#documentation-updates)
-----------------------------------------------

*   New [usage with emotion](https://mantine.dev/styles/emotion/) guide
*   [6.x -> 7.x](https://mantine.dev/guides/6x-to-7x/) guide has been updated to include migration to [@mantine/emotion](https://mantine.dev/styles/emotion/) package
*   [use-field](https://mantine.dev/form/use-field/) hook documentation
*   [Uncontrolled form mode](https://mantine.dev/form/uncontrolled/) examples now include usage of `form.key()` function
*   [Custom PostCSS mixins](https://mantine.dev/styles/postcss-preset/#custom-mixins) documentation
*   [use-matches](https://mantine.dev/styles/responsive/#use-matches-hook) hook documentation has been added to the responsive guide

[Other changes](#other-changes)
-------------------------------

*   Advanced templates now include GitHub workflows to run tests on CI
*   [AspectRatio](https://mantine.dev/core/aspect-ratio/) component has been migrated to [aspect-ratio](https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio) CSS property</content>
</page>

<page>
  <title>Version v7.8.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-8-0/</url>
  <content>[Auto convert px to rem in .css files](#auto-convert-px-to-rem-in-css-files)
----------------------------------------------------------------------------

Start from version `1.14.4` [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/) supports `autoRem` option that can be used to automatically convert all `px` values to `rem` units in `.css` files.

This option works similar to `rem` function. The following code:

Will be transformed to:

Note that `autoRem` converts only CSS properties, values in `@media` queries are not converted automatically – you still need to use `em` function to convert them.

`autoRem` option does not convert values in the following cases:

*   Values in `calc()`, `var()`, `clamp()` and `url()` functions
*   Values in `content` property
*   Values that contain `rgb()`, `rgba()`, `hsl()`, `hsla()` colors

If you want to convert above values to rem units, use `rem` function manually.

[Uncontrolled form mode](#uncontrolled-form-mode)
-------------------------------------------------

[useForm](https://mantine.dev/form/use-form/) hook now supports [uncontrolled mode](https://mantine.dev/form/uncontrolled/). Uncontrolled mode provides a significant performance improvement by reducing the number of re-renders and the amount of state updates almost to 0. Uncontrolled mode is now the recommended way to use the `useForm` hook for almost all use cases.

Example of uncontrolled form (`form.values` are not updated):

Form values:

{
  "name": "",
  "email": ""
}

Submitted values:

–

[form.getValues](#formgetvalues)
--------------------------------

With uncontrolled mode, you can not access `form.values` as a state variable, instead, you can use `form.getValues()` method to get current form values at any time:

`form.getValues()` always returns the latest form values, it is safe to use it after state updates:

[form.watch](#formwatch)
------------------------

`form.watch` is an effect function that allows subscribing to changes of a specific form field. It accepts field path and a callback function that is called with new value, previous value, touched and dirty field states:

[Customize Popover middlewares](#customize-popover-middlewares)
---------------------------------------------------------------

You can now customize `middlewares` options in [Popover](https://mantine.dev/core/popover/) component and in other components ([Menu](https://mantine.dev/core/menu/), [Select](https://mantine.dev/core/select/), [Combobox](https://mantine.dev/core/combobox/), etc.) based on Popover.

To customize [Floating UI](https://floating-ui.com/) middlewares options, pass them as an object to the `middlewares` prop. For example, to change [shift](https://floating-ui.com/docs/shift) middleware padding to `20px` use the following configuration:

[use-fetch hook](#use-fetch-hook)
---------------------------------

New [use-fetch](https://mantine.dev/hooks/use-fetch/) hook:

[use-map hook](#use-map-hook)
-----------------------------

New [use-map](https://mantine.dev/hooks/use-map/) hook:

| Page | Views last month |  |
| --- | --- | --- |
| /hooks/use-media-query | 4124 |  |
| /hooks/use-clipboard | 8341 |  |
| /hooks/use-fetch | 9001 |  |

[use-set hook](#use-set-hook)
-----------------------------

New [use-set](https://mantine.dev/hooks/use-set/) hook:

Add new scope

Duplicate scopes are not allowed

`@mantine``@mantine-tests``@mantinex`

[use-debounced-callback hook](#use-debounced-callback-hook)
-----------------------------------------------------------

New [use-debounced-callback](https://mantine.dev/hooks/use-debounced-callback/) hook:

[use-throttled-state hook](#use-throttled-state-hook)
-----------------------------------------------------

New [use-throttled-state](https://mantine.dev/hooks/use-throttled-state/) hook:

[use-throttled-value hook](#use-throttled-value-hook)
-----------------------------------------------------

New [use-throttled-value](https://mantine.dev/hooks/use-throttled-value/) hook:

[use-throttled-callback hook](#use-throttled-callback-hook)
-----------------------------------------------------------

New [use-throttled-callback](https://mantine.dev/hooks/use-throttled-callback/) hook:

[use-orientation hook](#use-orientation-hook)
---------------------------------------------

New [use-orientation](https://mantine.dev/hooks/use-orientation/) hook:

Angle: `0`

Type: `landscape-primary`

[use-is-first-render hook](#use-is-first-render-hook)
-----------------------------------------------------

New [use-is-first-render](https://mantine.dev/hooks/use-is-first-render/) hook:

[Documentation updates](#documentation-updates)
-----------------------------------------------

*   New [uncontrolled form](https://mantine.dev/form/uncontrolled/) guide
*   [onValuesChange](https://mantine.dev/form/values/#onvalueschange) documentation has been added
*   A new demo has been added to [tiptap](https://mantine.dev/x/tiptap/#typography-styles) that shows how to customize typography styles
*   A new guide has been added to customize [Popover](https://mantine.dev/core/popover/#customize-middleware-options) middlewares

[Other changes](#other-changes)
-------------------------------

*   [NumberInput](https://mantine.dev/core/number-input/) now supports `withKeyboardEvents={false}` to disable up/down arrow keys handling
*   [Popover](https://mantine.dev/core/popover/) [shift](https://floating-ui.com/docs/shift) middleware now has default padding of 5px to offset dropdown near the edge of the viewport</content>
</page>

<page>
  <title>Version v7.7.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-7-0/</url>
  <content>[Virtual colors](#virtual-colors)
---------------------------------

Virtual color is a special color which values should be different for light and dark color schemes. To define a virtual color, use `virtualColor` function which accepts an object with the following properties as a single argument:

*   `name` – color name, must be the same as the key in `theme.colors` object
*   `light` – a key of `theme.colors` object for light color scheme
*   `dark` – a key of `theme.colors` object for dark color scheme

To see the demo in action, switch between light and dark color schemes (`Ctrl + J`):

This box has virtual background color, it is pink in dark mode and cyan in light mode

[FloatingIndicator component](#floatingindicator-component)
-----------------------------------------------------------

New [FloatingIndicator](https://mantine.dev/core/floating-indicator/) component:

[ScatterChart component](#scatterchart-component)
-------------------------------------------------

New [ScatterChart](https://mantine.dev/charts/scatter-chart/) component:

[colorsTuple function](#colorstuple-function)
---------------------------------------------

New `colorsTuple` function can be used to:

*   Use single color as the same color for all shades
*   Transform dynamic string arrays to Mantine color tuple (the array should still have 10 values)

[use-mutation-observer hook](#use-mutation-observer-hook)
---------------------------------------------------------

New [useMutationObserver](https://mantine.dev/hooks/use-mutation-observer/) hook:

Press Ctrl + Shift + L to change direction

Direction was changed to: Not changed yet

[use-state-history hook](#use-state-history-hook)
-------------------------------------------------

New [useStateHistory](https://mantine.dev/hooks/use-state-history/) hook:

Current value: 1

{
  "history": \[
    1
  \],
  "current": 0
}

[Axis labels](#axis-labels)
---------------------------

[AreaChart](https://mantine.dev/charts/area-chart/), [BarChart](https://mantine.dev/charts/bar-chart/) and [LineChart](https://mantine.dev/charts/line-chart/) components now support `xAxisLabel` and `yAxisLabel` props:

[Documentation updates](#documentation-updates)
-----------------------------------------------

*   New section has been added to the [responsive guide](https://mantine.dev/styles/responsive/#hidden-and-visible-from-as-classes) on how to use `mantine-hidden-from-{x}` and `mantine-visible-from-{x}` classes.
*   [Jest](https://mantine.dev/guides/jest/) and [Vitest](https://mantine.dev/guides/vitest/) guides configuration has been updated to include mocks for `window.HTMLElement.prototype.scrollIntoView`
*   [CSS variables](https://mantine.dev/styles/css-variables/) documentation has been updated to include more information about typography and colors variables

[Help center updates](#help-center-updates)
-------------------------------------------

New articles added to the [help center](https://help.mantine.dev/):

*   [Can I use SegmentedControl with empty value?](https://help.mantine.dev/q/segmented-control-no-value)
*   [Is there a comparison with other libraries?](https://help.mantine.dev/q/other-libs)
*   [Can I use Mantine with Vue/Svelte/Angular/etc.?](https://help.mantine.dev/q/vue-svelte-angular)
*   [How can I test Select/MultiSelect components?](https://help.mantine.dev/q/combobox-testing)

[Other changes](#other-changes)
-------------------------------

*   [SegmentedControl](https://mantine.dev/core/segmented-control/) indicator positioning logic has been migrated to [FloatingIndicator](https://mantine.dev/core/floating-indicator/). It is now more performant and works better when used inside elements with `transform: scale()`.
*   New [use-mounted](https://mantine.dev/hooks/use-mounted/) hook
*   [Sparkline](https://mantine.dev/charts/sparkline/) now supports `connectNulls` and `areaProps` props
*   [Select](https://mantine.dev/core/select/), [MultiSelect](https://mantine.dev/core/multi-select/), [Autocomplete](https://mantine.dev/core/autocomplete/) and [TagsInput](https://mantine.dev/core/tags-input/) components now support `scrollAreaProps` prop to pass props down to the [ScrollArea](https://mantine.dev/core/scroll-area/) component in the dropdown
*   [Transition](https://mantine.dev/core/transition/) component now supports 4 new transitions: `fade-up`, `fade-down`, `fade-left`, `fade-right`
*   Default [Modal](https://mantine.dev/core/modal/) transition was changed to `fade-down`. This change resolves issues with [SegmentedControl](https://mantine.dev/core/segmented-control/) indicator positioning when used inside modals.
*   You can now reference headings font sizes and line heights in `fz` and `lh` style props with `h1`, `h2`, `h3`, `h4`, `h5`, `h6` values</content>
</page>

<page>
  <title>Version v7.6.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-6-0/</url>
  <content>[Container queries support](#container-queries-support)
-------------------------------------------------------

You can now use [container queries](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_container_queries) with Mantine components. `rem` and `em` functions from [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/#remem-functions) are available in container queries staring from `postcss-preset-mantine@1.13.0`.

Resize parent element to see container query in action

[RadarChart component](#radarchart-component)
---------------------------------------------

New [RadarChart](https://mantine.dev/charts/radar-chart/) component:

[FocusTrap.InitialFocus component](#focustrapinitialfocus-component)
--------------------------------------------------------------------

[FocusTrap.InitialFocus](https://mantine.dev/core/focus-trap/) is a new component that adds a visually hidden element which will receive the focus when the focus trap is activated. Once `FocusTrap.InitialFocus` loses focus, it is removed from the tab order.

For example, it is useful if you do not want to focus any elements inside the [Modal](https://mantine.dev/core/modal/) when it is opened:

[New MantineProvider props](#new-mantineprovider-props)
-------------------------------------------------------

[MantineProvider](https://mantine.dev/theming/mantine-provider/) now includes more props to control how styles are generated and injected. These props are useful if you use Mantine as a headless library and in test environments.

### [deduplicateCssVariables](#deduplicatecssvariables)

`deduplicateCssVariables` prop determines whether CSS variables should be deduplicated: if a CSS variable has the same value as in the default theme, it is not added in the runtime. By default, it is set to `true`. If set to `false`, all Mantine CSS variables will be added in `<style />` tag, even if they have the same value as in the default theme.

### [withStaticClasses](#withstaticclasses)

`withStaticClasses` determines whether components should have static classes, for example, `mantine-Button-root`. By default, static classes are enabled, to disable them set `withStaticClasses` to `false`:

### [withGlobalClasses](#withglobalclasses)

`withGlobalClasses` determines whether global classes should be added with `<style />` tag. Global classes are required for `hiddenFrom`/`visibleFrom` and `lightHidden`/`darkHidden` props to work. By default, global classes are enabled, to disable them set `withGlobalClasses` to `false`. Note that disabling global classes may break styles of some components.

[HeadlessMantineProvider](#headlessmantineprovider)
---------------------------------------------------

`HeadlessMantineProvider` is an alternative to [MantineProvider](https://mantine.dev/theming/mantine-provider/) that should be used when you want to use Mantine as a headless UI library. It removes all features that are related to Mantine styles:

*   Mantine classes are not applied to components
*   Inline CSS variables are not added with `style` attribute
*   All color scheme related features are removed
*   Global styles are not generated

Limitations of `HeadlessMantineProvider`:

*   [Color scheme switching](https://mantine.dev/theming/color-schemes/) will not work. If your application has a dark mode, you will need to implement it on your side.
*   Props that are related to styles in all components (`color`, `radius`, `size`, etc.) will have no effect.
*   Some components that rely on styles will become unusable ([Grid](https://mantine.dev/core/grid/), [SimpleGrid](https://mantine.dev/core/simple-grid/), [Container](https://mantine.dev/core/container/), etc.).
*   `lightHidden`/`darkHidden`, `visibleFrom`/`hiddenFrom` props will not work.
*   [Style props](https://mantine.dev/styles/style-props/) will work only with explicit values, for example `mt="xs"` will not work, but `mt={5}` will.

To use `HeadlessMantineProvider`, follow the [getting started guide](https://mantine.dev/getting-started/) and replace `MantineProvider` with `HeadlessMantineProvider`. Note that you do not need to use [ColorSchemeScript](https://mantine.dev/theming/color-schemes/#colorschemescript) in your application, it will not have any effect, you can ignore this part of the guide.

[Sparkline trendColors](#sparkline-trendcolors)
-----------------------------------------------

[Sparkline](https://mantine.dev/charts/sparkline/) now supports `trendColors` prop to change chart color depending on the trend. The prop accepts an object with `positive`, `negative` and `neutral` properties:

*   `positive` - color for positive trend (first value is less than the last value in `data` array)
*   `negative` - color for negative trend (first value is greater than the last value in `data` array)
*   `neutral` - color for neutral trend (first and last values are equal)

`neutral` is optional, if not provided, the color will be the same as `positive`.

Positive trend:

Negative trend:

Neutral trend:

[RichTextEditor tasks extension](#richtexteditor-tasks-extension)
-----------------------------------------------------------------

[RichTextEditor](https://mantine.dev/x/tiptap/#tasks) now supports tasks [tiptap extension](https://tiptap.dev/docs/editor/api/nodes/task-list):

[renderOption prop](#renderoption-prop)
---------------------------------------

[Select](https://mantine.dev/core/select/), [MultiSelect](https://mantine.dev/core/multi-select/), [TagsInput](https://mantine.dev/inputs/tags-input/) and [Autocomplete](https://mantine.dev/inputs/autocomplete/) components now support `renderOption` prop that allows to customize option rendering:

  

[Styles improvements](#styles-improvements)
-------------------------------------------

All Mantine components have been migrated to [logical CSS properties](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_logical_properties_and_values) (as a replacement for rtl styles) and [:where](https://developer.mozilla.org/en-US/docs/Web/CSS/:where) pseudo-class (as a replacement for [private CSS variables](https://help.mantine.dev/q/private-css-variables)). These changes should not impact the usage of Mantine components, but now Mantine CSS files have smaller size. For example, `@mantine/core/styles.css` now has ~ 8% smaller size (192kb -> 177kb).

[Pass props to inner recharts components](#pass-props-to-inner-recharts-components)
-----------------------------------------------------------------------------------

You can now pass props down to recharts [Bar](https://recharts.org/en-US/api/Bar), [Area](https://recharts.org/en-US/api/Area) and [Line](https://recharts.org/en-US/api/Line) components with `barProps`, `areaProps` and `lineProps` props on [BarChart](https://mantine.dev/charts/bar-chart/), [AreaChart](https://mantine.dev/charts/area-chart/) and [LineChart](https://mantine.dev/charts/line-chart/) components.

All props accept either an object with props or a function that receives series data as an argument and returns an object with props.

[PieChart percent labels](#piechart-percent-labels)
---------------------------------------------------

[PieChart](https://mantine.dev/charts/pie-chart/) now supports `percent` labels:

[Documentation updates](#documentation-updates)
-----------------------------------------------

*   [Responsive styles guide](https://mantine.dev/styles/responsive/) now includes new sections about responsive props and container queries
*   New [HeadlessMantineProvider section](https://mantine.dev/styles/unstyled/#headlessmantineprovider) in the unstyled guide
*   [ActionIcon](https://mantine.dev/core/action-icon/) now includes additional documentation section on how to make the button the same size as Mantine inputs
*   [AreaChart](https://mantine.dev/charts/area-chart/) now includes an example of how to rotate x-axis labels
*   [Redwood guide](https://mantine.dev/guides/redwood/) has been updated to the latest redwood version with Vite

[Help center updates](#help-center-updates)
-------------------------------------------

New articles added to the [help center](https://help.mantine.dev/):

*   [Browser zooms in when input is focused. What should I do?](https://help.mantine.dev/q/browser-zooms-on-focus)
*   [It is not possible to pinch to zoom when Modal is opened. What should I do?](https://help.mantine.dev/q/pinch-to-zoom-modal)
*   [How can I lock scroll in my application?](https://help.mantine.dev/q/how-to-lock-scroll)
*   [Where can I find the roadmap?](https://help.mantine.dev/q/roadmap)
*   [How can I change Tabs border color?](https://help.mantine.dev/q/tabs-border-color)
*   [How can I change inputs focus styles?](https://help.mantine.dev/q/input-focus-styles)
*   [Can I use Mantine with Emotion/styled-components/tailwindcss?](https://help.mantine.dev/q/third-party-styles)
*   [Is there a way to add mask to Mantine input?](https://help.mantine.dev/q/input-mask)
*   [How to align input with a button in a flex container?](https://help.mantine.dev/q/align-input-button)
*   [How can I change component color prop value depending on the color scheme?](https://help.mantine.dev/q/color-scheme-color)

[Other changes](#other-changes)
-------------------------------

*   [use-list-state](https://mantine.dev/hooks/use-list-state/) hook now supports `swap` handler
*   `form.setFieldValue` now supports callback function as an argument
*   `px`, `py`, `mx` and `my` [style props](https://mantine.dev/styles/style-props/) now use logical CSS properties `padding-inline`, `padding-block`, `margin-inline` and `margin-block` instead of `padding-left`, `padding-right`, etc.
*   All components now support `me`, `ms`, `ps`, `pe` [style props](https://mantine.dev/styles/style-props/) to set `margin-inline-end`, `margin-inline-start`, `padding-inline-start` and `padding-inline-end` CSS properties
*   [Tooltip](https://mantine.dev/core/tooltip/), [Popover](https://mantine.dev/core/popover/) and other components based on `Popover` now support `floatingStrategy` prop to control [Floating UI strategy](https://floating-ui.com/docs/usefloating#strategy)
*   All `@mantine/charts` components now support `children` prop, which passes children to the root recharts component
*   [use-resize-observer](https://mantine.dev/hooks/use-resize-observer/) and [use-element-size](https://mantine.dev/hooks/use-element-size/) hooks now support [ResizeObserver options](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/observe#parameters) as hook argument
*   [Select](https://mantine.dev/core/select/), [MultiSelect](https://mantine.dev/core/multi-select/) and [TagsInput](https://mantine.dev/inputs/tags-input/) now support `onClear` prop, the function is called when clear button is clicked
*   [MultiSelect](https://mantine.dev/core/multi-select/) and [TagsInput](https://mantine.dev/inputs/tags-input/) now support `onRemove` prop, the function is called with removed item value when one of the items is deselected
*   [Redwood template](https://github.com/mantinedev/redwood-template) has been updated to the latest redwood version with Vite</content>
</page>

<page>
  <title>Version v7.5.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-5-0/</url>
  <content>[DonutChart component](#donutchart-component)
---------------------------------------------

New [DonutChart](https://mantine.dev/charts/donut-chart/) component:

[PieChart component](#piechart-component)
-----------------------------------------

New [PieChart](https://mantine.dev/charts/pie-chart/) component:

[@mantine/dates value formatter](#mantinedates-value-formatter)
---------------------------------------------------------------

[DatePickerInput](https://mantine.dev/dates/date-picker-input/), [MonthPickerInput](https://mantine.dev/dates/month-picker-input/) and [YearPickerInput](https://mantine.dev/dates/year-picker-input/) now support `valueFormatter` prop.

`valueFormatter` is a more powerful alternative to `valueFormat` prop. It allows formatting value label with a custom function. The function is the same for all component types (`default`, `multiple` and `range`) – you need to perform additional checks inside the function to handle different types.

Example of using a custom formatter function with `type="multiple"`:

[@mantine/dates consistent weeks](#mantinedates-consistent-weeks)
-----------------------------------------------------------------

You can now force each month to have 6 weeks by setting `consistentWeeks: true` on [DatesProvider](https://mantine.dev/dates/getting-started/). This is useful if you want to avoid layout shifts when month changes.

[Charts series label](#charts-series-label)
-------------------------------------------

It is now possible to change series labels with `label` property in `series` object. This feature is supported in [AreaChart](https://mantine.dev/charts/area-chart/), [BarChart](https://mantine.dev/charts/bar-chart/) and [LineChart](https://mantine.dev/charts/line-chart/) components.

[Charts value formatter](#charts-value-formatter)
-------------------------------------------------

All `@mantine/charts` components now support `valueFormatter` prop, which allows formatting value that is displayed on the y axis and inside the tooltip.

[Headings text wrap](#headings-text-wrap)
-----------------------------------------

New [Title](https://mantine.dev/core/title/) `textWrap` prop sets [text-wrap](https://developer.mozilla.org/en-US/docs/Web/CSS/text-wrap) CSS property. It controls how text inside an element is wrapped.

### Lorem, ipsum dolor sit amet consectetur adipisicing elit. Quasi voluptatibus inventore iusto cum dolore molestiae perspiciatis! Totam repudiandae impedit maxime!

You can also set `textWrap` on [theme](https://mantine.dev/theming/theme-object/):

If set on theme, `textWrap` is also applied to headings in [TypographyStylesProvider](https://mantine.dev/core/typography-styles-provider/)

[mod prop](#mod-prop)
---------------------

All components now support `mod` prop, which allows adding data attributes to the root element:

[Documentation updates](#documentation-updates)
-----------------------------------------------

*   New [testing with Vitest guide](https://mantine.dev/guides/vitest/)
*   [NativeSelect](https://mantine.dev/core/native-select/#with-dividers) with dividers demo
*   [Popover](https://mantine.dev/core/popover/#middlewares) `shift` and `flip` middlewares documentation
*   [Combobox](https://mantine.dev/core/combobox/#popover-props) props related to [Popover](https://mantine.dev/core/popover/) documentation
*   [Loading styles from CDN guide](https://mantine.dev/styles/mantine-styles/#loading-styles-from-cdn)
*   [Anchor](https://mantine.dev/core/anchor/#text-props) now includes additional documentation on how to use [Text](https://mantine.dev/core/text/) props
*   [Pagination](https://mantine.dev/core/pagination/) now includes props tables for all compound components
*   A more detailed breakdown of [browser support](https://mantine.dev/about/#browser-support) has been added to the about page

[Help center updates](#help-center-updates)
-------------------------------------------

New articles added to the [help center](https://help.mantine.dev/):

*   [Can I use Mantine with Astro?](https://help.mantine.dev/q/can-i-use-mantine-with-astro)
*   [How can I contribute to the library?](https://help.mantine.dev/q/how-can-i-contribute)
*   [How can I add dynamic CSS styles?](https://help.mantine.dev/q/dynamic-css-styles)
*   [How can I load fonts in Next.js?](https://help.mantine.dev/q/next-load-fonts)
*   [How can I load fonts in Vite?](https://help.mantine.dev/q/vite-load-fonts)
*   [Is there a floating action button component?](https://help.mantine.dev/q/floating-action-button)
*   [How to change inputs placeholder color?](https://help.mantine.dev/q/inputs-placeholder-color)
*   [I do not have styles in my dates components...](https://help.mantine.dev/q/dates-missing-styles)

[Other changes](#other-changes)
-------------------------------

*   [Checkbox.Group](https://mantine.dev/core/checkbox/), [Radio.Group](https://mantine.dev/core/radio/) and [Switch.Group](https://mantine.dev/core/switch/) now support `readOnly` prop
*   [ActionIcon](https://mantine.dev/core/action-icon/) now has `loading` state animation
*   [SegmentedControl](https://mantine.dev/core/segmented-control/) now supports `withItemsBorder` prop which allows removing border between items
*   [Progress](https://mantine.dev/core/progress/) now supports `transitionDuration` prop which controls section width animation duration
*   [Textarea](https://mantine.dev/core/textarea/) and [JsonInput](https://mantine.dev/core/json-input/) components now support `resize` prop, which allows setting `resize` CSS property on the input
*   `@mantine/hooks` package now exports [readLocalStorageValue and readSessionStorageValue](https://mantine.dev/hooks/use-local-storage/#read-storage-value) function to get value from storage outside of React components</content>
</page>

<page>
  <title>Version v7.3.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-3-0/</url>
  <content>[smaller-than and larger-than mixins](#smaller-than-and-larger-than-mixins)
---------------------------------------------------------------------------

`smaller-than` and `larger-than` mixins can be used to create styles that will be applied only when the screen is smaller or larger than specified breakpoint. Note that to use these mixins, you need to update [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/) to version `1.11.0` or higher.

Will be transformed to:

You can also use `smaller-than` and `larger-than` mixins with [mantine breakpoints](https://mantine.dev/styles/responsive/#breakpoints-variables-in-css-modules):

[Form schema resolvers packages](#form-schema-resolvers-packages)
-----------------------------------------------------------------

`@mantine/form` schema validation resolver packages are now available as [separate packages](https://mantine.dev/form/schema-validation/). Moving resolvers to separate packages allows making them type-safe and fully tested. Old resolvers are still exported from `@mantine/form` package – you will be able to use them without any changes until 8.0.0 release.

The new packages are drop-in replacements for old resolvers, they have the same API and can be used in the same way.

Example of zod resolver:

[rem/em functions improvements](#remem-functions-improvements)
--------------------------------------------------------------

[rem and em](https://mantine.dev/styles/rem/) function now support space-separated values. This feature is available both in `rem` function exported from `@mantine/core` package and [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/). Note that you need to update [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/) to `1.11.0` to use this feature.

All components props that are converted to `rem` units now support space-separated values as well. For example, space-separated values can be used in `radius` prop of [Modal](https://mantine.dev/core/modal/) component:

[component and renderRoot props for non-polymorphic components](#component-and-renderroot-props-for-non-polymorphic-components)
-------------------------------------------------------------------------------------------------------------------------------

All Mantine components now support `component` and `renderRoot` props event if they are not [polymorphic](https://mantine.dev/guides/polymorphic/). The difference between polymorphic and non-polymorphic components is that polymorphic components include the full set of props of the component passed to the `component` prop, while non-polymorphic components only include props that are specific to the original component. It is done this way to improve TypeScript performance.

[Outline Checkbox and Radio variant](#outline-checkbox-and-radio-variant)
-------------------------------------------------------------------------

[Checkbox](https://mantine.dev/core/checkbox/) and [Radio](https://mantine.dev/core/radio/) components now support `outline` variant:

Outline indeterminate Checkbox

[HueSlider and AlphaSlider components](#hueslider-and-alphaslider-components)
-----------------------------------------------------------------------------

[HueSlider and AlphaSlider](https://mantine.dev/core/color-picker/) components were added back:

  

[Button loading state animation](#button-loading-state-animation)
-----------------------------------------------------------------

[Button](https://mantine.dev/core/button/) component now has loading state animation:

[Drawer offset](#drawer-offset)
-------------------------------

[Drawer](https://mantine.dev/core/drawer/) now supports `offset` prop. It changes drawer offset from the edge of the viewport:

[z-index CSS variables](#z-index-css-variables)
-----------------------------------------------

You can now use Mantine z-index CSS variables:

*   `--mantine-z-index-app` – value `100`
*   `--mantine-z-index-modal` – value `200`
*   `--mantine-z-index-popover` – value `300`
*   `--mantine-z-index-overlay` – value `400`
*   `--mantine-z-index-max` – value `9999`

Example of using `--mantine-z-index-modal` variable:

[Improved dark color scheme colors](#improved-dark-color-scheme-colors)
-----------------------------------------------------------------------

`theme.colors.dark` colors were slightly changed to improve contrast and make it easier to read text. You can preview new colors on [this page](https://mantine.dev/theming/colors/#default-colors). New colors values are:

If you prefer old colors, change theme settings on `MantineProvider`:

[Documentation updates](#documentation-updates)
-----------------------------------------------

*   Schema-based validation with `@mantine/form` now has a [dedicated page](https://mantine.dev/form/schema-validation/). It includes more examples for basic, nested and list fields validation for each resolver.
*   [Autocomplete](https://mantine.dev/core/autocomplete/), [Select](https://mantine.dev/core/select/), [MultiSelect](https://mantine.dev/core/multi-select/) and [TagsInput](https://mantine.dev/core/tags-input/) now include new demos that show how to customize dropdown behavior and styles.
*   Example of using Mantine with disabled JavaScript was added to the [color schemes guide](https://mantine.dev/theming/color-schemes/#with-disabled-javascript).
*   [Pagination](https://mantine.dev/core/pagination/) now includes an additional example with chunked content handling.
*   A new section about dayjs localization with Next.js app router and server components has been added to the [dates getting started page](https://mantine.dev/dates/getting-started/#localization-and-server-components)
*   [Modals manager](https://mantine.dev/x/modals/#modal-props) now includes a guide on how to pass props down to the underlying [Modal](https://mantine.dev/core/modal/) component.
*   [Slider](https://mantine.dev/core/slider/) now has sections about decimal values and `minRange` prop.
*   You can now view all 200+ releases with release dates on the [all releases page](https://mantine.dev/changelog/all-releases/).

[Other changes](#other-changes)
-------------------------------

*   [use-hash](https://mantine.dev/hooks/use-hash/) hook now supports `getInitialValueInEffect: false` option to get initial value during state initialization.
*   New `useMantineColorScheme({ keepTransitions: true })` option allows keeping transitions when color scheme changes. Note that it is `false` by default.
*   All templates were migrated to [yarn v4](https://yarnpkg.com/blog/release/4.0) – this change significantly improves installation speed.
*   [TypographyStylesProvider](https://mantine.dev/core/typography-styles-provider/) now has styles for `<kbd />` element.
*   [MultiSelect](https://mantine.dev/core/multi-select/) and [TagsInput](https://mantine.dev/core/tags-input/) components now support `hiddenValuesDivider` prop. It allows customizing divider character between values in `value` prop of the hidden input.
*   [Grid](https://mantine.dev/core/grid/) component now supports `overflow` prop, which allows controlling `overflow` CSS property on the root element. It is `hidden` by default.
*   [Modal](https://mantine.dev/core/modal/) and [Drawer](https://mantine.dev/core/drawer/) components now support `removeScrollProps` prop. It allows configuring [react-remove-scroll](https://github.com/theKashey/react-remove-scroll).
*   [AppShell](https://mantine.dev/core/app-shell/) now supports `offsetScrollbars` prop. It determines whether scrollbars should be offset, it is `true` by default. The logic of scrollbars offset is controlled by [react-remove-scroll](https://github.com/theKashey/react-remove-scroll).
*   [Menu](https://mantine.dev/core/menu/) now supports `trigger="click-hover"` prop, to open menu both on click and on hover.
*   It is now possible to set `keepMounted` prop on [Tabs.Panel](https://mantine.dev/core/tabs/) components individually, not only on `Tabs` component.
*   [mantine-flagpack](https://mantinedev.github.io/mantine-flagpack/) has been migrated to support `7.x` versions of `@mantine/core`. To use it, update `mantine-flagpack` to `4.0.0`.
*   [vite-template](https://github.com/mantinedev/vite-template) was migrated from Jest to [Vitest](https://vitest.dev/).
*   The main [Mantine repository](https://github.com/mantinedev/mantine) was migrated to [yarn v4](https://yarnpkg.com/blog/release/4.0). The process of getting started locally [was changed](https://mantine.dev/contribute/#get-started-with-mantine-locally)
*   `@mantine/ds` package has been deprecated. You can use `@mantinex/mantine-logo` package to use `MantineLogo` component in your project.</content>
</page>

<page>
  <title>Version v7.4.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-4-0/</url>
  <content>[@mantine/charts](#mantinecharts)
---------------------------------

New [@mantine/charts](https://mantine.dev/charts/getting-started/) package provides a set of components to build charts and graphs. All components are based on [recharts](https://recharts.org/en-US/). Currently, the package provides [AreaChart](https://mantine.dev/charts/area-chart/), [BarChart](https://mantine.dev/charts/bar-chart/), [LineChart](https://mantine.dev/charts/line-chart/) and [Sparkline](https://mantine.dev/charts/sparkline/) components. More components will be added in the next minor releases.

[AreaChart component](#areachart-component)
-------------------------------------------

New [AreaChart](https://mantine.dev/charts/area-chart/) component:

[LineChart component](#linechart-component)
-------------------------------------------

New [LineChart](https://mantine.dev/charts/line-chart/) component:

[BarChart component](#barchart-component)
-----------------------------------------

New [BarChart](https://mantine.dev/charts/bar-chart/) component:

[Sparkline component](#sparkline-component)
-------------------------------------------

New [Sparkline](https://mantine.dev/charts/sparkline/) component:

[OKLCH colors support](#oklch-colors-support)
---------------------------------------------

You can now use [OKLCH](https://oklch.com/) colors in `theme.colors`. OKLCH color model has [88.18% browser support](https://caniuse.com/mdn-css_types_color_oklch), it is supported in all modern browsers. OKLCH model provides 30% more colors than HSL model and has [several other advantages](https://evilmartians.com/chronicles/oklch-in-css-why-quit-rgb-hsl).

Example of adding OKLCH color to the theme:

[autoContrast](#autocontrast)
-----------------------------

New `theme.autoContrast` property controls whether text color should be changed based on the given `color` prop in the following components:

*   [ActionIcon](https://mantine.dev/core/action-icon/) with `variant="filled"` only
*   [Alert](https://mantine.dev/core/alert/) with `variant="filled"` only
*   [Avatar](https://mantine.dev/core/avatar/) with `variant="filled"` only
*   [Badge](https://mantine.dev/core/badge/) with `variant="filled"` only
*   [Button](https://mantine.dev/core/button/) with `variant="filled"` only
*   [Chip](https://mantine.dev/core/chip/) with `variant="filled"` only
*   [NavLink](https://mantine.dev/core/nav-link/) with `variant="filled"` only
*   [ThemeIcon](https://mantine.dev/core/theme-icon/) with `variant="filled"` only
*   [Checkbox](https://mantine.dev/core/checkbox/) with `variant="filled"` only
*   [Radio](https://mantine.dev/core/radio/) with `variant="filled"` only
*   [Tabs](https://mantine.dev/core/tabs/) with `variant="pills"` only
*   [SegmentedControl](https://mantine.dev/core/segmented-control/)
*   [Stepper](https://mantine.dev/core/stepper/)
*   [Pagination](https://mantine.dev/core/pagination/)
*   [Progress](https://mantine.dev/core/progress/)
*   [Indicator](https://mantine.dev/core/indicator/)
*   [Timeline](https://mantine.dev/core/timeline/)
*   [Spotlight](https://mantine.dev/x/spotlight/)
*   All [@mantine/dates](https://mantine.dev/dates/getting-started/) components that are based on [Calendar](https://mantine.dev/dates/calendar/) component

`autoContrast` can be set globally on the theme level or individually for each component via `autoContrast` prop, except for [Spotlight](https://mantine.dev/x/spotlight/) and [@mantine/dates](https://mantine.dev/dates/getting-started/) components, which only support global theme setting.

`autoContrast: true`

`autoContrast: false`

`autoContrast` checks whether the given color luminosity is above or below the `luminanceThreshold` value and changes text color to either `theme.white` or `theme.black` accordingly:

[Color functions improvements](#color-functions-improvements)
-------------------------------------------------------------

`alpha`, `lighten` and `darken` functions now support CSS variables (with [color-mix](https://caniuse.com/mdn-css_types_color_color-mix)) and OKLCH colors. All functions are available both in `@mantine/core` (`.ts`/`.js` files) and [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/) (`.css` files, requires version 1.12.0 or higher).

In `.css` files:

Will be transformed to:

In `.ts`/`.js` files:

Note that `alpha` function is a replacement for `rgba`. It was renamed to have a more clear meaning, as it can now be used with CSS variables and OKLCH colors. `rgba` function is still available as an alias for `alpha` function.

[enhanceGetInputProps](#enhancegetinputprops)
---------------------------------------------

`@mantine/form` now supports [enhanceGetInputProps](https://mantine.dev/form/get-input-props/#enhancegetinputprops). `enhanceGetInputProps` is a function that can be used to add additional props to the object returned by `form.getInputProps`. You can define it in `useForm` hook options. Its argument is an object with the following properties:

*   `inputProps` – object returned by `form.getInputProps` by default
*   `field` – field path, first argument of `form.getInputProps`, for example `name`, `user.email`, `users.0.name`
*   `options` – second argument of `form.getInputProps`, for example `{ type: 'checkbox' }`, can be used to pass additional options to `enhanceGetInputProps` function
*   `form` – form instance

Example of using `enhanceGetInputProps` to disable input based on field path:

Example of using `enhanceGetInputProps` to add additional props to the input based on option passed to `form.getInputProps`:

Your name

Your personal information is stored securely. (Just kidding!)

[form.initialize](#forminitialize)
----------------------------------

`@mantine/form` now supports `form.initialize` handler.

When called `form.initialize` handler sets `initialValues` and `values` to the same value and marks form as initialized. It can be used only once, next `form.initialize` calls are ignored.

`form.initialize` is useful when you want to sync form values with backend API response:

Example with [TanStack Query](https://tanstack.com/query/latest) (react-query):

Note that `form.initialize` will erase all values that were set before it was called. It is usually a good idea to set `readOnly` or `disabled` on all form fields before `form.initialize` is called to prevent data loss. You can implement this with [enhanceGetInputProps](https://mantine.dev/form/get-input-props/#enhancegetinputprops):

[valibot form resolver](#valibot-form-resolver)
-----------------------------------------------

`@mantine/form` now supports [validbot schema resolver](https://www.npmjs.com/package/mantine-form-valibot-resolver):

Basic fields validation:

Nested fields validation

List fields validation:

[ScrollArea scrollbars prop](#scrollarea-scrollbars-prop)
---------------------------------------------------------

[ScrollArea](https://mantine.dev/core/scroll-area/) now supports `scrollbars` prop, which allows controlling directions at which scrollbars should be rendered. Supported values are `x`, `y` and `xy`. If `scrollbars="y"` is set, only the vertical scrollbar will be rendered, and it will not be possible to scroll horizontally:

[Title lineClamp prop](#title-lineclamp-prop)
---------------------------------------------

[Title](https://mantine.dev/core/title/) component now supports `lineClamp` prop, which allows truncating text after a specified number of lines:

Lorem ipsum dolor sit amet consectetur adipisicing elit. Iure doloremque quas dolorum. Quo amet earum alias consequuntur quam accusamus a quae beatae, odio, quod provident consectetur non repudiandae enim adipisci?
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

[Primary color CSS variables](#primary-color-css-variables)
-----------------------------------------------------------

CSS variables for primary color are now available, you can use the following variables in your styles:

[Help center](#help-center)
---------------------------

[Help center](https://help.mantine.dev/) is a new website with guides, tutorials and frequently asked questions. Currently, it has 14 questions, more FAQs will be added in the next releases.

*   [Is there DataGrid component that I can use with Mantine?](https://help.mantine.dev/q/data-grid-i-need)
*   [MantineProvider was not found in component tree. What should I do?](https://help.mantine.dev/q/mantine-provider-missing)
*   [Can I use Mantine components as server components?](https://help.mantine.dev/q/server-components)
*   [Can I use Mantine with Create React App (CRA)?](https://help.mantine.dev/q/can-i-use-mantine-with-cra)
*   [How can I lint CSS files?](https://help.mantine.dev/q/how-to-setup-stylelint)
*   [How to update Mantine dependencies?](https://help.mantine.dev/q/how-to-update-dependencies)
*   [How can I add hover styles to an element?](https://help.mantine.dev/q/how-to-add-hover-styles)
*   [How can I get current color scheme value in JavaScript?](https://help.mantine.dev/q/how-to-get-color-scheme-value-in-js)
*   [Can I use private CSS variables to style components?](https://help.mantine.dev/q/private-css-variables)
*   [How can I disable all inputs/inputs group inside form?](https://help.mantine.dev/q/disable-all-inputs-in-form)
*   [How to use Dropzone with @mantine/form?](https://help.mantine.dev/q/how-to-use-dropzone-with-form)
*   [How to call a function when Modal/Drawer closes and animation completes?](https://help.mantine.dev/q/how-to-call-function-when-modal-closes)
*   [How to prevent Modal from closing?](https://help.mantine.dev/q/how-to-prevent-modal-from-closing)
*   [What is the difference between searchable Select and Autocomplete?](https://help.mantine.dev/q/select-autocomplete-difference)

[Documentation updates](#documentation-updates)
-----------------------------------------------

*   [form.getInputProps](https://mantine.dev/form/get-input-props/) guide now has a separate page. It describes `form.getInputProps`, `enhanceGetInputProps` and how to integrate `form.getInputProps` with custom inputs.
*   [assignRef](https://mantine.dev/hooks/use-merged-ref/#assignref-function) function documentation has been added.
*   [clampUseMovePosition](https://mantine.dev/hooks/use-move/#clampusemoveposition) function documentation has been added.
*   Additional documentation about hook arguments and types has been added to [use-hotkeys](https://mantine.dev/hooks/use-hotkeys/).
*   [UseListStateHandlers type](https://mantine.dev/hooks/use-list-state/#useliststatehandlers-type) documentation has been added.
*   [Functions reference](https://mantine.dev/guides/functions-reference/) page has been added. Currently, it contains all functions that are exported from `@mantine/hooks` package. It is planned to document functions from other packages in next releases.
*   Examples on how to change the close icon have been added to [Drawer](https://mantine.dev/core/drawer/#change-close-icon) and [Modal](https://mantine.dev/core/modal/#change-close-icon) components.
*   `variantColorsResolver` demos have been added to [ActionIcon](https://mantine.dev/core/action-icon/), [ThemeIcon](https://mantine.dev/core/theme-icon/) and [Badge](https://mantine.dev/core/badge/) components.

[Other changes](#other-changes)
-------------------------------

*   [RichTextEditor](https://mantine.dev/x/tiptap/) no longer depends on `@tabler/icons` package. It is no longer required to install `@tabler/icons` package to use `RichTextEditor` component. Icons used in the editor are now a part of the `@mantine/tiptap` package. This change improves bundling performance in several cases (mostly when using `RichTextEditor` in Next.js apps).
*   [Badge](https://mantine.dev/core/badge/) component now supports `circle` prop which makes the badge round.
*   You can now reference theme values in `ff` [style prop](https://mantine.dev/styles/style-props/) with `mono`, `text` and `heading` values: `<Box ff="mono" />`.
*   [RichTextEditor](https://mantine.dev/x/tiptap/) now has `RichTextEditor.Undo` and `RichTextEditor.Redo` controls.
*   A new `luminance` [color function](https://mantine.dev/styles/color-functions/) was added. It returns color luminance as a number between 0 and 1.
*   All components now support new `flex` [style prop](https://mantine.dev/styles/style-props/) which allows setting `flex` CSS property on the root element.
*   [Collapse](https://mantine.dev/core/collapse/) markup was reduced to single element, it can now be used in contexts that were previously not supported, for example, table rows.
*   `stepHoldDelay` and `stepHoldInterval` props have been added to [NumberInput](https://mantine.dev/core/number-input/).
*   [mantine-form-zod-resolver](https://github.com/mantinedev/mantine-form-zod-resolver) now supports `errorPriority` configuration which allows controlling the order of errors specified in the schema. This feature requires updating `mantine-form-zod-resolver` to version 1.1.0 or higher.
*   [CloseButton](https://mantine.dev/core/close-button/) now supports `icon` prop, which allows overriding default icon. It is useful when it is not possible to replace `CloseButton`, for example, in [Drawer](https://mantine.dev/core/drawer/) component.
*   [Select](https://mantine.dev/core/select/#onchange-handler) component now calls `onChange` with an additional argument – option object. It contains `label`, `value` and optional `disabled` properties.
*   It is now possible to define CSS variables in `styles` prop of all components.
*   New [use-in-viewport](https://mantine.dev/hooks/use-in-viewport/) hook
*   All Vite templates have been updated to Vite 5.0 and Vitest 1.0</content>
</page>

<page>
  <title>Version v7.2.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-2-0/</url>
  <content>[Community templates](#community-templates)
-------------------------------------------

You are welcome to share your GitHub templates with the community. Community templates are featured on the [getting started](https://mantine.dev/getting-started/) page. You can find a guide on how to create and submit a template [here](https://help.mantine.dev/q/submit-template).

Examples of templates that you can submit:

*   Next.js pages router + MDX + Mantine blog template
*   Next.js app router + Mantine + styled-components template
*   Vite + Mantine + Emotion template

[NumberFormatter component](#numberformatter-component)
-------------------------------------------------------

New [NumberFormatter](https://mantine.dev/core/number-formatter/) component allows to format numbers with thousands separators, decimal separators, and custom number of decimal places. It supports the same formatting related props as [NumberInput](https://mantine.dev/core/number-input/) component.

[Form actions](#form-actions)
-----------------------------

`@mantine/form` package now exports `createFormActions` function that can be used to [change form state](https://mantine.dev/form/actions/) from anywhere in your application. The mechanism of form actions is similar to [notifications system](https://mantine.dev/x/notifications/), [modals manager](https://mantine.dev/x/modals/) and other similar packages.

To use form actions, set `name` property in [use-form](https://mantine.dev/form/use-form/) settings:

Then call `createFormActions` function with the same form name as specified in `useForm` settings:

After that, you can use `demoFormActions` to change form state from anywhere in your application. For example, after a fetch request or after a user interaction with a component that does not have access to the form state:

[Table data prop](#table-data-prop)
-----------------------------------

[Table](https://mantine.dev/core/table/) component now supports `data` prop which can be used to generate table rows from given data:

Some elements from periodic table
| Element position | Atomic mass | Symbol | Element name |
| --- | --- | --- | --- |
| 6 | 12.011 | C | Carbon |
| 7 | 14.007 | N | Nitrogen |
| 39 | 88.906 | Y | Yttrium |
| 56 | 137.33 | Ba | Barium |
| 58 | 140.12 | Ce | Cerium |

[Table sticky header](#table-sticky-header)
-------------------------------------------

[Table](https://mantine.dev/core/table/) component now supports `stickyHeader` prop, which can be used to make the table header stick to the top of the table:

| Element position | Element name | Symbol | Atomic mass |
| --- | --- | --- | --- |
| 6 | Carbon | C | 12.011 |
| 7 | Nitrogen | N | 14.007 |
| 39 | Yttrium | Y | 88.906 |
| 56 | Barium | Ba | 137.33 |
| 58 | Cerium | Ce | 140.12 |Scroll page to see sticky thead

[Usage with Sass](#usage-with-sass)
-----------------------------------

It is now possible to use Mantine with [Sass](https://sass-lang.com/). You can find documentation on [this page](https://mantine.dev/styles/sass/). Note that it is still required to set up [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/) in order for all functions to work properly. Sass can be used as a replacement for [CSS modules](https://mantine.dev/styles/css-modules/) – it supports all features that CSS modules support.

You can find examples of Mantine + Sass usage in separate branches of templates:

*   [Next.js app router + Sass example](https://github.com/mantinedev/next-app-template/tree/sass)
*   [Vite + Sass example](https://github.com/mantinedev/vite-template/tree/sass)

[Inline loaders](#inline-loaders)
---------------------------------

[Loader](https://mantine.dev/core/loader/) component now supports `children` prop. The prop allows overriding the default loader with any React node. It is useful in components that support `loaderProps` ([Button](https://mantine.dev/core/button/), [LoadingOverlay](https://mantine.dev/core/loading-overlay/), [Dropzone](https://mantine.dev/x/dropzone/), etc.) – with `loaderProps.children` you can now display any React node instead of the loader.

[lightHidden and darkHidden props](#lighthidden-and-darkhidden-props)
---------------------------------------------------------------------

All Mantine components now support `lightHidden` and `darkHidden` props that can be used to hide components in a specific color scheme:

[light-root and dark-root mixins](#light-root-and-dark-root-mixins)
-------------------------------------------------------------------

New `light-root` and `dark-root` mixins were added to [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/). These mixins can be used to add color scheme specific styles to the `:root`/`html` element. Note that to use these mixins, you need to update `postcss-preset-mantine` to `1.9.0` or higher.

[Documentation updates](#documentation-updates)
-----------------------------------------------

*   New [Styles overview](https://mantine.dev/styles/styles-overview/) guide
*   New [Usage with Sass](https://mantine.dev/styles/sass/) guide
*   [Storybook guide](https://mantine.dev/guides/storybook/) was updated to use new [@storybook/addon-styling-webpack](https://storybook.js.org/addons/@storybook/addon-styling-webpack) with separate instructions for Vite and other frameworks
*   [CSS modules](https://mantine.dev/styles/css-modules/) guide now includes new section about global class names reference with `:global` selector
*   [Getting started](https://mantine.dev/getting-started/#set-up-vs-code) guide now includes new section about setting up VS Code with [PostCSS Language Support](https://marketplace.visualstudio.com/items?itemName=csstools.postcss) and [CSS Variable Autocomplete](https://marketplace.visualstudio.com/items?itemName=vunguyentuan.vscode-css-variables) extensions
*   [Popover](https://mantine.dev/core/popover/#nested-popovers) documentation now includes a guide on how to use nested popovers
*   [AspectRatio](https://mantine.dev/core/aspect-ratio/) documentation now includes a guide on how to use it in flexbox containers
*   Additional [AppShell.Section](https://mantine.dev/core/app-shell/) documentation was added
*   8 new [Checkbox](https://mantine.dev/core/checkbox/) examples and demos were added

[Other changes](#other-changes)
-------------------------------

*   [Dropzone](https://mantine.dev/x/dropzone/) now supports `loaderProps` prop to pass props down to the [Loader](https://mantine.dev/core/loader/) component
*   [theme.variantColorResolver](https://mantine.dev/theming/colors/#colors-variant-resolver) now supports `hoverColor` prop, which allows controlling `color` property when the component is hovered. New property is supported in [Button](https://mantine.dev/core/button/) and [ActionIcon](https://mantine.dev/core/action-icon/) components.
*   [Flex](https://mantine.dev/core/flex/) is now a [polymorphic](https://mantine.dev/guides/polymorphic/) component – it accepts `renderRoot` and `component` props
*   [Checkbox](https://mantine.dev/core/checkbox/) root element now has `data-checked` attribute when the checkbox is checked
*   [Checkbox](https://mantine.dev/core/checkbox/) and [Radio](https://mantine.dev/core/radio/) components now support changing icon color with `iconColor` prop
*   [use-form](https://mantine.dev/form/use-form/) now supports `onValuesChange` option which can be used to sync form values with external state</content>
</page>

<page>
  <title>Version v7.1.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-1-0/</url>
  <content>[CSS layers](#css-layers)
-------------------------

Starting from 7.1.0 it is possible to import all `@mantine/*` packages styles with rules defined in `mantine` [CSS layer](https://developer.mozilla.org/en-US/docs/Web/CSS/@layer). CSS rules within a layer are grouped together and applied before rules without a layer. This means that even if you do not have control over styles import order, you can still override Mantine styles with regular styles.

You can import styles within a layer by importing `@mantine/*/styles.layer.css` files. Note that these files are a full replacement for `@mantine/*/styles.css` files – you should not import both of them.

CSS layers are also useful if you want to combine Mantine components with other libraries which also provide styles. You can use `@layer` directive to control the order of styles:

In this example, Mantine styles will take precedence over other library `base` styles, but other library `components` styles will take precedence over Mantine component styles.

As of September 2023, CSS layers are supported in all modern browsers and have [90% browser support](https://caniuse.com/css-cascade-layers).

[renderRoot prop](#renderroot-prop)
-----------------------------------

All [polymorphic](https://mantine.dev/guides/polymorphic/) components now support `renderRoot` prop, which is an alternative to `component` prop. `renderRoot` prop allows changing the root element to any other component or HTML tag with a callback function. It can be used in cases when `component` prop is not flexible enough:

*   Target component props are incompatible with Mantine component. For example, [Button](https://mantine.dev/core/button/) component expects `className` to be a string, but [react-router-dom NavLink](https://reactrouter.com/en/6.16.0/components/nav-link) expects `className` to be a function.
*   Target component is a generic – it either accepts type as a parameter or its type changes depending on its props. Examples: [typed Next.js Link](https://nextjs.org/docs/app/building-your-application/configuring/typescript#statically-typed-links), [TanStack router Link](https://tanstack.com/router/v1)

`renderRoot` example with [react-router-dom NavLink](https://reactrouter.com/en/6.16.0/components/nav-link):

`renderRoot` example with [typed Next.js Link](https://nextjs.org/docs/app/building-your-application/configuring/typescript#statically-typed-links):

[Improved ESM support](#improved-esm-support)
---------------------------------------------

All `@mantine/*` packages now have improved ESM support:

*   Files in `esm` folder now have `.mjs` extension
*   You can use `@mantine/*` packages with `type: module` in `package.json` without any additional configuration
*   Tree shaking was improved for some bundlers

[CSS variables in style prop](#css-variables-in-style-prop)
-----------------------------------------------------------

It is now possible to define CSS variables in `style` prop in all Mantine components – [style](https://mantine.dev/styles/style/) prop is no longer restricted by `React.CSSProperties` type:

[form.setInitialValues](#formsetinitialvalues)
----------------------------------------------

[@mantine/form](https://mantine.dev/form/values/#setinitialvalues-handler) now supports `form.setInitialValues` method which allows updating initial values after the form was initialized. This method is useful when you want to update values that are used in `form.reset` and to compare values for dirty fields state:</content>
</page>

<page>
  <title>Version v7.0.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-0-0/</url>
  <content>[Migration to native CSS](#migration-to-native-css)
---------------------------------------------------

Mantine no longer depends on [Emotion](https://emotion.sh/) for styles generation. All `@mantine/*` packages are now shipped with native CSS files which can be imported from `@mantine/{package}/styles.css`, for example:

This change improves performance, reduces bundle size of the library and allows using Mantine in environments where CSS-in-JS is not supported (or supported with limitations), for example, Next.js app directory.

Important breaking changes:

*   `createStyles` function is no longer available, use [CSS modules](https://mantine.dev/styles/css-modules/) or any other styling solution of your choice instead
*   Components no longer support `sx` prop. You can use `className` or `style` props instead.
*   `styles` prop no longer supports nested selectors

It is now recommended to use [CSS modules](https://mantine.dev/styles/css-modules/) to style Mantine components. To update your project to [CSS modules](https://mantine.dev/styles/css-modules/), follow the [6.x → 7.x migration guide](https://mantine.dev/guides/6x-to-7x/).

[Vanilla extract integration](#vanilla-extract-integration)
-----------------------------------------------------------

If you prefer CSS-in-JS syntax for styling, you can use [Vanilla extract](https://mantine.dev/styles/vanilla-extract/) as a TypeScript CSS preprocessor. You will be able to use most of Mantine styling features with [Vanilla extract](https://mantine.dev/styles/vanilla-extract/).

[System color scheme support](#system-color-scheme-support)
-----------------------------------------------------------

All components now support system color scheme – when `colorScheme` value is `auto`, components will use `prefers-color-scheme` media query to determine if the user prefers light or dark color scheme.

Note that `auto` is not the default value. You need to set it manually to enable system color scheme support both on [MantineProvider](https://mantine.dev/theming/mantine-provider/) and in [ColorSchemeScript](https://mantine.dev/theming/color-schemes/#colorschemescript):

[Built-in color scheme manager](#built-in-color-scheme-manager)
---------------------------------------------------------------

[MantineProvider](https://mantine.dev/theming/mantine-provider/) now comes with a built-in color scheme manager. It is no longer required to use any other components to set up color scheme logic. Color scheme can be changed with [useMantineColorScheme hook](https://mantine.dev/theming/color-schemes/#use-mantine-color-scheme-hook):

[CSS modules and PostCSS preset](#css-modules-and-postcss-preset)
-----------------------------------------------------------------

[CSS modules](https://mantine.dev/styles/css-modules/) is now the recommended way to style Mantine components, although it is not required – you can choose any other styling solution of your choice.

It is also recommended to use [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/). It includes mixins and functions to simplify styling of Mantine components. [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/) is included in all templates.

[Global styles](#global-styles)
-------------------------------

Mantine no longer includes normalize.css. Instead, it uses a bare minimum set of [global styles](https://mantine.dev/styles/global-styles/). These styles are part of the `@mantine/core` package and are applied automatically when you import `@mantine/core/styles.css` in your application. Note that these styles cannot be decoupled from the rest of the library.

[Mantine as a headless UI library](#mantine-as-a-headless-ui-library)
---------------------------------------------------------------------

You can now use Mantine as a [headless](https://mantine.dev/styles/unstyled/) library. To achieve that, just do not import `@mantine/*/styles.css` in your application. Then you will be able to apply styles with [Styles API](https://mantine.dev/styles/styles-api/).

[createTheme function](#createtheme-function)
---------------------------------------------

`createTheme` function is a replacement for `MantineThemeOverride` type. Use it to create a theme override, it will give you autocomplete for all theme properties:

[Components extend functions](#components-extend-functions)
-----------------------------------------------------------

All components that support [default props](https://mantine.dev/theming/default-props/) or [Styles API](https://mantine.dev/styles/styles-api/) now have a static `extend` function which allows getting autocomplete when customizing [defaultProps](https://mantine.dev/theming/default-props/), [classNames and styles](https://mantine.dev/styles/styles-api/) of the component on [theme](https://mantine.dev/theming/theme-object/):

[classNames based on component props](#classnames-based-on-component-props)
---------------------------------------------------------------------------

You can now get component props in [classNames and styles](https://mantine.dev/styles/styles-api/) to conditionally apply styles. This feature is a more powerful replacement for styles params.

[Components CSS variables](#components-css-variables)
-----------------------------------------------------

You can now customize components [CSS variables](https://mantine.dev/styles/styles-api/) to change component styles based on its props. For example, it can be used to add new [sizes](https://mantine.dev/styles/variants-sizes/):

[New variants system](#new-variants-system)
-------------------------------------------

All components now have `data-variant` attribute on the root element, even if the component does not have any predefined variants. You can use it to apply styles to all components of the same type on [theme](https://mantine.dev/theming/theme-object/):

[New sizes system](#new-sizes-system)
-------------------------------------

There are multiple ways to customize component sizes:

*   With `data-size` attribute
*   With component [CSS variables](https://mantine.dev/styles/styles-api/)
*   With [static CSS variables](https://mantine.dev/styles/variants-sizes/#sizes-with-static-css-variables)

Example of customizing [Button](https://mantine.dev/core/button/) size with `data-size` attribute:

[theme.variantColorResolver](#themevariantcolorresolver)
--------------------------------------------------------

[Button](https://mantine.dev/core/button/), [Badge](https://mantine.dev/core/badge/), [ActionIcon](https://mantine.dev/core/action-icon/), [ThemeIcon](https://mantine.dev/core/theme-icon/) and other components now support custom variants with [variantColorResolver](https://mantine.dev/theming/colors/#colors-variant-resolver) – it supports both changing colors of existing variants and adding new variants.

[rem units scaling](#rem-units-scaling)
---------------------------------------

It is now possible to scale [rem](https://mantine.dev/styles/rem/#rem-units-scaling) units. It is useful when you want to change font-size of `html`/`:root` element and preserve Mantine components sizes. For example, if you would like to set `html` font-size to `10px` and scale Mantine components accordingly, you need to set `scale` to `1 / (10 / 16)` (16 – default font-size) = `1 / 0.625` = `1.6`:

[color prop improvements](#color-prop-improvements)
---------------------------------------------------

All components that support `color` prop now support the following color values:

*   Key of `theme.colors`, for example, `blue`
*   `theme.colors` index reference, for example, `blue.5`
*   Any valid CSS color value, for example, `#fff`, `rgba(0, 0, 0, 0.5)`, `hsl(0, 0%, 100%)`

Filled variant

Light variant

Outline variant

[Components classes](#components-classes)
-----------------------------------------

Classes of each component are now available in `Component.classes` object. For example, you can find [Button](https://mantine.dev/core/button/) classes in `Button.classes`:

You can use these classes to create components with the same styles as Mantine components:

[Theme object changes](#theme-object-changes)
---------------------------------------------

*   `theme.lineHeight` is now `theme.lineHeights` – it is now possible to specify multiple line heights. `theme.lineHeights` values are used in the [Text](https://mantine.dev/core/text/) component.
*   `theme.colorScheme` is no longer available, use [useMantineColorScheme](https://mantine.dev/theming/color-schemes/#use-mantine-color-scheme-hook) to get color scheme value
*   `theme.dir` is no longer needed, direction is now managed by [DirectionProvider](https://mantine.dev/styles/rtl/)
*   `theme.loader` was removed, you can now configure default loader with [default props](https://mantine.dev/theming/default-props/) of [Loader](https://mantine.dev/core/loader/) component
*   `theme.transitionTimingFunction` was removed
*   `theme.focusRingStyles` was replaced with `theme.focusClassName`
*   `theme.activeStyles` was replaced with `theme.activeClassName`
*   `theme.globalStyles` was removed
*   `theme.fn` functions were removed, some of the functions are available as [standalone utilities](https://mantine.dev/styles/color-functions/)
*   New [theme.scale](https://mantine.dev/styles/rem/#rem-units-scaling) property controls rem units scaling
*   New `theme.fontSmoothing` property determines whether font smoothing styles should be applied to the body element
*   New [theme.variantColorResolver](https://mantine.dev/theming/colors/#colors-variant-resolver) property allows customizing component colors per variant

[Colors generator](#colors-generator)
-------------------------------------

New [@mantine/colors-generator](https://mantine.dev/theming/colors/#colors-generation) package is now available to generate color palettes based on single color value. It is also available as [online tool](https://mantine.dev/colors-generator/). Note that it is usually better to generate colors in advance to avoid contrast issues.

[New setup for RTL](#new-setup-for-rtl)
---------------------------------------

`@mantine/core` package now exports [DirectionProvider](https://mantine.dev/styles/rtl/) component, which should be used to configure the direction of the application. `useDirection` hook can be used to toggle direction. All components now include RTL styles by default, it is no longer required to set up additional plugins. See [RTL documentation](https://mantine.dev/styles/rtl/) to learn more.

[React 18+ only](#react-18-only)
--------------------------------

Starting from version 7.0 Mantine no longer supports older React versions. The minimum supported version is now React 18. It is required because Mantine components now use [useId](https://react.dev/reference/react/useId) and [useSyncExternalStore](https://react.dev/reference/react/useSyncExternalStore) hooks, which are available only in React 18.

[left and right section](#left-and-right-section)
-------------------------------------------------

Components that previously had `rightSection` and `icon` props, now use `leftSection` instead of `icon`. Example of [Button](https://mantine.dev/core/button/) sections:

[NumberInput changes](#numberinput-changes)
-------------------------------------------

[NumberInput](https://mantine.dev/core/number-input/) was migrated to [react-number-format](https://s-yadav.github.io/react-number-format/). It now supports more features and has improvements in cursor position management. Due to migration, some of the props were renamed – follow the [documentation](https://mantine.dev/core/number-input/) to learn about the changes.

[Loader changes](#loader-changes)
---------------------------------

[Loader](https://mantine.dev/core/loader/) component is now built with CSS only. This change improves performance and reduces HTML output of the component.

[Theme](https://mantine.dev/theming/theme-object/) object no longer supports `theme.loader` property – it is also now possible to add custom loaders on [theme](https://mantine.dev/theming/theme-object/) with [default props](https://mantine.dev/theming/default-props/). Specified [Loader](https://mantine.dev/core/loader/) will be used in all components that use it under the hood ([LoadingOverlay](https://mantine.dev/core/loading-overlay/), [Button](https://mantine.dev/core/button/), [ActionIcon](https://mantine.dev/core/action-icon/), [Stepper](https://mantine.dev/core/stepper/), etc.).

[Progress changes](#progress-changes)
-------------------------------------

[Progress](https://mantine.dev/core/progress/) component now supports compound components pattern. Advanced features that were previously implemented in [Progress](https://mantine.dev/core/progress/) are now supposed to be implemented with compound components instead.

[Table changes](#table-changes)
-------------------------------

[Table](https://mantine.dev/core/table/) component changes:

*   [Styles API](https://mantine.dev/styles/styles-api/) support
*   It is now required to use compound components instead of elements: `Table.Tr`, `Table.Td`, etc.
*   It is now easier to override styles – all styles are added with classes instead of deeply nested selectors on root element
*   New props: `borderColor`, `withRowBorders`, `stripedColor`, `highlightOnHoverColor`
*   `withBorder` prop was renamed to `withTableBorder`
*   `fontSize` prop was removed, use `fz` [style prop](https://mantine.dev/styles/style-props/) instead
*   New `Table.ScrollContainer` component to create scrollable table

| Element position | Element name | Symbol | Atomic mass |
| --- | --- | --- | --- |
| 6 | Carbon | C | 12.011 |
| 7 | Nitrogen | N | 14.007 |
| 39 | Yttrium | Y | 88.906 |
| 56 | Barium | Ba | 137.33 |
| 58 | Cerium | Ce | 140.12 |

[Group changes](#group-changes)
-------------------------------

[Group](https://mantine.dev/core/group/) component changes:

*   `position` prop was renamed to `justify` – it now supports all `justify-content` values
*   `noWrap` prop was replaced with `wrap="nowrap"`, `wrap` prop now supports all `flex-wrap` values
*   `spacing` prop was replaced with `gap`
*   `Group` now supports new `preventGrowOverflow` prop which allows customizing how group items will behave when they grow larger than their dedicated space

[Tabs changes](#tabs-changes)
-----------------------------

*   Styles API selector `tabsList` renamed to `list`
*   `TabProps` type was renamed to `TabsTabProps`
*   `onTabChange` prop was renamed to `onChange`
*   `Tabs.List` `position` prop was renamed to `justify`, it now supports all `justify-content` values

[Button changes](#button-changes)
---------------------------------

*   `compact` prop was removed, use `size="compact-XXX"` instead
*   `leftIcon` and `rightIcon` props were renamed to `leftSection` and `rightSection`
*   `uppercase` prop was removed, use `tt` [style prop](https://mantine.dev/styles/style-props/) instead
*   `loaderPosition` prop was removed, [Loader](https://mantine.dev/core/loader/) is now always rendered in the center to prevent layout shifts
*   Styles API selectors were changed, see [Button Styles API](https://mantine.dev/core/button/?t=styles-api) documentation for more details

[AppShell changes](#appshell-changes)
-------------------------------------

[AppShell](https://mantine.dev/core/app-shell/) component was completely rewritten, it now supports more features:

*   `AppShell` now uses compound components pattern: `Navbar`, `Aside`, `Header` and `Footer` are no longer exported from `@mantine/core` package. Instead, use `AppShell.Navbar`, `AppShell.Aside`, etc.
*   `AppShell` now supports animations when navbar/aside are opened/closed
*   Navbar/aside can now be collapsed on desktop – state is handled separately for mobile and desktop
*   Header/footer can now be collapsed the same way as navbar/aside. For example, the header can be collapsed based on scroll position or direction.
*   `AppShell` no longer supports `fixed` prop – all components have `position: fixed` styles, static positioning is no longer supported
*   The documentation was updated, it now includes [10+ examples on a separate page](https://mantine.dev/app-shell/?e=BasicAppShell)

[SimpleGrid changes](#simplegrid-changes)
-----------------------------------------

[SimpleGrid](https://mantine.dev/core/simple-grid/) now uses object format to define grid breakpoints and spacing, it works the same way as [style props](https://mantine.dev/styles/style-props/).

[Grid changes](#grid-changes)
-----------------------------

[Grid](https://mantine.dev/core/grid/) now uses object format in `gutter`, `offset`, `span` and order props, all props now work the same way as [style props](https://mantine.dev/styles/style-props/).

[Image changes](#image-changes)
-------------------------------

[Image](https://mantine.dev/core/image/) component changes:

*   `Image` component no longer includes `figure` and other associated elements
*   `caption` prop is no longer available
*   `width` and `height` props are replaced with `w` and `h` [style props](https://mantine.dev/styles/style-props/)
*   Placeholder functionality was replaced with fallback image

[Spotlight changes](#spotlight-changes)
---------------------------------------

[Spotlight](https://mantine.dev/x/spotlight/) changes:

*   The logic is no longer based on React context
*   `SpotlightProvider` was renamed to `Spotlight`
*   `useSpotlight` hook was removed, use `spotlight` object instead
*   `actions` prop now uses a different data format
*   It is now possible to have multiple spotlights in the same app
*   `Spotlight` component now uses compound components pattern for advanced customization

[Carousel changes](#carousel-changes)
-------------------------------------

[Carousel](https://mantine.dev/x/carousel/) now uses object format for responsive values in `slideSize` and `slideGap` props instead of `breakpoints` prop:

[@mantine/prism deprecation](#mantineprism-deprecation)
-------------------------------------------------------

`@mantine/prism` package was deprecated in favor of `@mantine/code-highlight` package. [The new package](https://mantine.dev/x/code-highlight/) uses [highlight.js](https://highlightjs.org/) instead of [Prism](https://prismjs.com/).

[Fieldset component](#fieldset-component)
-----------------------------------------

New [Fieldset](https://mantine.dev/core/fieldset/) component:

[Combobox component](#combobox-component)
-----------------------------------------

The new [Combobox](https://mantine.dev/core/combobox/) component allows building custom select, autocomplete, tags input, multiselect and other similar components. It is used as a base for updated [Autocomplete](https://mantine.dev/core/autocomplete/), [Select](https://mantine.dev/core/select/), [TagsInput](https://mantine.dev/core/tags-input/) and [MultiSelect](https://mantine.dev/core/multi-select/) components.

[Combobox](https://mantine.dev/core/combobox/) is very flexible and allows you to have full control over the component rendering and logic. Advanced features that were previously implemented in [Autocomplete](https://mantine.dev/core/autocomplete/), [Select](https://mantine.dev/core/select/) and [MultiSelect](https://mantine.dev/core/multi-select/) are now supposed to be implemented with [Combobox](https://mantine.dev/core/combobox/) instead.

You can find 50+ `Combobox` examples on [this page](https://mantine.dev/combobox/).

[TagsInput component](#tagsinput-component)
-------------------------------------------

New [TagsInput](https://mantine.dev/core/tags-input/) component based on [Combobox](https://mantine.dev/core/combobox/) component. The component is similar to [MultiSelect](https://mantine.dev/core/multi-select/) but allows entering custom values.

[withErrorStyles prop](#witherrorstyles-prop)
---------------------------------------------

All inputs now support `withErrorStyles` prop, which allows removing error styles from the input. It can be used to apply custom error styles without override, or use other techniques to indicate error state. For example, it can be used to render an icon in the right section:

Error as react node

Something went wrong

Without error styles on input

Something went wrong

[hiddenFrom and visibleFrom props](#hiddenfrom-and-visiblefrom-props)
---------------------------------------------------------------------

All Mantine components now support `hiddenFrom` and `visibleFrom` props. These props accept breakpoint (`xs`, `sm`, `md`, `lg`, `xl`) and hide the component when viewport width is less than or greater than the specified breakpoint:

[Other changes](#other-changes)
-------------------------------

*   New [VisuallyHidden](https://mantine.dev/core/visually-hidden/) component
*   New [ActionIcon.Group](https://mantine.dev/core/action-icon/#actionicongroup) component
*   All transitions are now disabled during color scheme change
*   `theme.respectReducedMotion` is now set to `false` by default – it caused a lot of confusion for users who did not know about it
*   [Notifications system](https://mantine.dev/x/notifications/) now exports `notifications.updateState` function to update notifications state with a given callback
*   [Blockquote](https://mantine.dev/core/blockquote/) component has new design
*   [Breadcrumbs](https://mantine.dev/core/breadcrumbs/) component now supports `separatorMargin` prop
*   [Tooltip](https://mantine.dev/core/tooltip/) component now supports `mainAxis` and `crossAxis` offset configuration
*   [Slider and RangeSlider](https://mantine.dev/core/slider/) components `radius` prop now affects thumb as well as track
*   [NativeSelect](https://mantine.dev/core/native-select/) component now supports setting options as `children` and options groups
*   [Anchor](https://mantine.dev/core/anchor/) component now supports `underline` prop which lets you configure how link will be underlined: `hover` (default), `always` or `never`
*   [Affix](https://mantine.dev/core/affix/) component no longer supports `target` prop, use `portalProps` instead
*   [Drawer](https://mantine.dev/core/drawer/) component no longer supports `target` prop, use `portalProps` instead: `portalProps={{ target: '.your-selector' }}`
*   [Container](https://mantine.dev/core/container/) component no longer supports `sizes` prop, use [CSS variables](https://mantine.dev/styles/styles-api/) to customize sizes on [theme](https://mantine.dev/theming/theme-object/) instead
*   `useComponentDefaultProps` hook was renamed to [useProps](https://mantine.dev/theming/default-props/#useprops-hook)
*   `withinPortal` prop is now true by default in all overlay components ([Popover](https://mantine.dev/core/popover/), [HoverCard](https://mantine.dev/core/hover-card/), [Tooltip](https://mantine.dev/core/tooltip/), etc.)
*   `AlphaSlider` and `HueSlider` components are no longer available, they can be used only as a part of [ColorPicker](https://mantine.dev/core/color-picker/)
*   [Text](https://mantine.dev/core/text/) default root element is now `<p />`
*   [Title](https://mantine.dev/core/title/) no longer supports all [Text](https://mantine.dev/core/text/) props, only [style props](https://mantine.dev/styles/style-props/) are available
*   `MediaQuery` component was removed – use [CSS modules](https://mantine.dev/styles/css-modules/) to apply responsive styles
*   [Highlight](https://mantine.dev/core/highlight/) component prop `highlightColor` was renamed to `color`
*   [Tooltip and Tooltip.Floating](https://mantine.dev/core/tooltip/) components no longer support `width` prop, use `w` [style prop](https://mantine.dev/styles/style-props/) instead
*   [Stack](https://mantine.dev/core/stack/) component `spacing` prop was renamed to `gap`
*   [Input](https://mantine.dev/core/input/) and other `Input` based components `icon` prop was renamed to `leftSection`
*   [Loader](https://mantine.dev/core/loader/) component `variant` prop was renamed to `type`
*   `@mantine/core` package no longer depends on [Radix UI ScrollArea](https://www.radix-ui.com/docs/primitives/components/scroll-area#scroll-area), [ScrollArea](https://mantine.dev/core/scroll-area/) component is now a native Mantine component – it reduces bundle size, allows setting CSP for styles and improves performance (all styles are now applied with classes instead of inline `<style />` tags)
*   [Overlay](https://mantine.dev/core/overlay/) `opacity` prop was renamed to `backgroundOpacity` to avoid collision with `opacity` [style prop](https://mantine.dev/styles/style-props/)
*   [Badge](https://mantine.dev/core/badge/) Styles API selectors were changed, see [Badge Styles API](https://mantine.dev/core/badge/?t=styles-api) documentation for more details
*   [Slider](https://mantine.dev/core/slider/) Styles API selectors were changed, see [Slider Styles API](https://mantine.dev/core/slider/?t=styles-api) documentation for more details
*   [Text](https://mantine.dev/core/text/) component no longer supports `underline`, `color`, `strikethrough`, `italic`, `transform`, `align` and `weight` prop – use [style props](https://mantine.dev/styles/style-props/) instead
*   [Portal](https://mantine.dev/core/portal/) component `innerRef` prop was renamed to `ref`
*   [ScrollArea](https://mantine.dev/core/scroll-area/) now supports `x` and `y` values in `offsetScrollbars` prop
*   `TransferList` component is no longer available as a part of `@mantine/core` package, instead you can implement it with [Combobox](https://mantine.dev/core/combobox/) component ([example](https://mantine.dev/combobox/?e=TransferList))
*   [Chip](https://mantine.dev/core/chip/) component now supports custom check icon
*   [PasswordInput](https://mantine.dev/core/password-input/) no longer supports `visibilityToggleLabel` and `toggleTabIndex` props, use `visibilityToggleButtonProps` prop instead
*   [Stepper](https://mantine.dev/core/stepper/) no longer supports `breakpoint` prop, you can apply responsive styles with Styles API
*   [ColorInput](https://mantine.dev/core/color-input/) no longer supports `dropdownZIndex`, `transitionProps`, `withinPortal`, `portalProps` and `shadow` props, you can now pass these props with `popoverProps` prop
*   [LoadingOverlay](https://mantine.dev/core/loading-overlay/) props are now grouped by the component they are passed down to: `overlayProps`, `loaderProps` and `transitionProps` now replace props that were previously passed to `LoadingOverlay` directly
*   [Dropzone](https://mantine.dev/x/dropzone/) component no longer supports `padding` prop, use `p` style prop instead
*   [Dialog](https://mantine.dev/core/dialog/) component now supports all [Paper](https://mantine.dev/core/paper/) and [Affix](https://mantine.dev/core/affix/) props, `transitionDuration`, `transition` and other transition related props were replaced with `transitionProps`
*   [Checkbox](https://mantine.dev/core/checkbox/), [Radio](https://mantine.dev/core/radio/), [Chip](https://mantine.dev/core/chip/) and [Switch](https://mantine.dev/core/switch/) components now support `rootRef` prop which allows using them with [Tooltip](https://mantine.dev/core/tooltip/) and other similar components
*   [Grid](https://mantine.dev/core/grid/) no longer has `overflow: hidden` styles by default, you can enable it by setting `overflow` prop to `hidden`</content>
</page>

<page>
  <title>6.x to 7.x migration | Mantine</title>
  <url>https://mantine.dev/guides/6x-to-7x/</url>
  <content>This guide is intended to help you migrate your project styles from 6.x to 7.x. It is not intended to be a comprehensive guide to all the changes in 7.x. For that, please see the [7.0.0 changelog](https://mantine.dev/changelog/7-0-0/).

[Migration to @mantine/emotion](#migration-to-mantineemotion)
-------------------------------------------------------------

`@mantine/emotion` package is available starting from version 7.9. If you do not want to use CSS modules, have a lot of styles created with `createStyles`, `sx` and `styles` props, or just prefer CSS-in-JS syntax, you can migrate to `@mantine/emotion`. To view the full documentation for `@mantine/emotion` package, visit [this page](https://mantine.dev/styles/emotion/).

### [createStyles and Global component](#createstyles-and-global-component)

`createStyles` function and `Global` component are no longer available in `@mantine/core` package. Change imports to `@mantine/emotion`:

### [sx and styles props](#sx-and-styles-props)

`sx` and styles props available in 7.x the same way as in 6.x after [setup](https://mantine.dev/styles/emotion/):

### [theme.colorScheme](#themecolorscheme)

In v7 color scheme value is managed by [MantineProvider](https://mantine.dev/theming/mantine-provider/), [theme object](https://mantine.dev/theming/theme-object/) no longer includes `colorScheme` property. Although it is still possible to access color scheme value in components with [useMantineColorScheme](https://mantine.dev/theming/color-schemes/#use-mantine-color-scheme-hook) hook, it is not recommended to base your styles on its value. Instead, use `light`/`dark` [utilities](https://mantine.dev/styles/emotion/#utilities).

Example of 6.x `createStyles` with `theme.colorScheme` migration to 7.0:

[Migration to CSS modules](#migration-to-css-modules)
-----------------------------------------------------

Before getting started, it is recommended to go through [styles](https://mantine.dev/styles/css-modules/) documentation. Most notable parts:

*   [CSS Modules](https://mantine.dev/styles/css-modules/)
*   [Mantine PostCSS preset](https://mantine.dev/styles/postcss-preset/)
*   [CSS variables](https://mantine.dev/styles/css-variables/)
*   [data-\* attributes](https://mantine.dev/styles/data-attributes/)
*   [Styles API](https://mantine.dev/styles/styles-api/)
*   [Responsive styles](https://mantine.dev/styles/responsive/)

Note that this guide assumes that you have [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/) installed and configured in your project.

### [createStyles](#createstyles)

`createStyles` function is no longer available in 7.0. Use [CSS Modules](https://mantine.dev/styles/css-modules/) instead.

### [sx prop](#sx-prop)

`sx` and prop is no longer available in 7.0. Use `className` or [style prop](https://mantine.dev/styles/style/) instead.

Nested selectors are not supported in [style prop](https://mantine.dev/styles/style/), use `className` instead:

### [styles prop](#styles-prop)

`styles` prop no longer supports nested selectors. Use `classNames` instead to apply styles to nested elements.

Regular selectors are still supported:

### [Global styles](#global-styles)

`Global` component and global styles on theme are not available in 7.0. Instead, create a global stylesheet (`.css` file) and import it in your application entry point.

### [theme referencing](#theme-referencing)

All [theme](https://mantine.dev/theming/theme-object/) properties are now available as [CSS variables](https://mantine.dev/styles/css-variables/). It is recommended to use [CSS variables](https://mantine.dev/styles/css-variables/) instead of referencing theme object in styles.

### [theme.colorScheme](#themecolorscheme-1)

Color scheme value is managed by [MantineProvider](https://mantine.dev/theming/mantine-provider/), [theme object](https://mantine.dev/theming/theme-object/) no longer includes `colorScheme` property. Although it is still possible to access color scheme value in components with [useMantineColorScheme](https://mantine.dev/theming/color-schemes/#use-mantine-color-scheme-hook) hook, it is not recommended to base your styles on its value. Instead, use `light`/`dark` [mixins](https://mantine.dev/styles/postcss-preset/) or `light-dark` CSS [function](https://mantine.dev/styles/postcss-preset/#light-dark-function).

Example of 6.x `createStyles` with `theme.colorScheme` migration to 7.0:

Note that if your application has server-side rendering, you should not render any elements based on its value ([more info](https://mantine.dev/theming/color-schemes/#color-scheme-value-caveats)). Instead, use `light`/`dark` mixins or `light-dark` function to hide/display elements based on color scheme value.

Color scheme toggle example:</content>
</page>

<page>
  <title>All releases | Mantine</title>
  <url>https://mantine.dev/changelog/all-releases/</url>
  <content>Version 8.1.0 does not have associated patch releases yet.

**6.0.X** patches:

*   [`6.0.21` – September 17, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.21)
*   [`6.0.19` – August 10, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.19)
*   [`6.0.18` – August 7, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.18)
*   [`6.0.17` – July 18, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.17)
*   [`6.0.16` – July 4, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.16)
*   [`6.0.15` – June 27, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.15)
*   [`6.0.14` – June 20, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.14)
*   [`6.0.13` – May 30, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.13)
*   [`6.0.11` – May 16, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.11)
*   [`6.0.9` – April 25, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.9)
*   [`6.0.8` – April 18, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.8)
*   [`6.0.7` – April 11, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.7)
*   [`6.0.6` – April 4, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.6)
*   [`6.0.5` – March 28, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.5)
*   [`6.0.3` – March 21, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.3)
*   [`6.0.2` – March 14, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.2)
*   [`6.0.1` – March 8, 2023](https://github.com/mantinedev/mantine/releases/tag/6.0.1)

**5.9.X** patches:

*   [`5.9.6` – December 31, 2022](https://github.com/mantinedev/mantine/releases/tag/5.9.6)
*   [`5.9.5` – December 17, 2022](https://github.com/mantinedev/mantine/releases/tag/5.9.5)
*   [`5.9.4` – December 12, 2022](https://github.com/mantinedev/mantine/releases/tag/5.9.4)
*   [`5.9.3` – December 10, 2022](https://github.com/mantinedev/mantine/releases/tag/5.9.3)
*   [`5.9.2` – December 5, 2022](https://github.com/mantinedev/mantine/releases/tag/5.9.2)
*   [`5.9.1` – December 4, 2022](https://github.com/mantinedev/mantine/releases/tag/5.9.1)

**5.2.X** patches:

*   [`5.2.7` – September 8, 2022](https://github.com/mantinedev/mantine/releases/tag/5.2.7)
*   [`5.2.6` – September 6, 2022](https://github.com/mantinedev/mantine/releases/tag/5.2.6)
*   [`5.2.5` – September 3, 2022](https://github.com/mantinedev/mantine/releases/tag/5.2.5)
*   [`5.2.4` – August 27, 2022](https://github.com/mantinedev/mantine/releases/tag/5.2.4)
*   [`5.2.3` – August 22, 2022](https://github.com/mantinedev/mantine/releases/tag/5.2.3)
*   [`5.2.2` – August 22, 2022](https://github.com/mantinedev/mantine/releases/tag/5.2.2)

**5.1.X** patches:

*   [`5.1.7` – August 18, 2022](https://github.com/mantinedev/mantine/releases/tag/5.1.7)
*   [`5.1.6` – August 14, 2022](https://github.com/mantinedev/mantine/releases/tag/5.1.6)
*   [`5.1.5` – August 13, 2022](https://github.com/mantinedev/mantine/releases/tag/5.1.5)
*   [`5.1.4` – August 12, 2022](https://github.com/mantinedev/mantine/releases/tag/5.1.4)
*   [`5.1.3` – August 11, 2022](https://github.com/mantinedev/mantine/releases/tag/5.1.3)
*   [`5.1.1` – August 9, 2022](https://github.com/mantinedev/mantine/releases/tag/5.1.1)

**4.2.X** patches:

*   [`4.2.12` – July 3, 2022](https://github.com/mantinedev/mantine/releases/tag/4.2.12)
*   [`4.2.11` – June 26, 2022](https://github.com/mantinedev/mantine/releases/tag/4.2.11)
*   [`4.2.9` – June 12, 2022](https://github.com/mantinedev/mantine/releases/tag/4.2.9)
*   [`4.2.8` – June 5, 2022](https://github.com/mantinedev/mantine/releases/tag/4.2.8)
*   [`4.2.7` – May 29, 2022](https://github.com/mantinedev/mantine/releases/tag/4.2.7)
*   [`4.2.6` – May 22, 2022](https://github.com/mantinedev/mantine/releases/tag/4.2.6)
*   [`4.2.5` – May 15, 2022](https://github.com/mantinedev/mantine/releases/tag/4.2.5)
*   [`4.2.3` – May 8, 2022](https://github.com/mantinedev/mantine/releases/tag/4.2.3)
*   [`4.2.2` – May 1, 2022](https://github.com/mantinedev/mantine/releases/tag/4.2.2)

**4.0.X** patches:

*   [`4.0.9` – March 27, 2022](https://github.com/mantinedev/mantine/releases/tag/4.0.9)
*   [`4.0.8` – March 24, 2022](https://github.com/mantinedev/mantine/releases/tag/4.0.8)
*   [`4.0.7` – March 20, 2022](https://github.com/mantinedev/mantine/releases/tag/4.0.7)
*   [`4.0.6` – March 18, 2022](https://github.com/mantinedev/mantine/releases/tag/4.0.6)
*   [`4.0.5` – March 16, 2022](https://github.com/mantinedev/mantine/releases/tag/4.0.5)
*   [`4.0.4` – March 13, 2022](https://github.com/mantinedev/mantine/releases/tag/4.0.4)
*   [`4.0.3` – March 13, 2022](https://github.com/mantinedev/mantine/releases/tag/4.0.3)
*   [`4.0.2` – March 12, 2022](https://github.com/mantinedev/mantine/releases/tag/4.0.2)
*   [`4.0.1` – March 11, 2022](https://github.com/mantinedev/mantine/releases/tag/4.0.1)

**3.6.X** patches:

*   [`3.6.14` – March 3, 2022](https://github.com/mantinedev/mantine/releases/tag/3.6.14)
*   [`3.6.13` – March 2, 2022](https://github.com/mantinedev/mantine/releases/tag/3.6.13)
*   [`3.6.12` – March 1, 2022](https://github.com/mantinedev/mantine/releases/tag/3.6.12)
*   [`3.6.11` – February 25, 2022](https://github.com/mantinedev/mantine/releases/tag/3.6.11)
*   [`3.6.9` – February 17, 2022](https://github.com/mantinedev/mantine/releases/tag/3.6.9)
*   [`3.6.8` – February 16, 2022](https://github.com/mantinedev/mantine/releases/tag/3.6.8)
*   [`3.6.7` – February 9, 2022](https://github.com/mantinedev/mantine/releases/tag/3.6.7)
*   [`3.6.6` – February 5, 2022](https://github.com/mantinedev/mantine/releases/tag/3.6.6)
*   [`3.6.5` – February 2, 2022](https://github.com/mantinedev/mantine/releases/tag/3.6.5)
*   [`3.6.4` – January 30, 2022](https://github.com/mantinedev/mantine/releases/tag/3.6.4)
*   [`3.6.3` – January 25, 2022](https://github.com/mantinedev/mantine/releases/tag/3.6.3)
*   [`3.6.2` – January 20, 2022](https://github.com/mantinedev/mantine/releases/tag/3.6.2)
*   [`3.6.1` – January 17, 2022](https://github.com/mantinedev/mantine/releases/tag/3.6.1)

**3.1.X** patches:

*   [`3.1.9` – November 13, 2021](https://github.com/mantinedev/mantine/releases/tag/3.1.9)
*   [`3.1.8` – November 10, 2021](https://github.com/mantinedev/mantine/releases/tag/3.1.8)
*   [`3.1.7` – November 8, 2021](https://github.com/mantinedev/mantine/releases/tag/3.1.7)
*   [`3.1.6` – November 5, 2021](https://github.com/mantinedev/mantine/releases/tag/3.1.6)
*   [`3.1.5` – November 5, 2021](https://github.com/mantinedev/mantine/releases/tag/3.1.5)
*   [`3.1.4` – November 3, 2021](https://github.com/mantinedev/mantine/releases/tag/3.1.4)
*   [`3.1.3` – November 2, 2021](https://github.com/mantinedev/mantine/releases/tag/3.1.3)
*   [`3.1.2` – November 1, 2021](https://github.com/mantinedev/mantine/releases/tag/3.1.2)
*   [`3.1.1` – November 1, 2021](https://github.com/mantinedev/mantine/releases/tag/3.1.1)</content>
</page>

<page>
  <title>7.x to 8.x migration | Mantine</title>
  <url>https://mantine.dev/guides/7x-to-8x/</url>
  <content>[Global styles imports](#global-styles-imports)
-----------------------------------------------

If you used separate styles imports from `@mantine/core/styles/global.css` , you need to update imports to use new files. Note that if you previously imported `@mantine/core/styles.css`, no changes are required – all new files are already included in `styles.css`.

7.x version import:

8.x version import:

If you used `@mantine/core/styles.css`, no changes are required, the import works the same in 7.x and 8.x versions:

[Portal reuseTargetNode](#portal-reusetargetnode)
-------------------------------------------------

`reuseTargetNode` prop of [Portal](https://mantine.dev/core/portal/) component is now enabled by default. This option improves performance by reusing the target node between portal renders, but in some edge cases, it might cause issues with `z-index` stacking context.

If you experience issues with `z-index`, change `reuseTargetNode` prop to `false` in theme:

[Switch withThumbIndicator](#switch-withthumbindicator)
-------------------------------------------------------

[Switch](https://mantine.dev/core/switch/) component default styles were updated, it now includes checked state indicator inside the thumb. If you want to use old styles without indicator, set `withThumbIndicator` prop to `false` in theme:

[Date string values](#date-string-values)
-----------------------------------------

`@mantine/dates` components now use date string values in `onChange` and other callbacks. If you want to continue using `@mantine/dates` components the same way as in 7.x, you need to convert callback values to `Date` objects:

[DatesProvider timezone](#datesprovider-timezone)
-------------------------------------------------

`DatesProvider` component no longer supports `timezone` option:

If you need to handle timezones in your application, you can use a dedicated dates library ([dayjs](https://day.js.org/), [luxon](https://moment.github.io/luxon/#/), [date-fns](https://date-fns.org/)) to update timezone values. Example of using Mantine components with [dayjs](https://day.js.org/):

[DateTimePicker timeInputProps](#datetimepicker-timeinputprops)
---------------------------------------------------------------

[DateTimePicker](https://mantine.dev/dates/date-time-picker/) component no longer accepts `timeInputProps` prop, as the underlying [TimeInput](https://mantine.dev/dates/time-input/) component was replaced with [TimePicker](https://mantine.dev/dates/time-picker/). To pass props down to [TimePicker](https://mantine.dev/dates/time-picker/) component, use `timePickerProps` prop instead.

7.x version:

8.x version:

[CodeHighlight usage](#codehighlight-usage)
-------------------------------------------

[@mantine/code-highlight](https://mantine.dev/x/code-highlight/) package no longer depends on [highlight.js](https://highlightjs.org/). You can follow the [updated documentation](https://mantine.dev/x/code-highlight/) to set up syntax highlighting with [shiki](https://shiki.matsu.io/).

If you want to continue using [highlight.js](https://highlightjs.org/), in your application, install `highlight.js` package:

Then wrap your app with `CodeHighlightAdapterProvider` and provide `createHighlightJsAdapter` as `adapter` prop:

Then you need to add styles of one of the highlight.js themes to your application. You can do that by importing css file from `highlight.js` package or adding it via CDN link to the head of your application:

After that, you can use `CodeHighlight` component in your application the same way you did in 7.x version.

[Menu data-hovered attribute](#menu-data-hovered-attribute)
-----------------------------------------------------------

[Menu.Item](https://mantine.dev/core/menu/) no longer uses `data-hovered` attribute to indicate hovered state. If you used `data-hovered` in your styles, you need to change it `:hover` and `:focus` selectors instead:

[Popover hideDetached](#popover-hidedetached)
---------------------------------------------

[Popover](https://mantine.dev/core/popover/) now supports `hideDetached` prop to automatically close popover when target element is removed from the DOM:

By default, `hideDetached` is enabled – the behavior has changed from 7.x version. If you prefer to keep the old behavior, you can disable `hideDetached` for all components:

[Carousel changes](#carousel-changes)
-------------------------------------

Starting from 8.x version, [@mantine/carousel](https://mantine.dev/x/carousel/) package requires `embla-carousel` and `embla-carousel-react` packages with version 8.x.

You need to update embla dependencies:

Update embla props that were previously passed to `Carousel` component to `emblaOptions`. Full list of props:

*   `loop`
*   `align`
*   `slidesToScroll`
*   `dragFree`
*   `inViewThreshold`
*   `skipSnaps`
*   `containScroll`
*   `speed` and `draggable` props were removed – they are no longer supported by embla

`useAnimationOffsetEffect` hook was removed, it is no longer required, you need to remove it from your code:

`Embla` type is no longer exported from `@mantine/carousel` package, you need to change this import to reference `embla-carousel` package instead:</content>
</page>

<page>
  <title>PostCSS preset | Mantine</title>
  <url>https://mantine.dev/styles/postcss-preset/</url>
  <content>`postcss-preset-mantine` provides several CSS functions and mixins to help you write styles. It is not required to use it, but highly recommended. All demos that feature styles assume that you have this preset installed.

`postcss-preset-mantine` includes the following PostCSS plugins:

*   [postcss-nested](https://www.npmjs.com/package/postcss-nested)
*   [postcss-mixins](https://www.npmjs.com/package/postcss-mixins) with Mantine specific mixins
*   Custom plugin with `em`/`rem` functions

[Installation](#installation)
-----------------------------

Install `postcss-preset-mantine` as a dev dependency:

[Usage](#usage)
---------------

Note that setting up PostCSS may be different depending on your build tool/framework, check a [dedicated framework guide](https://mantine.dev/getting-started/) to learn more. Add `postcss-preset-mantine` to your `postcss.config.cjs` file (usually it is located in the root of your project):

All done! You can now use all the features of the preset.

[rem/em functions](#remem-functions)
------------------------------------

`rem` and `em` functions can be used to convert pixels to rem/em units. `16px = 1rem` and `16px = 1em`, `em` values are supposed to be used in media queries, `rem` everywhere else. You can learn more about units conversions in [this guide](https://mantine.dev/styles/rem/).

Will be transformed to:

[Auto convert px to rem](#auto-convert-px-to-rem)
-------------------------------------------------

`autoRem` option can be used to automatically convert all pixel values to rem units in `.css` files:

This option works similar to `rem` function. The following code:

Will be transformed to:

Note that `autoRem` converts only CSS properties, values in `@media` queries are not converted automatically – you still need to use `em` function to convert them.

`autoRem` option does not convert values in the following cases:

*   Values in `calc()`, `var()`, `clamp()` and `url()` functions
*   Values in `content` property
*   Values that contain `rgb()`, `rgba()`, `hsl()`, `hsla()` colors

If you want to convert above values to rem units, use `rem` function manually.

[dark and light mixins](#dark-and-light-mixins)
-----------------------------------------------

`dark` and `light` mixins can be used to create styles that will be applied only in dark or light color scheme.

Will be transformed to:

Note that usually you do not need to use both `light` and `dark` mixins at the same time. It is easier to define styles for light color scheme and then use `dark` mixin to override them in dark color scheme.

To define values for light/dark color scheme on the `:root`/`html` element, use `light-root` and `dark-root` mixins instead:

[smaller-than and larger-than mixins](#smaller-than-and-larger-than-mixins)
---------------------------------------------------------------------------

`smaller-than` and `larger-than` mixins can be used to create styles that will be applied only when the screen is smaller or larger than specified breakpoint.

Will be transformed to:

You can also use `smaller-than` and `larger-than` mixins with [mantine breakpoints](https://mantine.dev/styles/responsive/#breakpoints-variables-in-css-modules):

[light-dark function](#light-dark-function)
-------------------------------------------

`light-dark` function is an alternative to `light` and `dark` mixins. It accepts two arguments: first argument is rule that will be applied in light color scheme, second argument is rule that will be applied in dark color scheme.

Will be transformed to:

Note that `light-dark` function does not work on `:root`/`html` element. Use `light-root` and `dark-root` mixins instead:

[alpha function](#alpha-function)
---------------------------------

`alpha` function can be used to add alpha channel to color. Note that it uses [color-mix](https://caniuse.com/mdn-css_types_color_color-mix) which is not supported in some older browsers.

Will be transformed to:

[lighten and darken functions](#lighten-and-darken-functions)
-------------------------------------------------------------

`lighten` and `darken` functions work similar to `alpha` function, but instead of adding alpha channel they add white or black color to the color with [color-mix](https://caniuse.com/mdn-css_types_color_color-mix).

Will be transformed to:

[hover mixin](#hover-mixin)
---------------------------

`hover` mixin can be used to create styles that will be applied on hover.

Will be transformed to:

[rtl/ltr mixins](#rtlltr-mixins)
--------------------------------

`rtl` mixin can be used to create styles that will be applied when `dir="rtl"` is set on parent element (usually `<html />`).

Will be transformed to:

`ltr` mixin works the same way, but for `dir="ltr"`:

Will be transformed to:

[not-rtl/not-ltr mixins](#not-rtlnot-ltr-mixins)
------------------------------------------------

`not-rtl`/`not-ltr` mixins can be used to create styles that will be applied when the direction is set to the opposite value or not set at all. For example, `not-rtl` styles will be applied when `dir="ltr"` or when `dir` is not set at all.

Will be transformed to:

[where-\* mixins](#where--mixins)
---------------------------------

`where-*` mixins are alternative to `light`, `dark`, `rlt` and `hover` mixins. They work exactly the same, but produced CSS is less specific. These mixins are useful when you want to easily override styles, for example, when you are building a library or extension.

Example of using `where-light` mixin:

Will be transformed to:

[Custom mixins](#custom-mixins)
-------------------------------

You can define custom mixins that are not included in the preset by specifying them in the `mixins` option. To learn about mixins syntax, follow [postcss-mixins documentation](https://github.com/postcss/postcss-mixins#readme).

Example of adding `clearfix` and `circle` mixins:

Then you can use these mixins in your styles:

[Disable specific features](#disable-specific-features)
-------------------------------------------------------

You can disable specific features of the preset by setting them to `false`:</content>
</page>

<page>
  <title>Color schemes | Mantine</title>
  <url>https://mantine.dev/theming/color-schemes/</url>
  <content>[MantineProvider](https://mantine.dev/theming/mantine-provider/) manages color scheme context in your application. You can configure the default color scheme value with `defaultColorScheme` prop, possible values are `light`, `dark` and `auto` (system color scheme is used). The default value is `light`.

[data-mantine-color-scheme attribute](#data-mantine-color-scheme-attribute)
---------------------------------------------------------------------------

When the [MantineProvider](https://mantine.dev/theming/mantine-provider/) is mounted, it sets a `data-mantine-color-scheme` attribute on the `<html />` element to the value that the user has selected previously or to the value of `defaultColorScheme` prop. The `data-mantine-color-scheme` attribute is used in all components' styles to determine which colors the component should use.

[use-mantine-color-scheme hook](#use-mantine-color-scheme-hook)
---------------------------------------------------------------

`useMantineColorScheme` hook can be used to get and set current color scheme value:

[use-computed-color-scheme hook](#use-computed-color-scheme-hook)
-----------------------------------------------------------------

`useComputedColorScheme` returns a computed color scheme value, it returns either `light` or `dark`. It can be used to implement color scheme toggle logic:

[Transitions during color scheme change](#transitions-during-color-scheme-change)
---------------------------------------------------------------------------------

By default, transitions on all elements are disabled when color scheme changes to avoid inconsistent animations. To enable transitions during color scheme change, set `keepTransitions: true` option on `useMantineColorScheme` hook:

[Color scheme value caveats](#color-scheme-value-caveats)
---------------------------------------------------------

By default, the color scheme value is stored in local storage, and its value is saved in state before the component is mounted to avoid flash of inaccurate color scheme. This means that color scheme value can be different on client and server, as server does not have access to local storage and always uses the default value.

If you have server side rendering in your application (for example, if you use [Next.js](https://mantine.dev/guides/next/) or [React Router](https://mantine.dev/guides/react-router/)), then you cannot use `colorScheme` value in your application to avoid hydration issues. Instead, you can use `dark` and `light` mixins from [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/) to generate styles that will hide elements based on color scheme value:

> **colorScheme for client only applications**
> 
> You can safely use `colorScheme` value in client only applications (for example, Vite or create-react-app applications). In this case, there is no hydration, and thus hydration error cannot occur.

[ColorSchemeScript](#colorschemescript)
---------------------------------------

`ColorSchemeScript` component renders script tag that sets `data-mantine-color-scheme` attribute on `<html />` element to user selected value or to `defaultColorScheme` prop value before hydration. It is used to avoid flash of inaccurate color scheme in server side rendered applications, for example [Next.js](https://mantine.dev/guides/next/) or [React Router](https://mantine.dev/guides/react-router/). Follows framework specific guides to learn where to render `ColorSchemeScript` component.

You can add any additional props to the `<script />` tag generated by `ColorSchemeScript` component, for example, you can add [nonce](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) attribute:

[Auto color scheme](#auto-color-scheme)
---------------------------------------

Set `defaultColorScheme="auto"` on `MantineProvider` and `ColorSchemeScript` to use system color scheme. In this case color scheme value will be controlled by the user OS:

[Color scheme manager](#color-scheme-manager)
---------------------------------------------

By default, color scheme value is stored in local storage, but you can implement your own color scheme manager to store the value in any other external storage.

Color scheme manager must have the following methods:

Usually, it is better to wrap color scheme manager in a creator function to provide a way to configure it. Default local storage based color scheme manager example:

Then custom color scheme manager can be passed to [MantineProvider](https://mantine.dev/theming/mantine-provider/):

[Default color scheme](#default-color-scheme)
---------------------------------------------

The default color scheme value is used when the user has not selected any color scheme yet. It is required to be set both on [MantineProvider](https://mantine.dev/theming/mantine-provider/) and `ColorSchemeScript`. If `defaultColorScheme` is not set, then `light` is used.

[Force color scheme](#force-color-scheme)
-----------------------------------------

You can force the color scheme value to be either `light` or `dark` with `forceColorScheme` prop. It is required to be set both on [MantineProvider](https://mantine.dev/theming/mantine-provider/) and `ColorSchemeScript`. If `forceColorScheme` is set, then `defaultColorScheme` and `colorSchemeManager` are ignored. When `forceColorScheme` is set, it is not possible to change color scheme value with `setColorScheme` function.

[lightHidden and darkHidden props](#lighthidden-and-darkhidden-props)
---------------------------------------------------------------------

All Mantine components support `lightHidden` and `darkHidden` props that can be used to hide component in specific color scheme:

[With disabled JavaScript](#with-disabled-javascript)
-----------------------------------------------------

If you need to support users with disabled JavaScript, you need to set `data-mantine-color-scheme` attribute on the `<html />` element manually.

Example with Next.js app router that supports disabled JavaScript:</content>
</page>

<page>
  <title>Theme object | Mantine</title>
  <url>https://mantine.dev/theming/theme-object/</url>
  <content>Mantine theme is an object where your application's colors, fonts, spacing, border-radius and other design tokens are stored.

[Usage](#usage)
---------------

To customize theme, pass theme override object to [MantineProvider](https://mantine.dev/theming/mantine-provider/) `theme` prop. Theme override will be deeply merged with the default theme.

[Theme properties](#theme-properties)
-------------------------------------

### [autoContrast](#autocontrast)

`autoContrast` controls whether text color should be changed based on the given `color` prop in the following components:

*   [ActionIcon](https://mantine.dev/core/action-icon/) with `variant="filled"` only
*   [Alert](https://mantine.dev/core/alert/) with `variant="filled"` only
*   [Avatar](https://mantine.dev/core/avatar/) with `variant="filled"` only
*   [Badge](https://mantine.dev/core/badge/) with `variant="filled"` only
*   [Button](https://mantine.dev/core/button/) with `variant="filled"` only
*   [Chip](https://mantine.dev/core/chip/) with `variant="filled"` only
*   [NavLink](https://mantine.dev/core/nav-link/) with `variant="filled"` only
*   [ThemeIcon](https://mantine.dev/core/theme-icon/) with `variant="filled"` only
*   [Checkbox](https://mantine.dev/core/checkbox/) with `variant="filled"` only
*   [Radio](https://mantine.dev/core/radio/) with `variant="filled"` only
*   [Tabs](https://mantine.dev/core/tabs/) with `variant="pills"` only
*   [SegmentedControl](https://mantine.dev/core/segmented-control/)
*   [Stepper](https://mantine.dev/core/stepper/)
*   [Pagination](https://mantine.dev/core/pagination/)
*   [Progress](https://mantine.dev/core/progress/)
*   [Indicator](https://mantine.dev/core/indicator/)
*   [Timeline](https://mantine.dev/core/timeline/)
*   [Spotlight](https://mantine.dev/x/spotlight/)
*   All [@mantine/dates](https://mantine.dev/dates/getting-started/) components that are based on [Calendar](https://mantine.dev/dates/calendar/) component

`autoContrast` checks whether the given color luminosity is above or below the `luminanceThreshold` value and changes text color to either `theme.white` or `theme.black` accordingly.

`autoContrast` can be set globally on the theme level or individually for each component via `autoContrast` prop, except for [Spotlight](https://mantine.dev/x/spotlight/) and [@mantine/dates](https://mantine.dev/dates/getting-started/) components which only support global theme setting.

`autoContrast: true`

`autoContrast: false`

### [luminanceThreshold](#luminancethreshold)

`luminanceThreshold` controls which luminance value is used to determine if text color should be light or dark. It is used only if `theme.autoContrast` is set to `true`. Default value is `0.3`.

### [focusRing](#focusring)

`theme.focusRing` controls focus ring styles, it supports the following values:

*   `auto` (default and recommended) – focus ring is visible only when the user navigates with keyboard, this is the default browser behavior for native interactive elements
*   `always` – focus ring is visible when user navigates with keyboard and mouse, for example, the focus ring will be visible when user clicks on a button
*   `never` – focus ring is always hidden, it is not recommended – users who navigate with keyboard will not have visual indication of the current focused element

Focus ring: `auto`

Focus ring: `always`

Focus ring: `never`

### [focusClassName](#focusclassname)

`theme.focusClassName` is a CSS class that is added to elements that have focus styles, for example, [Button](https://mantine.dev/core/button/) or [ActionIcon](https://mantine.dev/core/action-icon/). It can be used to customize focus ring styles of all interactive components except inputs. Note that when `theme.focusClassName` is set, `theme.focusRing` is ignored.

> **:focus-visible selector**
> 
> `:focus-visible` selector is supported by more than [91% of browsers](https://caniuse.com/css-focus-visible) (data from April 2023). Safari browsers added support for it in version 15.4 (released in March 2022). If you need to support Safari 15.3 and older, you can use [focus-visible polyfill](https://github.com/WICG/focus-visible) or provide a [fallback](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible#providing_a_focus_fallback) with `:focus` pseudo-class.

### [activeClassName](#activeclassname)

`theme.activeClassName` is a CSS class that is added to elements that have active styles, for example, [Button](https://mantine.dev/core/button/) or [ActionIcon](https://mantine.dev/core/action-icon/). It can be used to customize active styles of all interactive components.

To disable active styles for all components, set `theme.activeClassName` to an empty string:

### [defaultRadius](#defaultradius)

`theme.defaultRadius` controls the default `border-radius` property in most components, for example, [Button](https://mantine.dev/core/button/) or [TextInput](https://mantine.dev/core/text-input/). You can set to either one of the values from `theme.radius` or a number/string to use exact value. Note that numbers are treated as pixels, but converted to rem. For example, `theme.defaultRadius: 4` will be converted to `0.25rem`. You can learn more about rem conversion in the [rem units guide](https://mantine.dev/styles/rem/).

TextInput with defaultRadius

### [cursorType](#cursortype)

`theme.cursorType` controls the default cursor type for interactive elements, that do not have `cursor: pointer` styles by default. For example, [Checkbox](https://mantine.dev/core/checkbox/) and [NativeSelect](https://mantine.dev/core/native-select/).

### [defaultGradient](#defaultgradient)

`theme.defaultGradient` controls the default gradient configuration for components that support `variant="gradient"` ([Button](https://mantine.dev/core/button/), [ActionIcon](https://mantine.dev/core/action-icon/), [Badge](https://mantine.dev/core/badge/), etc.).

### [components](#components)

`theme.components` allows to override components [default props](https://mantine.dev/theming/default-props/) and styles with `classNames` and `styles` properties. You can learn more about these features in [default props](https://mantine.dev/theming/default-props/) and [Styles API](https://mantine.dev/styles/styles-api/) guides.

### [other](#other)

`theme.other` is an object that can be used to store any other properties that you want to access with the theme objects.

[Store theme override object in a variable](#store-theme-override-object-in-a-variable)
---------------------------------------------------------------------------------------

To store theme override object in a variable, use `createTheme` function:

[Merge multiple theme overrides](#merge-multiple-theme-overrides)
-----------------------------------------------------------------

Use `mergeThemeOverrides` function to merge multiple themes into one theme override object:

[use-mantine-theme hook](#use-mantine-theme-hook)
-------------------------------------------------

`useMantineTheme` hook returns theme object from [MantineProvider](https://mantine.dev/theming/mantine-provider/) context:

[Default theme](#default-theme)
-------------------------------

You can import default theme object from `@mantine/core` package. It includes all theme properties with default values. When you pass theme override to [MantineProvider](https://mantine.dev/theming/mantine-provider/), it will be deeply merged with the default theme.

[Access theme outside of components](#access-theme-outside-of-components)
-------------------------------------------------------------------------

To access theme outside of components, you need to create a full theme object (your theme override merged with the default theme).

Then you will be able to import it anywhere in your application:</content>
</page>

<page>
  <title>Colors | Mantine</title>
  <url>https://mantine.dev/theming/colors/</url>
  <content>Mantine uses [open-color](https://yeun.github.io/open-color/) in default theme with some additions. Each color has 10 shades.

Colors are exposed on the [theme object](https://mantine.dev/theming/theme-object/) as an array of strings, you can access color shade by color name and index (0-9), colors with larger index are darker:

Colors are also exposed as [CSS variables](https://mantine.dev/styles/css-variables/):

[Adding extra colors](#adding-extra-colors)
-------------------------------------------

You can add any number of extra colors to `theme.colors` object. This will allow you to use them in all components that support `color` prop, for example [Button](https://mantine.dev/core/button/), [Badge](https://mantine.dev/core/badge/) and [Switch](https://mantine.dev/core/switch/).

> **10 shades per color**
> 
> Colors override must include **at least 10 shades per color**. Otherwise, you will get a TypeScript error and some variants will not have proper colors. If you only have one color value, you can either pick the remaining colors manually or use the [colors generator tool](https://mantine.dev/colors-generator/).
> 
> You can add more than 10 shades per color: these values will not be used by Mantine components with the default colors resolver, but you can still reference them by index, for example, `color="blue.11"`.

[Virtual colors](#virtual-colors)
---------------------------------

Virtual color is a special color which values should be different for light and dark color schemes. To define a virtual color, use `virtualColor` function which accepts an object with the following properties as a single argument:

*   `name` – color name, must be the same as the key in `theme.colors` object
*   `light` – a key of `theme.colors` object for light color scheme
*   `dark` – a key of `theme.colors` object for dark color scheme

To see the demo in action, switch between light and dark color schemes (`Ctrl + J`):

This box has virtual background color, it is pink in dark mode and cyan in light mode

[colorsTuple](#colorstuple)
---------------------------

Use `colorsTuple` function to:

*   Use single color as the same color for all shades
*   Transform dynamic string arrays to Mantine color tuple (the array should still have 10 values)

[Supported color formats](#supported-color-formats)
---------------------------------------------------

You can use the following color formats in `theme.colors`:

*   HEX: `#fff`, `#ffffff`
*   RGB: `rgb(255, 255, 255)`, `rgba(255, 255, 255, 0.5)`
*   HSL: `hsl(0, 0%, 100%)`, `hsla(0, 0%, 100%, 0.5)`
*   OKLCH: `oklch(96.27% 0.0217 238.66)`, `oklch(96.27% 0.0217 238.66 / 0.5)`

Example of adding oklch color to theme:

[primaryColor](#primarycolor)
-----------------------------

`theme.primaryColor` is a key of `theme.colors`, it is used:

*   As a default value for most of the components that support `color` prop
*   To set default focus ring outline color

> **CSS color values at `theme.primaryColor`**
> 
> Value of `theme.primaryColor` must be a key of `theme.colors` object. For example, `blue`, `orange` or `green`. You cannot assign CSS color values, for example, the following code will throw an error during theme merging:

[primaryShade](#primaryshade)
-----------------------------

`theme.primaryShade` is a number from 0 to 9. It determines which shade will be used for the components that have `color` prop.

You can also customize primary shade for dark and light color schemes separately:

[Color prop](#color-prop)
-------------------------

Components that support changing their color have `color` prop. This prop supports the following values:

*   Key of `theme.colors`, for example, `blue` or `green`
*   Key of `theme.colors` with color index, for example, `blue.5` or `green.9`
*   CSS color value, for example, `#fff` or `rgba(0, 0, 0, 0.5)`

Filled variant

Light variant

Outline variant

[Colors index reference](#colors-index-reference)
-------------------------------------------------

You can reference colors by index in `color` prop and [style props](https://mantine.dev/styles/style-props/), for example `c` prop:

[Difference between color and c props](#difference-between-color-and-c-props)
-----------------------------------------------------------------------------

`color` prop is used to control multiple CSS properties of the component. These properties can vary across different components, but usually `color` prop controls `background`, `color` and `border-color` CSS properties. For example, when you set `color="#C3FF36"` on [Button](https://mantine.dev/core/button/) component (with `variant="filled"`), it will set the following CSS properties:

*   `background-color` to `#C3FF36`
*   `background-color` when button is hovered to `#B0E631` (`#C3FF36` darkened by 10%)
*   `color` to `var(--mantine-color-white)`
*   `border-color` to `transparent`

`c` is a [style prop](https://mantine.dev/styles/style-props/) – it is responsible for setting a single CSS property `color` (color of the text). You can combine both props to achieve better contrast between text and background. In the following example:

*   `color` prop sets all `background: #C3FF36` and `color: var(--mantine-color-white)`
*   `c` prop overrides color styles to `color: var(--mantine-color-black)`

[Colors variant resolver](#colors-variant-resolver)
---------------------------------------------------

`theme.variantColorResolver` is a function that is used to determine which colors will be used in different variants in the following components: [Alert](https://mantine.dev/core/alert/), [Avatar](https://mantine.dev/core/avatar/), [Button](https://mantine.dev/core/button/), [Badge](https://mantine.dev/core/badge/) and [ActionIcon](https://mantine.dev/core/action-icon/).

It accepts an object argument with the following properties:

`theme.variantColorResolver` must return an object with the following properties:

You can use `theme.variantColorResolver` to customize colors handling by default variants or to add new variants support:

[Colors generation](#colors-generation)
---------------------------------------

You can use [colors generator](https://mantine.dev/colors-generator/) to generate 10 shades of color based on a single value or install `@mantine/colors-generator` package to generate dynamic colors in your application:

The package exports `generateColors` function that accepts a color value and returns an array of 10 shades. Note that `generateColors` function works best with darker colors (blue, violet, red) and may produce colors with poor contrast for lighter colors (yellow, teal, orange). Usually, it is better to generate colors in advance to avoid contrast issues.

[Default colors](#default-colors)
---------------------------------

[Add custom colors types](#add-custom-colors-types)
---------------------------------------------------

TypeScript will only autocomplete Mantine's default colors when accessing the theme. To add your custom colors to the MantineColor type, you can use TypeScript module declaration.</content>
</page>

<page>
  <title>CSS modules | Mantine</title>
  <url>https://mantine.dev/styles/css-modules/</url>
  <content>All Mantine components use CSS modules for styling. It is recommended to use CSS modules in your project as well, but it is not required – Mantine components are fully compatible with any third-party styling solution and native CSS.

[Usage](#usage)
---------------

CSS modules are supported out of the box by all major frameworks and build tools. Usually, all you need to do is to create `*.module.css` file:

And then import it in your component:

[How CSS modules work](#how-css-modules-work)
---------------------------------------------

When you create a `*.module.css` file, your build tool will generate a unique class name for each class in your file. For example, when you import the following file in your `.js`/`.ts` file:

You will get an object with unique class names:

With CSS modules, you do not need to worry about class name collisions, you can use any class name you want.

[Referencing global class names](#referencing-global-class-names)
-----------------------------------------------------------------

To reference global class names in CSS Modules, you can use `:global` selector:

The code above will compile to the following CSS:

[Adding styles to Mantine components](#adding-styles-to-mantine-components)
---------------------------------------------------------------------------

You can add styles to most of Mantine components using `className` prop – the same way as you would do with a regular HTML element. To set properties to your [theme](https://mantine.dev/theming/theme-object/) values, you can use [Mantine CSS variables](https://mantine.dev/styles/css-variables/):

Box component with some styles

To apply styles to inner elements of Mantine components with CSS modules, you can use `classNames` prop (see [Styles API](https://mantine.dev/styles/styles-api/) for more information):

[Styling Mantine components without CSS modules](#styling-mantine-components-without-css-modules)
-------------------------------------------------------------------------------------------------

All Mantine components are fully compatible with any third-party styling solution and native CSS. There are two main strategies to apply styles with a third-party library:

*   `className`, `classNames`, `style` and `styles` props
*   with static selectors, for example `.mantine-Text-root`

Example of applying styles with a utility CSS library:

Example of applying styles with global CSS:

You can combine both approaches to achieve desired results, for example, `@emotion/styled` and `styled-components` packages will pass `className` prop to a given component, and you can use static selectors to style inner elements:

> **Consider using CSS modules first**
> 
> CSS modules are the recommended way of styling Mantine components. Before choosing another styling solution, make sure that CSS modules do not fit your needs. Other solutions have limitations, for example:
> 
> *   It is hard to customize styles based on [data-\* attributes](https://mantine.dev/styles/data-attributes/) when using utility-based CSS libraries
> *   It is impossible to style inner elements of Mantine components with static selectors when using styled-components and other similar libraries if component uses [Portal](https://mantine.dev/core/portal/) because some elements will be rendered outside of the component root and inner elements are not part of the component tree</content>
</page>

<page>
  <title>Responsive styles | Mantine</title>
  <url>https://mantine.dev/styles/responsive/</url>
  <content>[Media queries](#media-queries)
-------------------------------

[Configure breakpoints](#configure-breakpoints)
-----------------------------------------------

`theme.breakpoints` are used in all responsive Mantine components. Breakpoints are expected to be set in `em` units. You can configure these values with [MantineProvider](https://mantine.dev/theming/mantine-provider/):

Default `theme.breakpoints` values:

[Breakpoints variables in CSS modules](#breakpoints-variables-in-css-modules)
-----------------------------------------------------------------------------

It is not possible to use CSS variables inside media queries – these values cannot be dynamically generated by [MantineProvider](https://mantine.dev/theming/mantine-provider/). To use Mantine theme breakpoints in your `.css` files, you will need `postcss-simple-vars` package:

Add it to your [PostCSS config](https://mantine.dev/styles/postcss-preset/) in `postcss.config.cjs`:

Then you will be able to access these variables in your `.css` files:

Will be transformed to:

> **Dynamic breakpoints are not supported**
> 
> Values that are defined in `postcss-simple-vars` config are static and are not connected to the [theme](https://mantine.dev/theming/theme-object/) – if values change, you will need to update them manually in both theme override and postcss config.

[hiddenFrom and visibleFrom props](#hiddenfrom-and-visiblefrom-props)
---------------------------------------------------------------------

All Mantine components that have a root element support `hiddenFrom` and `visibleFrom` props. These props accept breakpoint (`xs`, `sm`, `md`, `lg`, `xl`) and hide the component when viewport width is less than or greater than the specified breakpoint:

[Hidden and visible from as classes](#hidden-and-visible-from-as-classes)
-------------------------------------------------------------------------

If you are building a custom component and want to use the same logic as in `hiddenFrom` and `visibleFrom` props but you do not want to use Mantine components, you can use `mantine-hidden-from-{x}` and `mantine-visible-from-{x}` classes.

[Component size based on media query](#component-size-based-on-media-query)
---------------------------------------------------------------------------

Some components support `size` prop, which changes various aspects of component appearance. `size` prop is not responsive – it is not possible to define different component sizes for different screen sizes. Instead, you can render multiple components with different sizes and show/hide them based on media query with `className` or `hiddenFrom`/`visibleFrom` props:

[use-media-query hook](#use-media-query-hook)
---------------------------------------------

You can use [use-media-query hook](https://mantine.dev/hooks/use-media-query/) to change some of component props based on media query. Note that this approach is not recommended for most of the cases if you have ssr in your application (you use Next.js, React Router, Gatsby or any other framework that includes ssr) as it may cause hydration mismatch. If you do not have ssr in your application (for example, if you use Vite), then you can safely use this hook to change props of components or conditionally render components based on hook return value.

[use-media-query hook](https://mantine.dev/hooks/use-media-query/) can be safely used to change props of components that are not rendered on server side (modals, tooltips, etc.). In the following example, it is safe to use `useMediaQuery` hook to change [Tooltip](https://mantine.dev/core/tooltip/) props as it is not rendered on server side:

[use-matches hook](#use-matches-hook)
-------------------------------------

`use-matches` hook exported from `@mantine/core` is an alternative to [use-media-query](https://mantine.dev/hooks/use-media-query/) if you need to match multiple media queries and values. It accepts an object with media queries as keys and values at given breakpoint as values.

Note that `use-matches` hook uses the same logic as [use-media-query](https://mantine.dev/hooks/use-media-query/) under the hood, it is not recommended to be used as a primary source of responsive styles, especially if you have ssr in your application.

In the following example:

*   Starting from `theme.breakpoints.lg`, color will be `red.9`
*   Between `theme.breakpoints.sm` and `theme.breakpoints.lg`, color will be `orange.9`
*   Below `theme.breakpoints.sm`, color will be `blue.9`

Box with color that changes based on screen size

[Container queries](#container-queries)
---------------------------------------

[Container queries](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_container_queries) enable you to apply styles to an element based on the size of the element's container. If, for example, a container has less space available in the surrounding context, you can hide certain elements or use smaller fonts. Container queries are supported in [all modern browsers](https://caniuse.com/css-container-queries).

You can use `rem` and `em` functions from [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/#remem-functions) in container queries. Note that CSS variables do not work in container queries and because of that [rem scaling](https://mantine.dev/styles/rem/#rem-units-scaling) feature is not available. If you rely on this feature, it is better to define breakpoints in `px` units.

Resize parent element to see container query in action

[Responsive style props](#responsive-style-props)
-------------------------------------------------

You can use object syntax to add responsive styles with [style props](https://mantine.dev/styles/style-props/). Note that responsive style props are [less performant](https://mantine.dev/styles/styles-performance/) than regular style props, it is not recommended to use them in large lists of elements.

Box with responsive style props

Responsive values are calculated the following way:

*   `base` value is used when none of breakpoint values are applied
*   `xs`, `sm`, `md`, `lg`, `xl` values are used when the viewport width is larger that the value of corresponding breakpoint specified in [theme.breakpoints](https://mantine.dev/styles/responsive/)

In this case the element will have the following styles:</content>
</page>

<page>
  <title>Styles API | Mantine</title>
  <url>https://mantine.dev/styles/styles-api/</url>
  <content>[What is Styles API](#what-is-styles-api)
-----------------------------------------

The styles API is a set of props and techniques that allows you to customize the style of any element inside a Mantine component – inline or using the [theme object](https://mantine.dev/theming/theme-object/). All Mantine components that have styles support Styles API.

[Styles API selectors](#styles-api-selectors)
---------------------------------------------

Every Mantine component that supports the styles API has a set of element names that can be used to apply styles to inner elements inside the component. For simplicity, these elements names are called selectors in Mantine documentation. You can find selectors information under the `Styles API` tab in a component's documentation.

Example of [Button](https://mantine.dev/core/button/) component selectors:

You can use these selectors in `classNames` and `styles` in, both, component props and `theme.components`:

[classNames prop](#classnames-prop)
-----------------------------------

With the `classNames` prop you can add classes to inner elements of Mantine components. It accepts an object with element names as keys and classes as values:

[classNames in theme.components](#classnames-in-themecomponents)
----------------------------------------------------------------

You can also define `classNames` in [`theme.components`](https://mantine.dev/theming/theme-object/) to apply them to all components of a specific type:

[Components CSS variables](#components-css-variables)
-----------------------------------------------------

Most of Mantine components use CSS variables to define colors, sizes, paddings and other properties. You can override these values using a custom CSS variables resolver function in [theme.components](https://mantine.dev/theming/theme-object/) or by passing it to the `vars` prop.

You can find CSS variables information under the `Styles API` tab in a component's documentation. Example of [Button](https://mantine.dev/core/button/) component CSS variables:

Example of a custom CSS variables resolver function used to add more sizes to the [Button](https://mantine.dev/core/button/) component:

[styles prop](#styles-prop)
---------------------------

The `styles` prop works the same way as `classNames`, but applies inline styles. Note that inline styles have higher specificity than classes, so you will not be able to override them with classes without using `!important`. You cannot use pseudo-classes (for example, `:hover`, `:first-of-type`) and media queries inside the `styles` prop.

> **styles prop usage**
> 
> Some examples and demos in the documentation use the `styles` prop for convenience, but it is not recommended to use the `styles` prop as the primary means of styling components, as the `classNames` prop is more flexible and has [better performance](https://mantine.dev/styles/styles-performance/).

[Styles API based on component props](#styles-api-based-on-component-props)
---------------------------------------------------------------------------

You can also pass a callback function to `classNames` and `styles`. This function will receive [theme](https://mantine.dev/theming/theme-object/) as first argument and component props as second. It should return an object of classes (for `classNames`) or styles (for `styles`).

You can use this feature to conditionally apply styles based on component props. For example, you can change the [TextInput](https://mantine.dev/core/text-input/) label color if the input is required or change the input background color if the input is wrong:

[Static classes](#static-classes)
---------------------------------

Every component that supports Styles API also includes static classes that can be used to style component without using `classNames` or `styles` props. By default, static classes have `.mantine-{ComponentName}-{selector}` format. For example, `root` selector of [Button](https://mantine.dev/core/button/) component will have `.mantine-Button-root` class.

You can use static classes to style a component with CSS or [any other styling solution](https://mantine.dev/styles/css-modules/#styling-mantine-components-without-css-modules):

The prefix of static classes can be changed with `classNamesPrefix` of [MantineProvider](https://mantine.dev/theming/mantine-provider/#classnamesprefix).

[Components classes](#components-classes)
-----------------------------------------

Classes of each component are available in the `Component.classes` object. For example, you can find the classes of [Button](https://mantine.dev/core/button/) in `Button.classes`:

You can use these classes to create components with the same styles as Mantine components:</content>
</page>

<page>
  <title>Typography | Mantine</title>
  <url>https://mantine.dev/theming/typography/</url>
  <content>[Change fonts](#change-fonts)
-----------------------------

You can change fonts and other text styles for headings, code and all other components with the following theme properties:

*   `theme.fontFamily` – controls font-family in all components except [Title](https://mantine.dev/core/title/), [Code](https://mantine.dev/core/code/) and [Kbd](https://mantine.dev/core/kbd/)
*   `theme.fontFamilyMonospace` – controls font-family of components that require monospace font: [Code](https://mantine.dev/core/code/), [Kbd](https://mantine.dev/core/kbd/) and [CodeHighlight](https://mantine.dev/x/code-highlight/)
*   `theme.headings.fontFamily` – controls font-family of h1-h6 tags in [Title](https://mantine.dev/core/title/) and [TypographyStylesProvider](https://mantine.dev/core/typography-styles-provider/) components, fallbacks to `theme.fontFamily` if not defined

### Outfit or sans-serif title

`Monaco, Courier Code`

[System fonts](#system-fonts)
-----------------------------

By default, Mantine uses system fonts. It means that different devices will display components based on available font, for example, macOS and iOS users will see [San Francisco font](https://developer.apple.com/fonts/), Windows users will see [Segoe UI font](https://docs.microsoft.com/en-us/typography/font-list/segoe-ui), Android users will see [Roboto font](https://fonts.google.com/specimen/Roboto) and so on. This approach provides a familiar experience to the users and allows avoiding common problems related to custom fonts loading (layout shift, invisible text, etc.), if you do not have strict requirements, it is recommended to use system fonts for better performance.

Default values for theme properties:

*   Default value for `theme.fontFamily` and `theme.headings.fontFamily` is `-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji`
*   Default value for `theme.fontFamilyMonospace` is `ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, Liberation Mono, Courier New, monospace`

[Font sizes](#font-sizes)
-------------------------

Paras is an orange, insectoid Pokémon that resembles the nymph stage of a cicada. Its ovoid body is segmented, and it has three pairs of legs. The foremost pair of legs is the largest and has sharp claws at the tips. There are five specks on its forehead and three teeth on either side of its mouth. It has circular eyes with large pseudopupils.

`theme.fontSizes` property defines font-size values for all Mantine components:

Default `theme.fontSizes` values:

[Line heights](#line-heights)
-----------------------------

`theme.lineHeights` property defines line-height values for [Text](https://mantine.dev/core/text/) component, most other components use `theme.lineHeights.md` by default:

Default `theme.lineHeights` values:

[h1-h6 styles](#h1-h6-styles)
-----------------------------

To customize headings styles in [Title](https://mantine.dev/core/title/) and [TypographyStylesProvider](https://mantine.dev/core/typography-styles-provider/) components set `theme.headings`:

With `theme.headings` you can customize font-size, font-weight and line-height per heading level. If you need more control over styles, use [:is selector](https://developer.mozilla.org/en-US/docs/Web/CSS/:is) with [Styles API](https://mantine.dev/styles/styles-api/) to target specific heading level:

Heading 1
---------

Heading 2
---------

### Heading 3

#### Heading 4

##### Heading 5

###### Heading 6</content>
</page>

<page>
  <title>Polymorphic components | Mantine</title>
  <url>https://mantine.dev/guides/polymorphic/</url>
  <content>[What is a polymorphic component](#what-is-a-polymorphic-component)
-------------------------------------------------------------------

A polymorphic component is a component which root element can be changed with `component` prop. All polymorphic components have a default element which is used when `component` prop is not provided. For example, the [Button](https://mantine.dev/core/button/) component default element is `button` and it can be changed to `a` or any other element or component:

[renderRoot prop](#renderroot-prop)
-----------------------------------

`renderRoot` is an alternative to the `component` prop, which accepts a function that should return a React element. It is useful in cases when `component` prop cannot be used, for example, when the component that you want to pass to the `component` is generic (accepts type or infers it from props, for example `<Link<'/'> />`).

Example of using `renderRoot` prop, the result is the same as in the previous demo:

**!important** It is required to spread `props` argument into the root element. Otherwise there will be no styles and the component might not be accessible.

[Polymorphic components as other React components](#polymorphic-components-as-other-react-components)
-----------------------------------------------------------------------------------------------------

You can pass any other React component to `component` prop. For example, you can pass `Link` component from `react-router-dom`:

[Polymorphic components as Next.js Link](#polymorphic-components-as-nextjs-link)
--------------------------------------------------------------------------------

Next.js link does not work in the same way as other similar components in all Next.js versions.

With Next.js 12 and below:

With Next.js 13 and above:

[Polymorphic components with generic components](#polymorphic-components-with-generic-components)
-------------------------------------------------------------------------------------------------

You cannot pass generic components to `component` prop because it is not possible to infer generic types from the component prop. For example, you cannot pass [typed Next.js Link](https://nextjs.org/docs/app/building-your-application/configuring/typescript#statically-typed-links) to `component` prop because it is not possible to infer `href` type from the component prop. The component itself will work correctly, but you will have a TypeScript error.

To make generic components work with polymorphic components, use `renderRoot` prop instead of `component`:

[Polymorphic components with react-router NavLink](#polymorphic-components-with-react-router-navlink)
-----------------------------------------------------------------------------------------------------

[react-router-dom](https://reactrouter.com/en/main) [NavLink](https://reactrouter.com/en/main/components/nav-link) component `className` prop accepts a function based on which you can add an active class to the link. This feature is incompatible with Mantine `component` prop, but you can use `renderRoot` prop instead:

[Wrapping polymorphic components](#wrapping-polymorphic-components)
-------------------------------------------------------------------

Non-polymorphic components include `React.ComponentPropsWithoutRef<'x'>` as a part of their props type, where `x` is a root element of the component. For example, [Container](https://mantine.dev/core/container/) component is not polymorphic – its root element is always `div`, so its props type includes `React.ComponentPropsWithoutRef<'div'>`.

Polymorphic components do not include `React.ComponentPropsWithoutRef<'x'>` as a part of their props type because their root element can be changed, and thus props type can be inferred only after the component was rendered.

Example of creating a non-polymorphic wrapper component for Mantine polymorphic component:

Example of creating a polymorphic wrapper component for Mantine polymorphic component:

[Dynamic component prop](#dynamic-component-prop)
-------------------------------------------------

You can use dynamic value in the `component` prop, but in this case, you need to either provide types manually or disable type checking by passing `any` as a type argument to the polymorphic component:

[Create your own polymorphic components](#create-your-own-polymorphic-components)
---------------------------------------------------------------------------------

Use `createPolymorphicComponent` function and [Box](https://mantine.dev/core/box/) component to create new polymorphic components:

[Make Mantine component polymorphic](#make-mantine-component-polymorphic)
-------------------------------------------------------------------------

Polymorphic components have performance overhead for tsserver (no impact on runtime performance), because of that not all Mantine components have polymorphic types, but all components still accept `component` prop – root element can be changed.

To make Mantine component polymorphic, use `createPolymorphicComponent` function the same way as in the previous example:</content>
</page>

<page>
  <title>Default props | Mantine</title>
  <url>https://mantine.dev/theming/default-props/</url>
  <content>You can define default props for every Mantine component by setting `theme.components`. These props will be used by default by all components of your application unless they are overridden by component props:

[Default props with MantineThemeProvider](#default-props-with-mantinethemeprovider)
-----------------------------------------------------------------------------------

You can also use `MantineThemeProvider` to define default props for a part of your application:

[Default props for compound components](#default-props-for-compound-components)
-------------------------------------------------------------------------------

Some components like [Menu](https://mantine.dev/core/menu/) and [Tabs](https://mantine.dev/core/tabs/) have associated compound components: `Menu.Item`, `Tabs.List`, etc.. You can add default props to these components by omitting the dot from component name:

[useProps hook](#useprops-hook)
-------------------------------

You can use `useProps` hook to add default props support to any custom component. `useProps` accepts three arguments:

*   component name (string) – it is used to connect component with theme
*   `defaultProps` – default props on component level – these props are used when default props are not defined on theme
*   `props` – props passed to component

Default color

Provider color

Prop color

[withProps function](#withprops-function)
-----------------------------------------

All Mantine components have `withProps` static function that can be used to add default props to the component:</content>
</page>

<page>
  <title>Mantine styles | Mantine</title>
  <url>https://mantine.dev/styles/mantine-styles/</url>
  <content>This guide explains how to import styles of `@mantine/*` packages in your application and how to override them with [CSS layers](https://developer.mozilla.org/en-US/docs/Web/CSS/@layer) in case you do not have a way to control the order of stylesheets in your application.

[Mantine components styles](#mantine-components-styles)
-------------------------------------------------------

All Mantine components are built with CSS modules, but all styles are bundled before publishing to npm. To include these styles, you need to import `@mantine/{package}/styles.css` file in your application. Example with `@mantine/core` package:

By adding this import, you will have all styles of `@mantine/core` components in your application.

[Import styles per component](#import-styles-per-component)
-----------------------------------------------------------

If you want to reduce CSS bundle size, you can import styles per component. Note that some components have dependencies, for example, [Button](https://mantine.dev/core/button/) component uses [UnstyledButton](https://mantine.dev/core/unstyled-button/) component internally, so you need to import styles for both components. You can find a full list of exported styles from `@mantine/core` package and additional instructions on [this page](https://mantine.dev/styles/css-files-list/).

Note that individual component styles are available only for `@mantine/core` package. Other packages have minimal styles that can be imported with `@mantine/{package}/styles.css` import.

[Styles import order](#styles-import-order)
-------------------------------------------

It is important to keep the correct styles import order. `@mantine/core` package styles must always be imported before any other Mantine package styles:

Your application styles must always be imported after all `@mantine/*` packages styles:

[CSS layers](#css-layers)
-------------------------

Some bundlers and frameworks do not allow you to control the order of stylesheets in your application. For example, Next.js does not guarantee [styles import order](https://github.com/vercel/next.js/issues/16630). In this case, you can use [CSS layers](https://developer.mozilla.org/en-US/docs/Web/CSS/@layer) to ensure that your styles will always override Mantine styles.

All `@mantine/*` packages that export styles have an additional file in which all styles are wrapped in `@layer mantine` directive.

These files contain the same styles as `styles.css` files, but wrapped in `@layer mantine` directive. Make sure that you do not import both `styles.css` and `styles.layer.css` files in your application.

Similar to package styles, you can import individual component styles with `@layer mantine` directive:

[How CSS layers work](#how-css-layers-work)
-------------------------------------------

CSS rules within a layer are grouped together and applied before rules without a layer. This means that even if you do not have control over styles import order, you can still override Mantine styles with regular styles.

CSS layers are also useful if you want to combine Mantine components with other libraries which also provide styles. You can use `@layer` directive to control the order of styles:

In this example, Mantine styles will take precedence over other library `base` styles, but other library `components` styles will take precedence over Mantine component styles.

As of September 2023, CSS layers are supported in all modern browsers and have [90% browser support](https://caniuse.com/css-cascade-layers).

[Loading styles from CDN](#loading-styles-from-cdn)
---------------------------------------------------

You can also load Mantine styles from unpkg CDN. Note that in this case it is recommended to specify exact version of `@mantine/*` packages both in your `package.json` and in CDN links.

Styles on unpkg CDN are available for all Mantine packages that export styles.</content>
</page>

<page>
  <title>CSS files list | Mantine</title>
  <url>https://mantine.dev/styles/css-files-list/</url>
  <content>baseline

`import '@mantine/core/styles/baseline.css';`

default-css-variables

`import '@mantine/core/styles/default-css-variables.css';`

global

`import '@mantine/core/styles/global.css';`

ActionIcon

`import '@mantine/core/styles/ActionIcon.css';`

Accordion

`import '@mantine/core/styles/Accordion.css';`

Affix

`import '@mantine/core/styles/Affix.css';`

Alert

`import '@mantine/core/styles/Alert.css';`

Anchor

`import '@mantine/core/styles/Anchor.css';`

AngleSlider

`import '@mantine/core/styles/AngleSlider.css';`

AppShell

`import '@mantine/core/styles/AppShell.css';`

AspectRatio

`import '@mantine/core/styles/AspectRatio.css';`

Avatar

`import '@mantine/core/styles/Avatar.css';`

BackgroundImage

`import '@mantine/core/styles/BackgroundImage.css';`

Badge

`import '@mantine/core/styles/Badge.css';`

Blockquote

`import '@mantine/core/styles/Blockquote.css';`

Breadcrumbs

`import '@mantine/core/styles/Breadcrumbs.css';`

Burger

`import '@mantine/core/styles/Burger.css';`

Button

`import '@mantine/core/styles/Button.css';`

Card

`import '@mantine/core/styles/Card.css';`

Center

`import '@mantine/core/styles/Center.css';`

Checkbox

`import '@mantine/core/styles/Checkbox.css';`

Chip

`import '@mantine/core/styles/Chip.css';`

CloseButton

`import '@mantine/core/styles/CloseButton.css';`

Code

`import '@mantine/core/styles/Code.css';`

ColorInput

`import '@mantine/core/styles/ColorInput.css';`

ColorPicker

`import '@mantine/core/styles/ColorPicker.css';`

ColorSwatch

`import '@mantine/core/styles/ColorSwatch.css';`

Container

`import '@mantine/core/styles/Container.css';`

Combobox

`import '@mantine/core/styles/Combobox.css';`

Dialog

`import '@mantine/core/styles/Dialog.css';`

Divider

`import '@mantine/core/styles/Divider.css';`

Drawer

`import '@mantine/core/styles/Drawer.css';`

Fieldset

`import '@mantine/core/styles/Fieldset.css';`

Flex

`import '@mantine/core/styles/Flex.css';`

FloatingIndicator

`import '@mantine/core/styles/FloatingIndicator.css';`

Grid

`import '@mantine/core/styles/Grid.css';`

Group

`import '@mantine/core/styles/Group.css';`

Image

`import '@mantine/core/styles/Image.css';`

Indicator

`import '@mantine/core/styles/Indicator.css';`

InlineInput

`import '@mantine/core/styles/InlineInput.css';`

Input

`import '@mantine/core/styles/Input.css';`

Kbd

`import '@mantine/core/styles/Kbd.css';`

List

`import '@mantine/core/styles/List.css';`

Loader

`import '@mantine/core/styles/Loader.css';`

LoadingOverlay

`import '@mantine/core/styles/LoadingOverlay.css';`

Mark

`import '@mantine/core/styles/Mark.css';`

Menu

`import '@mantine/core/styles/Menu.css';`

Modal

`import '@mantine/core/styles/Modal.css';`

ModalBase

`import '@mantine/core/styles/ModalBase.css';`

NavLink

`import '@mantine/core/styles/NavLink.css';`

Notification

`import '@mantine/core/styles/Notification.css';`

NumberInput

`import '@mantine/core/styles/NumberInput.css';`

Overlay

`import '@mantine/core/styles/Overlay.css';`

Pagination

`import '@mantine/core/styles/Pagination.css';`

Paper

`import '@mantine/core/styles/Paper.css';`

PasswordInput

`import '@mantine/core/styles/PasswordInput.css';`

Pill

`import '@mantine/core/styles/Pill.css';`

PillsInput

`import '@mantine/core/styles/PillsInput.css';`

PinInput

`import '@mantine/core/styles/PinInput.css';`

Popover

`import '@mantine/core/styles/Popover.css';`

Progress

`import '@mantine/core/styles/Progress.css';`

Radio

`import '@mantine/core/styles/Radio.css';`

Rating

`import '@mantine/core/styles/Rating.css';`

RingProgress

`import '@mantine/core/styles/RingProgress.css';`

ScrollArea

`import '@mantine/core/styles/ScrollArea.css';`

SegmentedControl

`import '@mantine/core/styles/SegmentedControl.css';`

SemiCircleProgress

`import '@mantine/core/styles/SemiCircleProgress.css';`

SimpleGrid

`import '@mantine/core/styles/SimpleGrid.css';`

Skeleton

`import '@mantine/core/styles/Skeleton.css';`

Slider

`import '@mantine/core/styles/Slider.css';`

Spoiler

`import '@mantine/core/styles/Spoiler.css';`

Stack

`import '@mantine/core/styles/Stack.css';`

Stepper

`import '@mantine/core/styles/Stepper.css';`

Switch

`import '@mantine/core/styles/Switch.css';`

Table

`import '@mantine/core/styles/Table.css';`

TableOfContents

`import '@mantine/core/styles/TableOfContents.css';`

Tabs

`import '@mantine/core/styles/Tabs.css';`

Text

`import '@mantine/core/styles/Text.css';`

ThemeIcon

`import '@mantine/core/styles/ThemeIcon.css';`

Timeline

`import '@mantine/core/styles/Timeline.css';`

Title

`import '@mantine/core/styles/Title.css';`

Tooltip

`import '@mantine/core/styles/Tooltip.css';`

Tree

`import '@mantine/core/styles/Tree.css';`

TypographyStylesProvider

`import '@mantine/core/styles/TypographyStylesProvider.css';`

UnstyledButton

`import '@mantine/core/styles/UnstyledButton.css';`

VisuallyHidden

`import '@mantine/core/styles/VisuallyHidden.css';`

CheckboxCard

`import '@mantine/core/styles/CheckboxCard.css';`

CheckboxIndicator

`import '@mantine/core/styles/CheckboxIndicator.css';`

RadioCard

`import '@mantine/core/styles/RadioCard.css';`

RadioIndicator

`import '@mantine/core/styles/RadioIndicator.css';`</content>
</page>

<page>
  <title>Global styles | Mantine</title>
  <url>https://mantine.dev/styles/global-styles/</url>
  <content>`@mantine/core` package includes some global styles that are required for components to work correctly. If you override these styles, some components might not work as expected.

Global styles are automatically imported with:

If you want to import styles [per component](https://mantine.dev/styles/css-files-list/), you need to import all global styles manually:

[CSS reset](#css-reset)
-----------------------

`@mantine/core` package includes minimal CSS reset – it includes only basic styles required for components to work in modern browsers. If you need to support older browsers, you can additionally include [normalize.css](https://necolas.github.io/normalize.css/) or any other CSS reset of your choice.

[Body and :root elements styles](#body-and-root-elements-styles)
----------------------------------------------------------------

`@mantine/core` package includes the following `body` and `:root` elements styles:

[Static classes](#static-classes)
---------------------------------

`@mantine/core` package includes the following static classes:

*   `mantine-active` – contains `:active` styles
*   `mantine-focus-auto` – contains `:focus-visible` styles
*   `mantine-focus-always` – contains `:focus` styles
*   `mantine-focus-never` – removes default browser focus ring
*   `mantine-visible-from-{breakpoint}` – shows element when screen width is greater than breakpoint, for example `mantine-visible-from-sm`
*   `mantine-hidden-from-{breakpoint}` – hides element when screen width is greater than breakpoint, for example `mantine-hidden-from-sm`

You can use these classes with any components or elements:

[Add global styles in your application](#add-global-styles-in-your-application)
-------------------------------------------------------------------------------

It is recommended to use [CSS modules](https://mantine.dev/styles/css-modules/) to apply styles to Mantine components with `className` prop or with [Styles API](https://mantine.dev/styles/styles-api/). CSS modules files names usually end with `.module.css`, if you want to add global styles to your application, create a file with `.css` extension but without `.module` part, for example `global.css`.

In global `.css` files you can reference all Mantine [CSS variables](https://mantine.dev/styles/css-variables/) and change styles of `<body />`, `:root` and other elements. For example, to change body background-color:</content>
</page>

<page>
  <title>CSS variables | Mantine</title>
  <url>https://mantine.dev/styles/css-variables/</url>
  <content>[MantineProvider](https://mantine.dev/theming/mantine-provider/) exposes all Mantine CSS variables based on the given [theme](https://mantine.dev/theming/theme-object/). You can use these variables in [CSS](https://mantine.dev/styles/css-modules/) files, [style prop](https://mantine.dev/styles/style/) or any other styles. Note that not all values are documented on this page, you can find full list of variables on [this page](https://mantine.dev/styles/css-variables-list/).

[Typography variables](#typography-variables)
---------------------------------------------

Typography variables control font family, font size, line height, font weight, and other text-related properties of all Mantine components.

### [Font family](#font-family)

The following CSS variables are used to assign font families to all Mantine components:

You can control these variables in the [theme](https://mantine.dev/theming/theme-object/). Note that if `theme.headings.fontFamily` is not set, `--mantine-font-family-headings` value will be the same as `--mantine-font-family`.

If you want to use system fonts as a fallback for custom fonts, you can reference `DEFAULT_THEME` value instead of defining it manually:

You can reference font family variables in your CSS:

And in [ff style prop](https://mantine.dev/styles/style-props/):

*   `ff="text"` will use `--mantine-font-family` variable
*   `ff="monospace"` will use `--mantine-font-family-monospace` variable
*   `ff="heading"` will use `--mantine-font-family-headings` variable

### [Font size](#font-size)

Font size variables are used in most Mantine components to control text size. The variable that is chosen depends on the component and its `size` prop.

You can reference font size variables in CSS:

And in [fz style prop](https://mantine.dev/styles/style-props/):

To define custom font sizes, can use `theme.fontSizes` property:

Note that `theme.fontSizes` object is merged with the `DEFAULT_THEME.fontSizes` – it is not required to define all values, only those that you want to change.

You can add any number of additional font sizes to the `theme.fontSizes` object. These values will be defined as CSS variables in `--mantine-font-size-{size}` format:

After defining `theme.fontSizes`, you can reference these variables in your CSS:

> **Case conversion**
> 
> Case conversion (camelCase to kebab-case) is not automatically applied to custom font sizes. If you define `theme.fontSizes` with camelCase keys, you need to reference them in camelCase format. For example, if you define `{ customSize: '1rem' }`, you need to reference it as `--mantine-font-size-customSize`.

### [Line height](#line-height)

Line height variables are used in [Text](https://mantine.dev/core/text/) component. In other components, line-height is either calculated based on font size or set to `--mantine-line-height`, which is an alias for `--mantine-line-height-md`.

You can reference line height variables in your CSS:

And in [lh style prop](https://mantine.dev/styles/style-props/):

To define custom line heights, you can use `theme.lineHeights` property:

### [Headings](#headings)

`theme.headings` controls font-size, line-height, font-weight and text-wrap CSS properties of headings in [Title](https://mantine.dev/core/title/) and [TypographyStylesProvider](https://mantine.dev/core/typography-styles-provider/) components.

These variables are used in [Title](https://mantine.dev/core/title/) component, `order` prop controls which heading level to use. For example, `order={3}` Title will use:

*   `--mantine-h3-font-size`
*   `--mantine-h3-line-height`
*   `--mantine-h3-font-weight`

This is h1 title
----------------

This is h2 title
----------------

### This is h3 title

#### This is h4 title

##### This is h5 title

###### This is h6 title

You can reference heading variables in your CSS:

And in [fz and lh style props](https://mantine.dev/styles/style-props/):

To change heading styles, can use `theme.headings` property:

`theme.headings` object is deeply merged with the `DEFAULT_THEME.headings` object – it is not required to define all values, only those that you want to change.

### [Font smoothing](#font-smoothing)

Font smoothing variables control [\-webkit-font-smoothing and moz-osx-font-smoothing](https://developer.mozilla.org/en-US/docs/Web/CSS/font-smooth) CSS properties. These variables are used to make text look better on screens with high pixel density.

Font smoothing variables are controlled by `theme.fontSmoothing` [theme](https://mantine.dev/theming/theme-object/) property, it is `true` by default. If `theme.fontSmoothing` is `false`, both variables will be set to `unset`.

If you need to override font smoothing values, the best way is to disable `theme.fontSmoothing` and set [global styles](https://mantine.dev/styles/global/) on the body element:

[Colors variables](#colors-variables)
-------------------------------------

Colors variables are controlled by `theme.colors` and `theme.primaryColor`. Each color defined in `theme.colors` object is required to have 10 shades. Theme color can be referenced by its name and shade index, for example, `--mantine-color-red-6`.

You can define new colors on the theme object or override existing colors:

The code above will define the following CSS variables:

### [Variant colors](#variant-colors)

Some Mantine components like [Button](https://mantine.dev/core/button/) or [Badge](https://mantine.dev/core/badge/) have `variant` prop that in combination with `color` prop controls the component text, background and border colors. For each variant and color, Mantine defines a set of CSS variables that control these colors. For example, for the default `blue` color the following CSS variables are defined:

For example, if you use [Button](https://mantine.dev/core/button/) component the following way:

The component will have the following styles:

*   Background color will be `var(--mantine-color-pink-filled)`
*   Background color on hover will be `var(--mantine-color-pink-filled-hover)`
*   Text color will be `var(--mantine-color-white)`
*   Border color will be `transparent`

Note that the variables above are not static, they are generated based on the values of `theme.colors` and `theme.primaryShade`. Additionally, their values are different for dark and light color schemes.

Variant colors variables are used in all components that support `color` prop, for example, [Button](https://mantine.dev/core/button/), [Badge](https://mantine.dev/core/badge/), [Avatar](https://mantine.dev/core/avatar/) and [Pagination](https://mantine.dev/core/pagination/). Colors values that are used by these components are determined by `cssVariablesResolver` described below and [variantColorResolver](https://mantine.dev/styles/variants-sizes/#variantcolorresolver).

### [Primary color variables](#primary-color-variables)

Primary color variables are defined by `theme.primaryColor` (which must be a key of `theme.colors`). The following CSS variables are defined for the primary color:

You can reference primary color variables in CSS:

### [Other color variables](#other-color-variables)

The following colors are used in various Mantine components. Note that default values are provided for the light color scheme, dark color scheme values are different.

[Spacing variables](#spacing-variables)
---------------------------------------

`theme.spacing` values are used in most Mantine components to control paddings, margins, and other spacing-related properties. The following CSS variables are defined based on `theme.spacing`:

To define custom spacing values, use `theme.spacing` property:

[Border radius variables](#border-radius-variables)
---------------------------------------------------

Mantine components that support `radius` prop use border radius variables to control border radius. The following CSS variables are defined based on `theme.radius`:

Additionally, `--mantine-radius-default` variable is defined based on `theme.defaultRadius` value. If `radius` prop on components is not set explicitly, `--mantine-radius-default` is used instead.

To define custom border radius values, use `theme.radius` and `theme.defaultRadius` properties:

[Shadow variables](#shadow-variables)
-------------------------------------

Shadow variables are used in all Mantine components that support `shadow` prop. The following CSS variables are defined based on `theme.shadows`:

To define custom shadow values, use `theme.shadows` property:

[z-index variables](#z-index-variables)
---------------------------------------

z-index variables are defined in `@mantine/core/styles.css`. Unlike other variables, z-index variables are not controlled by the theme and are not exposed in the theme object.

You can reference z-index variables in CSS:

And in components by referencing CSS variable:

[CSS variables resolver](#css-variables-resolver)
-------------------------------------------------

`cssVariablesResolver` prop on [MantineProvider](https://mantine.dev/theming/mantine-provider/) allows you to modify values of Mantine CSS variables or even add your own variables. `cssVariablesResolver` is a function that accepts [theme](https://mantine.dev/theming/theme-object/) as a single argument and returns an object with CSS variables divided into three groups:

*   `variables` – variables that do not depend on color scheme
*   `light` – variables for light color scheme only
*   `dark` – variables for dark color scheme only

Example of adding new CSS variables based on `theme.other`:

Then you will be able to use `--mantine-hero-height` and `--mantine-color-deep-orange` variables in any part of your application:</content>
</page>

<page>
  <title>rem, em and px units | Mantine</title>
  <url>https://mantine.dev/styles/rem/</url>
  <content>[rem units](#rem-units)
-----------------------

All Mantine components use `rem` units to apply size styles (`margin`, `padding`, `width`, etc.). By default, `1rem` is considered to be `16px` as it is a default setting in most browsers. All components scale based on the user's browser font-size settings or font-size of `html`/`:root`.

[rem units scaling](#rem-units-scaling)
---------------------------------------

If you want to change font-size of `:root`/`html` element and preserve Mantine components sizes, set `scale` on [theme](https://mantine.dev/theming/theme-object/) to the value of `1 / htmlFontSize`.

For example, if you set `html` font-size to `10px` and want to scale Mantine components accordingly, you need to set `scale` to `1 / (10 / 16)` (16 – default font-size) = `1 / 0.625` = `1.6`:

[em units](#em-units)
---------------------

`em` units are used in media queries the same way as `rem` units, but they are not affected by font-size specified on `html`/`:root` element. `1em` is considered to be `16px`.

[px conversions](#px-conversions)
---------------------------------

You can use numbers in some Mantine components props. Numbers are treated as `px` and converted to `rem`, for example:

The same conversion happens in [style props](https://mantine.dev/styles/style-props/):

[rem and em function](#rem-and-em-function)
-------------------------------------------

`@mantine/core` package exports `rem` and `em` function that can be used to convert `px` into `rem`/`em`:

[Convert rem to px](#convert-rem-to-px)
---------------------------------------

To convert `rem`/`em` to `px` use `px` function exported from `@mantine/core`:

[rem/em functions in css files](#remem-functions-in-css-files)
--------------------------------------------------------------

You can use `rem` and `em` function in [css files](https://mantine.dev/styles/css-modules/) if [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/) is installed:

[Convert px to rem automatically in css files](#convert-px-to-rem-automatically-in-css-files)
---------------------------------------------------------------------------------------------

To convert `px` to `rem` automatically in css files, enable `autoRem` option in [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/) configuration:</content>
</page>

<page>
  <title>CSS variables list | Mantine</title>
  <url>https://mantine.dev/styles/css-variables-list/</url>
  <content>This page contains a list of all Mantine CSS variables that are generated from default theme.

<table><tbody><tr data-with-row-border="true"><td><code dir="ltr">--mantine-primary-color-contrast</code></td><td>var(--mantine-color-white)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-bright</code></td><td>var(--mantine-color-white)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-text</code></td><td>var(--mantine-color-dark-0)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-body</code></td><td>var(--mantine-color-dark-7)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-error</code></td><td>var(--mantine-color-red-8)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-placeholder</code></td><td>var(--mantine-color-dark-3)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-anchor</code></td><td>var(--mantine-color-blue-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-default</code></td><td>var(--mantine-color-dark-6)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-default-hover</code></td><td>var(--mantine-color-dark-5)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-default-color</code></td><td>var(--mantine-color-white)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-default-border</code></td><td>var(--mantine-color-dark-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-dimmed</code></td><td>var(--mantine-color-dark-2)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-disabled</code></td><td>var(--mantine-color-dark-6)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-disabled-color</code></td><td>var(--mantine-color-dark-3)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-disabled-border</code></td><td>var(--mantine-color-gray-6)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-dark-text</code></td><td>var(--mantine-color-dark-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-dark-filled</code></td><td>var(--mantine-color-dark-8)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-dark-filled-hover</code></td><td>var(--mantine-color-dark-9)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-dark-light</code></td><td>rgba(46, 46, 46, 0.15)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-dark-light-hover</code></td><td>rgba(46, 46, 46, 0.2)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-dark-light-color</code></td><td>var(--mantine-color-dark-3)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-dark-outline</code></td><td>var(--mantine-color-dark-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-dark-outline-hover</code></td><td>rgba(66, 66, 66, 0.05)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-gray-text</code></td><td>var(--mantine-color-gray-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-gray-filled</code></td><td>var(--mantine-color-gray-8)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-gray-filled-hover</code></td><td>var(--mantine-color-gray-9)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-gray-light</code></td><td>rgba(134, 142, 150, 0.15)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-gray-light-hover</code></td><td>rgba(134, 142, 150, 0.2)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-gray-light-color</code></td><td>var(--mantine-color-gray-3)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-gray-outline</code></td><td>var(--mantine-color-gray-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-gray-outline-hover</code></td><td>rgba(206, 212, 218, 0.05)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-red-text</code></td><td>var(--mantine-color-red-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-red-filled</code></td><td>var(--mantine-color-red-8)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-red-filled-hover</code></td><td>var(--mantine-color-red-9)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-red-light</code></td><td>rgba(250, 82, 82, 0.15)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-red-light-hover</code></td><td>rgba(250, 82, 82, 0.2)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-red-light-color</code></td><td>var(--mantine-color-red-3)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-red-outline</code></td><td>var(--mantine-color-red-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-red-outline-hover</code></td><td>rgba(255, 135, 135, 0.05)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-pink-text</code></td><td>var(--mantine-color-pink-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-pink-filled</code></td><td>var(--mantine-color-pink-8)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-pink-filled-hover</code></td><td>var(--mantine-color-pink-9)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-pink-light</code></td><td>rgba(230, 73, 128, 0.15)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-pink-light-hover</code></td><td>rgba(230, 73, 128, 0.2)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-pink-light-color</code></td><td>var(--mantine-color-pink-3)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-pink-outline</code></td><td>var(--mantine-color-pink-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-pink-outline-hover</code></td><td>rgba(247, 131, 172, 0.05)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-grape-text</code></td><td>var(--mantine-color-grape-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-grape-filled</code></td><td>var(--mantine-color-grape-8)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-grape-filled-hover</code></td><td>var(--mantine-color-grape-9)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-grape-light</code></td><td>rgba(190, 75, 219, 0.15)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-grape-light-hover</code></td><td>rgba(190, 75, 219, 0.2)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-grape-light-color</code></td><td>var(--mantine-color-grape-3)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-grape-outline</code></td><td>var(--mantine-color-grape-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-grape-outline-hover</code></td><td>rgba(218, 119, 242, 0.05)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-violet-text</code></td><td>var(--mantine-color-violet-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-violet-filled</code></td><td>var(--mantine-color-violet-8)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-violet-filled-hover</code></td><td>var(--mantine-color-violet-9)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-violet-light</code></td><td>rgba(121, 80, 242, 0.15)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-violet-light-hover</code></td><td>rgba(121, 80, 242, 0.2)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-violet-light-color</code></td><td>var(--mantine-color-violet-3)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-violet-outline</code></td><td>var(--mantine-color-violet-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-violet-outline-hover</code></td><td>rgba(151, 117, 250, 0.05)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-indigo-text</code></td><td>var(--mantine-color-indigo-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-indigo-filled</code></td><td>var(--mantine-color-indigo-8)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-indigo-filled-hover</code></td><td>var(--mantine-color-indigo-9)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-indigo-light</code></td><td>rgba(76, 110, 245, 0.15)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-indigo-light-hover</code></td><td>rgba(76, 110, 245, 0.2)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-indigo-light-color</code></td><td>var(--mantine-color-indigo-3)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-indigo-outline</code></td><td>var(--mantine-color-indigo-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-indigo-outline-hover</code></td><td>rgba(116, 143, 252, 0.05)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-blue-text</code></td><td>var(--mantine-color-blue-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-blue-filled</code></td><td>var(--mantine-color-blue-8)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-blue-filled-hover</code></td><td>var(--mantine-color-blue-9)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-blue-light</code></td><td>rgba(34, 139, 230, 0.15)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-blue-light-hover</code></td><td>rgba(34, 139, 230, 0.2)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-blue-light-color</code></td><td>var(--mantine-color-blue-3)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-blue-outline</code></td><td>var(--mantine-color-blue-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-blue-outline-hover</code></td><td>rgba(77, 171, 247, 0.05)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-cyan-text</code></td><td>var(--mantine-color-cyan-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-cyan-filled</code></td><td>var(--mantine-color-cyan-8)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-cyan-filled-hover</code></td><td>var(--mantine-color-cyan-9)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-cyan-light</code></td><td>rgba(21, 170, 191, 0.15)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-cyan-light-hover</code></td><td>rgba(21, 170, 191, 0.2)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-cyan-light-color</code></td><td>var(--mantine-color-cyan-3)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-cyan-outline</code></td><td>var(--mantine-color-cyan-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-cyan-outline-hover</code></td><td>rgba(59, 201, 219, 0.05)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-teal-text</code></td><td>var(--mantine-color-teal-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-teal-filled</code></td><td>var(--mantine-color-teal-8)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-teal-filled-hover</code></td><td>var(--mantine-color-teal-9)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-teal-light</code></td><td>rgba(18, 184, 134, 0.15)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-teal-light-hover</code></td><td>rgba(18, 184, 134, 0.2)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-teal-light-color</code></td><td>var(--mantine-color-teal-3)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-teal-outline</code></td><td>var(--mantine-color-teal-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-teal-outline-hover</code></td><td>rgba(56, 217, 169, 0.05)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-green-text</code></td><td>var(--mantine-color-green-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-green-filled</code></td><td>var(--mantine-color-green-8)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-green-filled-hover</code></td><td>var(--mantine-color-green-9)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-green-light</code></td><td>rgba(64, 192, 87, 0.15)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-green-light-hover</code></td><td>rgba(64, 192, 87, 0.2)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-green-light-color</code></td><td>var(--mantine-color-green-3)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-green-outline</code></td><td>var(--mantine-color-green-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-green-outline-hover</code></td><td>rgba(105, 219, 124, 0.05)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-lime-text</code></td><td>var(--mantine-color-lime-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-lime-filled</code></td><td>var(--mantine-color-lime-8)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-lime-filled-hover</code></td><td>var(--mantine-color-lime-9)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-lime-light</code></td><td>rgba(130, 201, 30, 0.15)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-lime-light-hover</code></td><td>rgba(130, 201, 30, 0.2)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-lime-light-color</code></td><td>var(--mantine-color-lime-3)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-lime-outline</code></td><td>var(--mantine-color-lime-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-lime-outline-hover</code></td><td>rgba(169, 227, 75, 0.05)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-yellow-text</code></td><td>var(--mantine-color-yellow-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-yellow-filled</code></td><td>var(--mantine-color-yellow-8)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-yellow-filled-hover</code></td><td>var(--mantine-color-yellow-9)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-yellow-light</code></td><td>rgba(250, 176, 5, 0.15)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-yellow-light-hover</code></td><td>rgba(250, 176, 5, 0.2)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-yellow-light-color</code></td><td>var(--mantine-color-yellow-3)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-yellow-outline</code></td><td>var(--mantine-color-yellow-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-yellow-outline-hover</code></td><td>rgba(255, 212, 59, 0.05)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-orange-text</code></td><td>var(--mantine-color-orange-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-orange-filled</code></td><td>var(--mantine-color-orange-8)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-orange-filled-hover</code></td><td>var(--mantine-color-orange-9)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-orange-light</code></td><td>rgba(253, 126, 20, 0.15)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-orange-light-hover</code></td><td>rgba(253, 126, 20, 0.2)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-orange-light-color</code></td><td>var(--mantine-color-orange-3)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-orange-outline</code></td><td>var(--mantine-color-orange-4)</td><td></td></tr><tr data-with-row-border="true"><td><code dir="ltr">--mantine-color-orange-outline-hover</code></td><td>rgba(255, 169, 77, 0.05)</td><td></td></tr></tbody></table></content>
</page>

<page>
  <title>style prop | Mantine</title>
  <url>https://mantine.dev/styles/style/</url>
  <content>All Mantine components that have root element support `style` prop. It works similar to React `style` prop, but with some additional features.

[Style object](#style-object)
-----------------------------

You can pass a style object to the `style` prop – in this case it works the same way as React `style` prop. You can use Mantine [CSS variables](https://mantine.dev/styles/css-variables/) in style object the same way as in [.css files](https://mantine.dev/styles/css-modules/).

[Define CSS variables in style prop](#define-css-variables-in-style-prop)
-------------------------------------------------------------------------

You can define CSS variables in the style prop. Note that it only works with Mantine components:

[Style function](#style-function)
---------------------------------

You can pass a style function to the `style` prop – in this case it will be called with [theme](https://mantine.dev/theming/theme-object/). It is useful when you need to access [theme](https://mantine.dev/theming/theme-object/) properties that are not exposed as [CSS variables](https://mantine.dev/styles/css-variables/), for example, properties from `theme.other`.

[Styles array](#styles-array)
-----------------------------

You can pass an array of style objects and/or functions to `style` prop – in this case, all styles will be merged into one object. It is useful when you want to create a wrapper around Mantine component, add inline styles and keep the option to pass `style` prop to it.</content>
</page>

<page>
  <title>data-* attributes | Mantine</title>
  <url>https://mantine.dev/styles/data-attributes/</url>
  <content>Mantine components use `data-*` attributes to apply styles. These attributes are used as a modifier to apply styles based on component state. General rule of Mantine components styles: one class with shared styles and any number of `data-*` attributes as modifiers.

Example of applying styles with `data-*` attributes:

[data attributes values](#data-attributes-values)
-------------------------------------------------

Most of the `data-*` attributes do not have associated values, they represent boolean state or a feature. For example, when the `disabled` prop on [Button](https://mantine.dev/core/button/) is set, the `data-disabled` attribute is added to the `<button />` element:

Will output the following HTML:

You can then use this attribute to apply styles to the disabled button:

When the `disabled` prop is not set, then the `data-disabled` attribute is not added to the button:

In some cases, `data-*` attributes have associated values, for example, a [Button](https://mantine.dev/core/button/) component's `section` element has an associated `data-position` attribute which can be `left` or `right`. The following example will render two `section` elements, one with `data-position="left"` and another with `data-position="right"`:

Will output the following HTML:

You can then use this attribute to apply styles to the left and right sections:

[Components data attributes documentation](#components-data-attributes-documentation)
-------------------------------------------------------------------------------------

Every component that uses `data-*` attributes has a dedicated section under the `Styles API` tab.

[Button](https://mantine.dev/core/button/) component `data-*` attributes table:

How to read the table:

*   `selector` column – [Styles API](https://mantine.dev/styles/styles-api/) selector (or multiple selectors) to which data attribute is added
*   `attribute` column – data attribute name
*   `condition` column – condition based on which the data attribute is added to the element
*   `value` column – value of the data attribute

[mod prop](#mod-prop)
---------------------

All components support `mod` prop, which allows adding data attributes to the root element:</content>
</page>

<page>
  <title>Variants and sizes | Mantine</title>
  <url>https://mantine.dev/styles/variants-sizes/</url>
  <content>[Adding custom variants](#adding-custom-variants)
-------------------------------------------------

Most of Mantine components support `variant` prop, it can be used in CSS variables resolver, and it is also exposed as `data-variant="{value}"` attribute on the root element of the component. The easiest way to add custom variants is to add styles that use `[data-variant="{value}"]`.

Example of adding a new variant to the [Input](https://mantine.dev/core/input/) component:

*   `underline` variant styles are added
*   `filled` variant is a default variant – you do not need to define any additional styles for it

Note that you can add custom variants to every Mantine component that supports [Styles API](https://mantine.dev/styles/styles-api/) even if there are no variants defined on the library side.

> **Overriding existing variants styles**
> 
> Apart from adding new variants, you can also override existing ones, for example, you can change the `filled` variant of the [Input](https://mantine.dev/core/input/) component with `.input[data-variant="filled"]` selector.

[Custom variants types](#custom-variants-types)
-----------------------------------------------

You can define types for custom variants by creating `mantine.d.ts` file in your project and extending `{x}Props` interface with the new variant type.

Example of adding custom variant type to [Button](https://mantine.dev/core/button/) component:

[variantColorResolver](#variantcolorresolver)
---------------------------------------------

[Button](https://mantine.dev/core/button/), [Badge](https://mantine.dev/core/badge/), [ActionIcon](https://mantine.dev/core/action-icon/) and other components support custom variants with [variantColorResolver](https://mantine.dev/theming/colors/#colors-variant-resolver) – it supports both changing colors and adding new variants. Note that `theme.variantColorResolver` is responsible only for colors, if you need to change other properties, use `data-variant` attribute.

[Sizes with components CSS variables](#sizes-with-components-css-variables)
---------------------------------------------------------------------------

You can add custom sizes to any component that supports `size` prop by providing a custom CSS variables resolver, usually it is done in `theme.components`:

[Sizes with data-size attribute](#sizes-with-data-size-attribute)
-----------------------------------------------------------------

Every component that supports `size` prop exposes it as `data-size="{value}"` attribute on the root element. You can use it to add custom sizes:

[Sizes with static CSS variables](#sizes-with-static-css-variables)
-------------------------------------------------------------------

Mantine components sizes are defined with CSS variables (usually on root element), for example, [ActionIcon](https://mantine.dev/core/action-icon/) component has the following CSS variables:

You can override these values with [Styles API](https://mantine.dev/styles/styles-api/) or add new sizes values:

Note that some components have more than one CSS variable for size, for example, the [Button](https://mantine.dev/core/button/) component has the following CSS variables:

Usually, it is more convenient to use `data-size` attribute or `vars` on [theme](https://mantine.dev/theming/theme-object/) to customize sizes in this case.</content>
</page>

<page>
  <title>Color functions | Mantine</title>
  <url>https://mantine.dev/styles/color-functions/</url>
  <content>`@mantine/core` package exports several functions that can be used to manipulate colors or extract information before using them as CSS value.

[darken and lighten](#darken-and-lighten)
-----------------------------------------

`darken` and `lighten` functions can be used to manipulate color brightness, they accept color in any format as first argument and the amount of lightness to add/remove as second argument.

[alpha](#alpha)
---------------

`alpha` function converts color to rgba format with a given alpha channel, it is usually used to make colors more transparent. If it is not possible to convert color to rgba format (for example if color is a CSS variable), the function will use [color-mix](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-mix). Note that `color-mix` is not supported in some older browsers, you can check [caniuse](https://caniuse.com/mdn-css_types_color_color-mix) for more information.

[parseThemeColor](#parsethemecolor)
-----------------------------------

`parseThemeColor` function returns information about a given color in the following format:

`parseThemeColor` function can be used everywhere `theme` object is available, for example in [CSS variables resolver](https://mantine.dev/styles/css-variables/), [variant color resolver](https://mantine.dev/theming/colors/#colors-variant-resolver) or component body:

[getThemeColor](#getthemecolor)
-------------------------------

`getThemeColor` is a simpler version of `parseThemeColor` function, it accepts a color string as first argument and theme object as second argument. It returns parsed color value or CSS variable:

[getGradient](#getgradient)
---------------------------

`getGradient` function transforms given `MantineGradient` object to CSS gradient string:

[isLightColor](#islightcolor)
-----------------------------

`isLightColor` function can be used to achieve better contrast between text and background:

[luminance](#luminance)
-----------------------

`luminance` function returns color luminance, it can be used to check colors contrast:</content>
</page>

<page>
  <title>Style props | Mantine</title>
  <url>https://mantine.dev/styles/style-props/</url>
  <content>With style props, you can add inline styles to any Mantine component. Style props add styles to the **root** element, if you need to style nested elements, use [Styles API](https://mantine.dev/styles/styles-api/) instead.

[Supported props](#supported-props)
-----------------------------------

All Mantine components that have root element support the following style props:

[Theme values](#theme-values)
-----------------------------

Some style props can reference values from theme, for example `mt` will use `theme.spacing` value if you set `xs`, `sm`, `md`, `lg`, `xl`:

In `c`, `bd` and `bg` props you can reference colors from `theme.colors`:

[Responsive styles](#responsive-styles)
---------------------------------------

You can use object syntax to add responsive styles with style props. Note that responsive style props are [less performant](https://mantine.dev/styles/styles-performance/) than regular style props, it is not recommended to use them in large lists of elements.

Box with responsive style props

Responsive values are calculated the following way:

*   `base` value is used when none of breakpoint values are applied
*   `xs`, `sm`, `md`, `lg`, `xl` values are used when the viewport width is larger that the value of corresponding breakpoint specified in [theme.breakpoints](https://mantine.dev/styles/responsive/)

In this case the element will have the following styles:</content>
</page>

<page>
  <title>RTL (right-to-left) | Mantine</title>
  <url>https://mantine.dev/styles/rtl/</url>
  <content>Right-to-left direction
-----------------------

All Mantine components support right-to-left direction out of the box. You can preview how components work with RTL direction by clicking direction control in the top right corner or pressing `Ctrl + Shift + L`.

[DirectionProvider](#directionprovider)
---------------------------------------

`DirectionProvider` component is used to set direction for all components inside it. It is required to wrap your application with `DirectionProvider` if you are planning to either use RTL direction or change direction dynamically.

`DirectionProvider` supports the following props:

Setup `DirectionProvider` in your application:

[dir attribute](#dir-attribute)
-------------------------------

It is required to set `dir` attribute on the root element of your application, usually it is `html` element. `DirectionProvider` will use its value to set direction on mount if `detectDirection` prop is set to `true`. Note that this guide does not cover setting `dir` attribute for different frameworks – follow your framework documentation to learn how to do it.

[useDirection hook](#usedirection-hook)
---------------------------------------

`useDirection` returns an object with the following properties:

*   `dir` – current direction
*   `setDirection` – function to set direction
*   `toggleDirection` – function to change direction to the opposite value

You can use it to create direction control in your application:

[rtl mixin](#rtl-mixin)
-----------------------

If you have [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/) installed then you can use `rtl` mixin in `.css` files:</content>
</page>

<page>
  <title>Usage with Emotion | Mantine</title>
  <url>https://mantine.dev/styles/emotion/</url>
  <content>Prior to version 7.0 Mantine used [Emotion](https://emotion.sh/) as a styling solution. It was replaced with [CSS modules](https://mantine.dev/styles/css-modules/) in version 7.0, but you can still use Emotion with Mantine if you prefer it over CSS modules.

Note that `createStyles` function, `sx` and `styles` prop work different from the same features in [version 6.x](https://v6.mantine.dev/styles/create-styles/). If you are planning to upgrade from version 6.x to 7.x, follow the [migration guide](https://mantine.dev/guides/6x-to-7x/).

`@mantine/emotion` package is compatible with `@mantine/core` 7.9.0 and higher. Before installing, make sure that you are using the latest version of all `@mantine/*` packages.

[Caveats and support](#caveats-and-support)
-------------------------------------------

[Emotion](https://emotion.sh/) is a runtime CSS-in-JS library – styles are generated and injected into the DOM at runtime. This approach has some limitations:

*   **Limited server-side rendering support** – modern frameworks like Next.js with app router do not fully support emotion or require additional configuration.
*   **Runtime overhead** – styles are generated and injected at runtime, which can lead to performance issues on pages with a lot of components.
*   **Additional bundle size** – your bundle will include `@emotion/react` (21.2kB minified), `@mantine/emotion` (~2kb minified) and all styles that you use in your components.

`@mantine/emotion` package can be used with the following frameworks:

*   **Vite** and **CRA** with basic setup
*   **Next.js with pages router** with additional setup for server side rendering provided by the package
*   **Next.js with app router** with additional setup for server side rendering provided by Emotion
*   Any other framework that does not require server-side rendering with basic setup

There is no official support (the package probably can be used but it's not tested and documentation is not provided) for:

*   **React Router**
*   **Gatsby**
*   **Redwood**
*   Any other framework that has server-side rendering

Note that Emotion is not recommended for new projects, if you are starting a new project with Mantine, consider using [CSS modules](https://mantine.dev/styles/css-modules/) instead.

[Usage with Vite](#usage-with-vite)
-----------------------------------

[View example repository with full setup](https://github.com/mantinedev/vite-min-template/tree/emotion)

Install dependencies:

Create `emotion.d.ts` file in `src` directory to add types support for `sx` and `styles` props:

Wrap your application with `MantineEmotionProvider` and add `emotionTransform` to `MantineProvider`:

Done! You can now use `sx`, `styles` props and `createStyles` in your application:

[Usage with Next.js pages router](#usage-with-nextjs-pages-router)
------------------------------------------------------------------

[View example repository with full setup](https://github.com/mantinedev/next-pages-min-template/tree/emotion)

Install dependencies:

Create `emotion` folder with `cache.ts` and `emotion.d.ts` files.

`cache.ts` file:

`emotion.d.ts` file:

Add the following content to `pages/_document.tsx` file:

Add `MantineEmotionProvider` and `emotionTransform` to `pages/_app.tsx` file:

Done! You can now use `sx`, `styles` props and `createStyles` in your application:

[Usage with Next.js app router](#usage-with-nextjs-app-router)
--------------------------------------------------------------

[View example repository with full setup](https://github.com/mantinedev/next-app-min-template/tree/emotion)

Install dependencies:

Create `app/emotion.d.ts` file with the following content:

Create `app/EmotionRootStyleRegistry.tsx` file with the following content:

Add `RootStyleRegistry`, `MantineEmotionProvider` and `emotionTransform` to `app/layout.tsx`. It should look something like this:

Done! You can now use `sx`, `styles` props and `createStyles` in your application. Note that `'use client'` is required in most components that use `sx`, `styles` or `createStyles`:

[sx prop](#sx-prop)
-------------------

With the setup above you can use `sx` prop in all Mantine components. `sx` prop allows adding styles to the root element of the component. It accepts either a styles object or a function that receives theme, utilities and returns styles object:

[styles prop](#styles-prop)
---------------------------

`styles` prop works similar to `sx` prop, but it allows adding styles to all nested elements of the components that are specified in the Styles API table. `styles` prop accepts either an object of styles objects or a function that receives theme, component props, utilities and returns styles object:

[styles in theme](#styles-in-theme)
-----------------------------------

You can add styles to Mantine components with [Styles API](https://mantine.dev/styles/styles-api/) using Emotion with `styles` prop. Note that to avoid types collisions, you should not use `Component.extend` method and just pass component configuration object directly.

[createStyles](#createstyles)
-----------------------------

`createStyles` function accepts a function to generate styles with [Emotion](https://emotion.sh/). The function receives 3 arguments that will be described more detailed in the following demos:

*   `theme` – [Mantine theme object](https://mantine.dev/theming/theme-object/)
*   `params` – object with additional parameters that can be passed to the function in `useStyles` hook
*   `u` - object with utilities to generate selectors

`createStyles` function returns `useStyles` hook that should be called in the component that uses given styles:

### [Pseudo-classes](#pseudo-classes)

You can add pseudo-classes the same way as in any css-preprocessor like Sass:

### [Styles parameters](#styles-parameters)

You can receive any amount of parameters as second argument of `createStyles` function, latter you will need to pass those parameters as argument to `useStyles` hook:

### [Composition and nested selectors](#composition-and-nested-selectors)

Since `createStyles` produces scoped class names you will need to create a reference to selector in order to get static selector. Use `u.ref` function to assign static selectors:

### [Classes merging (cx function)](#classes-merging-cx-function)

To merge class names use `cx` function, it has the same api as [clsx](https://www.npmjs.com/package/clsx) package.

**!important:** Do not use external libraries like [classnames](https://www.npmjs.com/package/classnames) or [clsx](https://www.npmjs.com/package/clsx) with class names created with `createStyles` function as it will produce styles collisions.

### [Media queries](#media-queries)

You can use nested media queries like in Sass. Within query body you can use `theme.breakpoints` defined with [MantineProvider](https://mantine.dev/theming/mantine-provider/) or just static values:

### [Keyframes](#keyframes)

[Utilities](#utilities)
-----------------------

`sx`, `styles` and `createStyles` callback functions receive `u` object with utilities to generate selectors. `u` object contains the following properties:

All utilities except `ref` can be used as selectors in styles object:</content>
</page>

<page>
  <title>Usage with Sass | Mantine</title>
  <url>https://mantine.dev/styles/sass/</url>
  <content>This guide will explain how to use [Sass](https://sass-lang.com/) in combination with [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/). Note that examples on mantine.dev website use only `postcss-preset-mantine` – you will need to modify them to use with Sass.

[Sass modules](#sass-modules)
-----------------------------

You can use Sass modules the same way as [CSS modules](https://mantine.dev/styles/css-modules/):

*   Use `*.module.scss`/`*.module.sass` extension for your files to enable modules
*   Use `*.scss`/`*.sass` extension for global styles

[Usage with Vite](#usage-with-vite)
-----------------------------------

Install `sass`:

Add mantine resources in your `vite.config.js` file:

Create `src/_mantine.scss` file:

All done! you can now use breakpoint variables, `rem` function, `hover`, `light`/`dark` mixins:

[Usage with Next.js](#usage-with-nextjs)
----------------------------------------

Install `sass`:

Add mantine resources in your `next.config.mjs` file:

Create `_mantine.scss` file in the root folder of your project:

All done! you can now use breakpoint variables, `rem` function, `hover`, `light`/`dark` mixins:</content>
</page>

<page>
  <title>Vanilla extract | Mantine</title>
  <url>https://mantine.dev/styles/vanilla-extract/</url>
  <content>Vanilla extract integration
---------------------------

[Vanilla extract](https://vanilla-extract.style/) is a TypeScript CSS preprocessor that generates static CSS files at build time. It is a great alternative to [CSS Modules](https://mantine.dev/styles/css-modules/) if you prefer to write your styles in TypeScript.

[Vanilla extract vs CSS Modules](#vanilla-extract-vs-css-modules)
-----------------------------------------------------------------

[Vanilla extract](https://vanilla-extract.style/) and [CSS Modules](https://mantine.dev/styles/css-modules/) do the same thing, but with different syntax. Common features of [Vanilla extract](https://vanilla-extract.style/) and [CSS Modules](https://mantine.dev/styles/css-modules/):

*   Styles are generated at build time – no runtime and performance overhead
*   Classes names are scoped to the styles file

Differences between [Vanilla extract](https://vanilla-extract.style/) and [CSS Modules](https://mantine.dev/styles/css-modules/):

*   Vanilla extract styles are type safe
*   You can use any JavaScript/TypeScript code in Vanilla extract styles, including [color functions](https://mantine.dev/styles/color-functions/)
*   With Vanilla extract you do not have access to [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/) features like `light-dark` function and `hover` mixin. Because of this, you will not be able to copy-paste all demos from Mantine documentation and use them with Vanilla extract.
*   Vanilla extract requires additional configuration and setup that may not be available for your build tool/framework. Most popular tools like [Next.js](https://nextjs.org/) and [Vite](https://vitejs.dev/) have plugins for Vanilla extract, but if you are using something more niche, you might need to configure it yourself.

Note that you can use both [Vanilla extract](https://vanilla-extract.style/) and [CSS Modules](https://mantine.dev/styles/css-modules/) in the same project, it will not cause any issues: performance will be the same and the bundle size will not be impacted.

[Installation](#installation)
-----------------------------

Follow the [installation instructions](https://vanilla-extract.style/documentation/getting-started) to install vanilla extract. Then install `@mantine/vanilla-extract` package, it exports `themeToVars` function to convert Mantine theme to CSS variables:

[Templates](#templates)
-----------------------

You can use one of the following templates to get started or a reference for your own setup. Note that all templates include only minimal setup.

<table><tbody><tr data-with-row-border="true" data-hover="true"><td></td><td><p>next-vanilla-extract-template</p><p>Next.js template with Vanilla extract example</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/mantinedev/next-vanilla-extract-template" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr><tr data-with-row-border="true" data-hover="true"><td></td><td><p>vite-vanilla-extract-template</p><p>Vite template with Vanilla extract example</p></td><td><a data-variant="default" data-size="xs" data-with-right-section="true" href="https://github.com/mantinedev/vite-vanilla-extract-template" target="_blank"><span><span>Use template</span><span data-position="right"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6"></path><path d="M11 13l9 -9"></path><path d="M15 4h5v5"></path></svg></span></span></a></td></tr></tbody></table>

[Theming](#theming)
-------------------

Vanilla extract provides [createTheme](https://vanilla-extract.style/documentation/theming/) function which converts given theme object into CSS variables and assigns them to `:root` or other selector. You should not use Vanilla extract `createTheme` to generate Mantine theme tokens – all Mantine [theme](https://mantine.dev/theming/theme-object/) properties are already exposed as CSS variables. Instead, use `themeToVars` function from `@mantine/vanilla-extract` package to create an object with CSS variables from Mantine theme:

[Styling](#styling)
-------------------

Import `vars` object in `*.css.ts` files to access Mantine [CSS variables](https://mantine.dev/styles/css-variables/):

[rem and em](#rem-and-em)
-------------------------

To convert px to [rem or em](https://mantine.dev/styles/rem/) use `rem` and `em` functions from `@mantine/core` package:

[light and dark selectors](#light-and-dark-selectors)
-----------------------------------------------------

`vars` object contains `lightSelector` and `darkSelector` properties which can be used to apply styles only in light or dark color scheme:

Note that usually it is more convenient to use only one of them: apply styles for light color scheme and then override them for dark color scheme with `vars.darkSelector` (or vice versa):

[largerThan and smallerThan](#largerthan-and-smallerthan)
---------------------------------------------------------

`vars` object contains `largerThan` and `smallerThan` properties which can be used in `@media` as a shorthand for `min-width` and `max-width`:

[rtl selector](#rtl-selector)
-----------------------------

Use `vars.rtlSelector` to apply styles only in rtl direction:</content>
</page>

<page>
  <title>Styles performance | Mantine</title>
  <url>https://mantine.dev/styles/styles-performance/</url>
  <content>[CSS modules](#css-modules)
---------------------------

[CSS modules](https://mantine.dev/styles/css-modules/) is the most performant way to apply styles – this approach generates static CSS that is never re-evaluated. 99% of Mantine components styles are generated with CSS modules – components are optimized out of the box.

In most cases, it is recommended to use [CSS modules](https://mantine.dev/styles/css-modules/) to style your components as well. You can apply styles to HTML elements with `className` prop and to Mantine components with `className`, `classNames` props.

Applying styles with `className`:

Box component with some styles

Applying styles with `classNames` (see [Styles API guide](https://mantine.dev/styles/styles-api/) to learn more):

[Inline styles](#inline-styles)
-------------------------------

Inline styles (`style` and `styles` props) are less performant than CSS modules, but still performant enough to be used in most cases if it is your preferred way of styling in your project.

Inline styles caveats:

*   Styles are not reused between components, each component will generate its own styles, for example, if you have 100 buttons with the same styles, CSS modules will generate 1 class for all of them, inline styles will generate 100 `style` attributes
*   If inline styles are overused, it can increase bundle size and output HTML size
*   _Not performance related_: inline styles have higher specificity than CSS modules, so if you want to override inline styles you will have to use `!important` or use another inline styles

Example of inline styles:

[Style props](#style-props)
---------------------------

[Style props](https://mantine.dev/styles/style-props/) transform component props into inline styles. Style props have the same caveats as inline styles, it is not recommended to use them as the primary means of styling your components. Usually, style props are used to apply 1–3 styles to a component – using them this way does not impact performance.

[Responsive style props](#responsive-style-props)
-------------------------------------------------

Responsive [style props](https://mantine.dev/styles/style-props/) have worse performance than regular style props because they require injecting `<style />` tag next to the component. It is fine to use responsive style props to apply styles to several components, but it is not recommended to use them in large lists of components, for example, if you have 1000 inputs with responsive margins, it is better to refactor to use `classNames` prop:

[Components responsive props](#components-responsive-props)
-----------------------------------------------------------

Some components, like [SimpleGrid](https://mantine.dev/core/simple-grid/) and [Grid](https://mantine.dev/core/grid/) rely on the same mechanism as responsive style props to apply styles. The limitations are the same – it is fine to use these several of these components on a page, but it is not recommended to use them in large lists of components.</content>
</page>

<page>
  <title>Button | Mantine</title>
  <url>https://mantine.dev/core/button/</url>
  <content>[Usage](#usage)
---------------

[Full width](#full-width)
-------------------------

If `fullWidth` prop is set `Button` will take 100% of parent width:

[Left and right sections](#left-and-right-sections)
---------------------------------------------------

`leftSection` and `rightSection` allow adding icons or any other element to the left and right side of the button. When a section is added, padding on the corresponding side is reduced.

Note that `leftSection` and `rightSection` are flipped in [RTL](https://mantine.dev/styles/rtl/) mode (`leftSection` is displayed on the right and `rightSection` is displayed on the left).

[Sections position](#sections-position)
---------------------------------------

`justify` prop sets `justify-content` of `inner` element. You can use it to change the alignment of left and right sections. For example, to spread them across the button set `justify="space-between"`.

If you need to align just one section to the side of the button set `justify` to `space-between` and add empty `<span />` to the opposite section.

[Compact size](#compact-size)
-----------------------------

`Button` supports `xs` – `xl` and `compact-xs` – `compact-xl` sizes. `compact` sizes have the same font-size as `xs` – `xl` but reduced padding and height.

[Gradient variant](#gradient-variant)
-------------------------------------

When `variant` prop is set to `gradient`, you can control gradient with `gradient` prop, it accepts an object with `from`, `to` and `deg` properties. If the`gradient` prop is not set, `Button` will use `theme.defaultGradient` which can be configured on the [theme object](https://mantine.dev/theming/theme-object/). `gradient` prop is ignored when `variant` is not `gradient`.

Note that `variant="gradient"` supports only linear gradients with two colors. If you need a more complex gradient, then use [Styles API](https://mantine.dev/styles/styles-api/) to modify `Button` styles.

[Disabled state](#disabled-state)
---------------------------------

To make `Button` disabled, set `disabled` prop, this will prevent any interactions with the button and add disabled styles. If you want the button to just look disabled but still be interactive, set `data-disabled` prop instead. Note that disabled styles are the same for all variants.

[Disabled state when Button is link](#disabled-state-when-button-is-link)
-------------------------------------------------------------------------

`<a />` element does not support `disabled` attribute. To make `Button` disabled when it is rendered as a link, set `data-disabled` attribute instead and prevent default behavior in `onClick` event handler.

[Customize disabled styles](#customize-disabled-styles)
-------------------------------------------------------

To customize disabled styles, it is recommended to use both `&:disabled` and `&[data-disabled]` selectors:

*   `&:disabled` is used to style the button when `disabled` prop is set and also when the button is disabled by the parent component (for example, when `disabled` prop is set on a `<fieldset />` element which contains `Button`).
*   `&[data-disabled]` is used to style the button when it is not actually disabled but should look like it is (for example, `data-disabled` should be used if you need to use [Tooltip](https://mantine.dev/core/tooltip/) with disabled `Button` or when `Button` is used as a link)

[Disabled button with Tooltip](#disabled-button-with-tooltip)
-------------------------------------------------------------

`onMouseLeave` event [is not triggered](https://github.com/facebook/react/issues/18753) when `Button` is disabled, so if you need to use [Tooltip](https://mantine.dev/core/tooltip/) with disabled `Button` you need to set `data-disabled` prop on `Button` instead of `disabled`. Note that it is also required to change `onClick` event handler to `(event) => event.preventDefault()` as `Button` is not actually disabled and will still trigger `onClick` event.

[Loading state](#loading-state)
-------------------------------

When `loading` prop is set, `Button` will be disabled and [Loader](https://mantine.dev/core/loader/) with overlay will be rendered in the center of the button. [Loader](https://mantine.dev/core/loader/) color depends on `Button` variant.

[Loader props](#loader-props)
-----------------------------

You can customize [Loader](https://mantine.dev/core/loader/) with `loaderProps` prop, it accepts all props that [Loader](https://mantine.dev/core/loader/) component has:

[Styles API](#styles-api)
-------------------------

`Button` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Component Styles API

Hover over selectors to highlight corresponding elements

Example of customizing `Button` with [Styles API](https://mantine.dev/styles/styles-api/) and [data-\* attributes](https://mantine.dev/styles/data-attributes/):

[Custom variants](#custom-variants)
-----------------------------------

To add new `Button` variants, use [data-variant](https://mantine.dev/styles/variants-sizes/) attribute. Usually new variants are added on [theme](https://mantine.dev/theming/theme-object/), this way they are available in all `Button` components in your application.

[Customize variants colors](#customize-variants-colors)
-------------------------------------------------------

You can customize colors for `Button` and other components variants by adding [variantColorResolver](https://mantine.dev/theming/colors/#colors-variant-resolver) to your theme.

[autoContrast](#auto-contrast)
------------------------------

`Button` supports `autoContrast` prop and [theme.autoContrast](https://mantine.dev/theming/theme-object/#autocontrast). If `autoContrast` is set either on `Button` or on theme, content color will be adjusted to have sufficient contrast with the value specified in `color` prop.

Note that `autoContrast` feature works only if you use `color` prop to change background color. `autoContrast` works only with `filled` variant.

[Button.Group](#buttongroup)
----------------------------

Note that you must not wrap child `Button` components with any additional elements:

[Button.GroupSection](#buttongroupsection)
------------------------------------------

Use `Button.GroupSection` component to render sections that are not buttons inside `Button.Group`:

[Polymorphic component](#polymorphic-component)
-----------------------------------------------

`Button` is a [polymorphic component](https://mantine.dev/guides/polymorphic/) – its default root element is `button`, but it can be changed to any other element or component with `component` prop:

You can also use components in `component` prop, for example, Next.js `Link`:

> **Polymorphic components with TypeScript**
> 
> Note that polymorphic components props types are different from regular components – they do not extend HTML element props of the default element. For example, `ButtonProps` does not extend `React.ComponentPropsWithoutRef'<'div'>'` although `button` is the default element.
> 
> If you want to create a wrapper for a polymorphic component that is not polymorphic (does not support `component` prop), then your component props interface should extend HTML element props, for example:
> 
> If you want your component to remain polymorphic after wrapping, use `createPolymorphicComponent` function described in [this guide](https://mantine.dev/guides/polymorphic/).

[Get element ref](#get-element-ref)
-----------------------------------</content>
</page>

<page>
  <title>Getting started | Mantine</title>
  <url>https://mantine.dev/dates/getting-started/</url>
  <content>[Installation](#installation)
-----------------------------

After installation import package styles at the root of your application:

[Do not forget to import styles](#do-not-forget-to-import-styles)
-----------------------------------------------------------------

Followed installation instructions above but something is not working (calendars and date pickers have no styles and look broken)? You've fallen into the trap of not importing dates styles! To fix the issue, import dates styles at the root of your application:

[Usage](#usage)
---------------

After installing `@mantine/dates` package and importing styles, you can use all components from it:

[dayjs](#dayjs)
---------------

`@mantine/dates` components use [dayjs](https://day.js.org/) under the hood for date manipulations and formatting. dayjs is a required dependency – you cannot change it to another date library. If you want to use a different date library in your application, you will need to install it separately.

[DatesProvider](#datesprovider)
-------------------------------

`DatesProvider` component lets you set various settings that are shared across all components exported from `@mantine/dates` package. `DatesProvider` supports the following settings:

*   `locale` – dayjs locale, note that you also need to import corresponding locale module from dayjs. Default value is `en`.
*   `firstDayOfWeek` – number from 0 to 6, where 0 is Sunday and 6 is Saturday. Default value is 1 – Monday.
*   `weekendDays` – an array of numbers from 0 to 6, where 0 is Sunday and 6 is Saturday. Default value is `[0, 6]` – Saturday and Sunday.
*   `consistentWeeks` – boolean, if `true` every month will have 6 weeks. Default value is `false`.

[Consistent weeks](#consistent-weeks)
-------------------------------------

If you want to avoid layout shifts, set `consistentWeeks: true` in `DatesProvider` settings. This will make sure that every month has 6 weeks, even if outside days are not in the same month.

[Custom parse format](#custom-parse-format)
-------------------------------------------

Some components like [DateInput](https://mantine.dev/dates/date-input/) require [custom parse format](https://day.js.org/docs/en/plugin/custom-parse-format) dayjs plugin. You need to extend dayjs with this plugin before using components that require it. Note that it is usually done once in your application root file, so you don't need to do it every time you use component.

[Localization and server components](#localization-and-server-components)
-------------------------------------------------------------------------

To add localization you must import `import 'dayjs/locale/x';` in your application (`x` is locale name) and set `locale` either on `DatesProvider` or on each component individually.

Example of setting locale on DatesProvider:

The code above works in all environments, except Next.js app router. If you are using Next.js app router, you must add `'use client';` to the top of the file where you are importing `dayjs/locale/x` – locale data is required both on client and server.</content>
</page>

<page>
  <title>Calendar | Mantine</title>
  <url>https://mantine.dev/dates/calendar/</url>
  <content>[Usage](#usage)
---------------

Use `Calendar` component to create custom date pickers if [DatePicker](https://mantine.dev/dates/date-picker/) component does not meet your requirements. `Calendar` supports all [DatePicker](https://mantine.dev/dates/date-picker/) props and some other props that are listed in props table – check it out to learn about all component features.

By default, `Calendar` works the same way as [DatePicker](https://mantine.dev/dates/date-picker/) component but does not include any logic of dates selection:

[Custom date pickers](#custom-date-pickers)
-------------------------------------------

Use `Calendar` as a base for custom date pickers. For example, you can create a date picker that allows user to pick three or less dates:

Another custom date picker example – week picker:

[Static prop](#static-prop)
---------------------------

Set `static` prop to display a calendar that user cannot interact with. It is useful when you want to display data with in calendar view but do not want it to be interactive.

| Mo | Tu | We | Th | Fr | Sa | Su |
| --- | --- | --- | --- | --- | --- | --- |
| 
26



 | 

27



 | 

28



 | 

29



 | 

30



 | 

31



 | 

1



 |
| 

2



 | 

3



 | 

4



 | 

5



 | 

6



 | 

7



 | 

8



 |
| 

9



 | 

10



 | 

11



 | 

12



 | 

13



 | 

14



 | 

15



 |
| 

16



 | 

17



 | 

18



 | 

19



 | 

20



 | 

21



 | 

22



 |
| 

23



 | 

24



 | 

25



 | 

26



 | 

27



 | 

28



 | 

29



 |
| 

30



 | 

1



 | 

2



 | 

3



 | 

4



 | 

5



 | 

6



 |</content>
</page>

<page>
  <title>DateTimePicker | Mantine</title>
  <url>https://mantine.dev/dates/date-time-picker/</url>
  <content>[DatePicker props](#datepicker-props)
-------------------------------------

`DateTimePicker` supports most of the [DatePicker](https://mantine.dev/dates/date-picker/) props, read through [DatePicker](https://mantine.dev/dates/date-picker/) documentation to learn about all component features that are not listed on this page.

[Usage](#usage)
---------------

[With seconds](#with-seconds)
-----------------------------

[Presets](#presets)
-------------------

Use `presets` prop to add custom date presets. Presets are displayed next to the calendar:

[TimePicker props](#timepicker-props)
-------------------------------------

You can pass props down to the underlying [TimePicker](https://mantine.dev/dates/time-picker/) component with `timePickerProps` prop. Example of enabling dropdown and setting `12h` format for time picker:

[Value format](#value-format)
-----------------------------

Use `valueFormat` prop to change [dayjs format](https://day.js.org/docs/en/display/format) of value label:

[Disabled state](#disabled-state)
---------------------------------

[Input props](#input-props)
---------------------------

`DateTimePicker` component supports [Input](https://mantine.dev/core/input/) and [Input.Wrapper](https://mantine.dev/core/input/) components features and all `button` element props. `DateTimePicker` documentation does not include all features supported by the component – see [Input](https://mantine.dev/core/input/) documentation to learn about all available features.

Input label

Input description

[Clearable](#clearable)
-----------------------

Set `clearable` prop to display clear button in the right section. Note that if you set `rightSection` prop, clear button will not be displayed.

[Open picker in modal](#open-picker-in-modal)
---------------------------------------------

By default, picker is rendered inside [Popover](https://mantine.dev/core/popover/). You can change that to [Modal](https://mantine.dev/core/modal/) by setting `dropdownType="modal"`:

[Get element ref](#get-element-ref)
-----------------------------------

[Accessibility](#accessibility)
-------------------------------

If `DateTimePicker` is used without `label` prop, it will not be announced properly by screen reader:

Set `aria-label` to make the input accessible. In this case label will not be visible, but screen reader will announce it:

If `label` prop is set, input will be accessible it is not required to set `aria-label`:</content>
</page>

<page>
  <title>DatePickerInput | Mantine</title>
  <url>https://mantine.dev/dates/date-picker-input/</url>
  <content>[DatePicker props](#datepicker-props)
-------------------------------------

`DatePickerInput` supports most of the [DatePicker](https://mantine.dev/dates/date-picker/) props, read through [DatePicker](https://mantine.dev/dates/date-picker/) documentation to learn about all component features that are not listed on this page.

[Usage](#usage)
---------------

[Multiple dates](#multiple-dates)
---------------------------------

Set `type="multiple"` to allow user to pick multiple dates:

[Dates range](#dates-range)
---------------------------

Set `type="range"` to allow user to pick dates range:

[Presets](#presets)
-------------------

Use `presets` prop to add custom date presets. Presets are displayed next to the calendar:

To use `presets` with `type="range"`, define value a tuple of two dates:

[Open picker in modal](#open-picker-in-modal)
---------------------------------------------

By default, [DatePicker](https://mantine.dev/dates/date-picker/) is rendered inside [Popover](https://mantine.dev/core/popover/). You can change that to [Modal](https://mantine.dev/core/modal/) by setting `dropdownType="modal"`:

[Value format](#value-format)
-----------------------------

Use `valueFormat` prop to change [dayjs format](https://day.js.org/docs/en/display/format) of value label:

[Value formatter](#value-formatter)
-----------------------------------

`valueFormatter` is a more powerful alternative to `valueFormat` prop. It allows formatting value label with a custom function. The function is the same for all component types (`default`, `multiple` and `range`) – you need to perform additional checks inside the function to handle different types.

Example of using a custom formatter function with `type="multiple"`:

[Clearable](#clearable)
-----------------------

Set `clearable` prop to display clear button in the right section. Note that if you set `rightSection` prop, clear button will not be displayed.

[Disabled state](#disabled-state)
---------------------------------

[Input props](#input-props)
---------------------------

`DatePickerInput` component supports [Input](https://mantine.dev/core/input/) and [Input.Wrapper](https://mantine.dev/core/input/) components features and all `button` element props. `DatePickerInput` documentation does not include all features supported by the component – see [Input](https://mantine.dev/core/input/) documentation to learn about all available features.

[With icon](#with-icon)
-----------------------

[Get element ref](#get-element-ref)
-----------------------------------

[Accessibility](#accessibility)
-------------------------------

If `DatePickerInput` is used without `label` prop, it will not be announced properly by screen reader:

Set `aria-label` to make the input accessible. In this case label will not be visible, but screen reader will announce it:

If `label` prop is set, input will be accessible it is not required to set `aria-label`:</content>
</page>

<page>
  <title>DateInput | Mantine</title>
  <url>https://mantine.dev/dates/date-input/</url>
  <content>[DatePicker props](#datepicker-props)
-------------------------------------

`DateInput` supports most of the [DatePicker](https://mantine.dev/dates/date-picker/) props, read through [DatePicker](https://mantine.dev/dates/date-picker/) documentation to learn about all component features that are not listed on this page.

[Usage](#usage)
---------------

[Value format](#value-format)
-----------------------------

Use `valueFormat` prop to change [dayjs format](https://day.js.org/docs/en/display/format) of value label. To use some custom formats, you need to enable [custom parse format](https://day.js.org/docs/en/plugin/custom-parse-format) plugin:

Example of using DateInput with custom format:

[Date parser](#date-parser)
---------------------------

Use `dateParser` prop to replace default date parser. Parser function accepts user input (string) and must return `Date` object:

[Allow clear](#allow-clear)
---------------------------

Set `clearable` prop to allow removing value from the input. Input will be cleared if user selects the same date in dropdown or clears input value:

[Min and max date](#min-and-max-date)
-------------------------------------

Set `minDate` and `maxDate` props to define min and max dates. If date that is after `maxDate` or before `minDate` is entered, then it will be considered invalid and input value will be reverted to last known valid date value.

[Disabled state](#disabled-state)
---------------------------------

[Input props](#input-props)
---------------------------

`DateInput` component supports [Input](https://mantine.dev/core/input/) and [Input.Wrapper](https://mantine.dev/core/input/) components features and all `input` element props. `DateInput` documentation does not include all features supported by the component – see [Input](https://mantine.dev/core/input/) documentation to learn about all available features.

Input label

Input description

[Get element ref](#get-element-ref)
-----------------------------------

[Accessibility](#accessibility)
-------------------------------

If `DateInput` is used without `label` prop, it will not be announced properly by screen reader:

Set `aria-label` to make the input accessible. In this case label will not be visible, but screen reader will announce it:

If `label` prop is set, input will be accessible it is not required to set `aria-label`:</content>
</page>

<page>
  <title>DatePicker | Mantine</title>
  <url>https://mantine.dev/dates/date-picker/</url>
  <content>[Usage](#usage)
---------------

[Allow deselect](#allow-deselect)
---------------------------------

Set `allowDeselect` to allow user to deselect current selected date by clicking on it. `allowDeselect` is disregarded when `type` prop is `range` or `multiple`. When date is deselected `onChange` is called with `null`.

[Multiple dates](#multiple-dates)
---------------------------------

Set `type="multiple"` to allow user to pick multiple dates:

[Dates range](#dates-range)
---------------------------

Set `type="range"` to allow user to pick dates range:

[Single date in range](#single-date-in-range)
---------------------------------------------

By default, it is not allowed to select single date as range – when user clicks the same date second time it is deselected. To change this behavior set `allowSingleDateInRange` prop. `allowSingleDateInRange` is ignored when `type` prop is not `range`.

[Presets](#presets)
-------------------

Use `presets` prop to add custom date presets. Presets are displayed next to the calendar:

To use `presets` with `type="range"`, define value a tuple of two dates:

[Default date](#default-date)
-----------------------------

Use `defaultDate` prop to set date value that will be used to determine which year should be displayed initially. For example to display `2015 February` month set `defaultDate={new Date(2015, 1)}`. If value is not specified, then `defaultDate` will use `new Date()`. Day, minutes and seconds are ignored in provided date object, only year and month data is used – you can specify any date value.

Note that if you set `date` prop, then `defaultDate` value will be ignored.

[Controlled date](#controlled-date)
-----------------------------------

Set `date`, and `onDateChange` props to make currently displayed month, year and decade controlled. By doing so, you can customize date picking experience, for example, when user selects first date in range, you can add one month to the current date value:

[Default level](#default-level)
-------------------------------

Set `defaultLevel` prop to configure initial level that will be displayed:

[Hide outside dates](#hide-outside-dates)
-----------------------------------------

Set `hideOutsideDates` prop to remove all dates that do not belong to the current month:

[Display week numbers](#display-week-numbers)
---------------------------------------------

Set `withWeekNumbers` prop to display week numbers:

| # | Mo | Tu | We | Th | Fr | Sa | Su |
| --- | --- | --- | --- | --- | --- | --- | --- |
| 22 |  |  |  |  |  |  |  |
| 23 |  |  |  |  |  |  |  |
| 24 |  |  |  |  |  |  |  |
| 25 |  |  |  |  |  |  |  |
| 26 |  |  |  |  |  |  |  |
| 27 |  |  |  |  |  |  |  |

[First day of week](#first-day-of-week)
---------------------------------------

Set `firstDayOfWeek` prop to configure first day of week. The prop accepts number from 0 to 6, where 0 is Sunday and 6 is Saturday. Default value is 1 – Monday. You can also configure this option for all components with [DatesProvider](https://mantine.dev/dates/getting-started/).

[Hide weekdays](#hide-weekdays)
-------------------------------

Set `hideWeekdays` prop to hide weekdays names:

[Weekend days](#weekend-days)
-----------------------------

Use `weekendDays` prop to configure weekend days. The prop accepts an array of numbers from 0 to 6, where 0 is Sunday and 6 is Saturday. Default value is `[0, 6]` – Saturday and Sunday. You can also configure this option for all components with [DatesProvider](https://mantine.dev/dates/getting-started/).

[Render day function](#render-day-function)
-------------------------------------------

You can customize day rendering with `renderDay` prop. For example, it can be used to add [Indicator](https://mantine.dev/core/indicator/) to certain days.

[Min and max date](#min-and-max-date)
-------------------------------------

Set `minDate` and `maxDate` props to define min and max dates. If previous/next page is not available then corresponding control will be disabled.

[Change header controls order](#change-header-controls-order)
-------------------------------------------------------------

Use `headerControlsOrder` prop to change order of header controls. The prop accepts an array of `'next' | 'previous' | 'level`. Note that each control can be used only once in the array.

[Add props to year and month control](#add-props-to-year-and-month-control)
---------------------------------------------------------------------------

You can add props to year, month and day controls with `getYearControlProps`, `getMonthControlProps` and `getDayProps` functions. All functions accept date as single argument, props returned from the function will be added to year/month/day control. For example, it can be used to disable specific control or add styles:

[Exclude dates](#exclude-dates)
-------------------------------

To disable specific dates use `excludeDate` prop. It accepts function that takes date as argument and returns boolean value – if `true` is returned, date will be disabled. Example of disabling all dates that are not Fridays:

[Number of columns](#number-of-columns)
---------------------------------------

Set `numberOfColumns` prop to define number of pickers that will be rendered side by side:

Demo is not available on small screens. Make your screen larger to see the demo.

[Max level](#max-level)
-----------------------

[Size](#size)
-------------

[Change year and months controls format](#change-year-and-months-controls-format)
---------------------------------------------------------------------------------

Use `yearsListFormat` and `monthsListFormat` props to change [dayjs format](https://day.js.org/docs/en/display/format) of year/month controls:

[Change label format](#change-label-format)
-------------------------------------------

Use `decadeLabelFormat`, `yearLabelFormat` and `monthLabelFormat` props to change [dayjs format](https://day.js.org/docs/en/display/format) of decade/year label:

[Localization](#localization)
-----------------------------

Usually it is better to specify `@mantine/dates` package locale in [DatesProvider](https://mantine.dev/dates/getting-started/), but you can also override locale per component:

[Accessibility](#accessibility)
-------------------------------

### [Aria labels](#aria-labels)

Set `ariaLabels` prop to specify `aria-label` attributes for next/previous controls:

### [Year/month control aria-label](#yearmonth-control-aria-label)

Use `getYearControlProps`/`getMonthControlProps`/`getDayProps` to customize `aria-label` attribute:

### [Keyboard interactions](#keyboard-interactions)

Note that the following events will only trigger if focus is on date control.</content>
</page>

<page>
  <title>MonthPicker | Mantine</title>
  <url>https://mantine.dev/dates/month-picker/</url>
  <content>[Usage](#usage)
---------------

[Allow deselect](#allow-deselect)
---------------------------------

Set `allowDeselect` to allow user to deselect current selected date by clicking on it. `allowDeselect` is disregarded when `type` prop is `range` or `multiple`. When date is deselected `onChange` is called with `null`.

[Multiple dates](#multiple-dates)
---------------------------------

Set `type="multiple"` to allow user to pick multiple dates:

[Dates range](#dates-range)
---------------------------

Set `type="range"` to allow user to pick dates range:

[Single date in range](#single-date-in-range)
---------------------------------------------

By default, it is not allowed to select single date as range – when user clicks the same date second time it is deselected. To change this behavior set `allowSingleDateInRange` prop. `allowSingleDateInRange` is ignored when `type` prop is not `range`.

[Default date](#default-date)
-----------------------------

Use `defaultDate` prop to set date value that will be used to determine which year should be displayed initially. For example to display `2015` year set `defaultDate={new Date(2015, 1)}`. If value is not specified, then `defaultDate` will use `new Date()`. Month, day, minutes and seconds are ignored in provided date object, only year is used – you can specify any date value.

Note that if you set `date` prop, then `defaultDate` value will be ignored.

[Controlled date](#controlled-date)
-----------------------------------

Set `date`, and `onDateChange` props to make currently displayed year and decade controlled. By doing so, you can customize date picking experience, for example, when user selects first date in range, you can add one year to current date value:

[Min and max date](#min-and-max-date)
-------------------------------------

Set `minDate` and `maxDate` props to define min and max dates. If previous/next page is not available then corresponding control will be disabled.

[Add props to year and month control](#add-props-to-year-and-month-control)
---------------------------------------------------------------------------

You can add props to year and month controls with `getYearControlProps` and `getMonthControlProps` functions. Both functions accept date as single argument, props returned from the function will be added to year/month control. For example, it can be used to disable specific control or add styles:

[Number of columns](#number-of-columns)
---------------------------------------

Set `numberOfColumns` prop to define number of pickers that will be rendered side by side:

Demo is not available on small screens. Make your screen larger to see the demo.

[Max level](#max-level)
-----------------------

To disallow user going to the decade level set `maxLevel="year"`:

[Size](#size)
-------------

[Change year and months controls format](#change-year-and-months-controls-format)
---------------------------------------------------------------------------------

Use `yearsListFormat` and `monthsListFormat` props to change [dayjs format](https://day.js.org/docs/en/display/format) of year/month controls:

[Change label format](#change-label-format)
-------------------------------------------

Use `decadeLabelFormat` and `yearLabelFormat` to change [dayjs format](https://day.js.org/docs/en/display/format) of decade/year label:

[Localization](#localization)
-----------------------------

Usually it is better to specify `@mantine/dates` package locale in [DatesProvider](https://mantine.dev/dates/getting-started/), but you can also override locale per component:

[Accessibility](#accessibility)
-------------------------------

### [Aria labels](#aria-labels)

Set `ariaLabels` prop to specify `aria-label` attributes for next/previous controls:

### [Year/month control aria-label](#yearmonth-control-aria-label)

Use `getYearControlProps`/`getMonthControlProps` to customize `aria-label` attribute:

### [Keyboard interactions](#keyboard-interactions)

Note that the following events will only trigger if focus is on month control.</content>
</page>

<page>
  <title>MonthPickerInput | Mantine</title>
  <url>https://mantine.dev/dates/month-picker-input/</url>
  <content>[MonthPicker props](#monthpicker-props)
---------------------------------------

`MonthPickerInput` supports most of the [MonthPicker](https://mantine.dev/dates/month-picker/) props, read through [MonthPicker](https://mantine.dev/dates/month-picker/) documentation to learn about all component features that are not listed on this page.

[Usage](#usage)
---------------

[Multiple dates](#multiple-dates)
---------------------------------

Set `type="multiple"` to allow user to pick multiple dates:

[Dates range](#dates-range)
---------------------------

Set `type="range"` to allow user to pick dates range:

[Open picker in modal](#open-picker-in-modal)
---------------------------------------------

By default, [MonthPicker](https://mantine.dev/dates/month-picker/) is rendered inside [Popover](https://mantine.dev/core/popover/). You can change that to [Modal](https://mantine.dev/core/modal/) by setting `dropdownType="modal"`:

[Value format](#value-format)
-----------------------------

Use `valueFormat` prop to change [dayjs format](https://day.js.org/docs/en/display/format) of value label:

[Value formatter](#value-formatter)
-----------------------------------

`valueFormatter` is a more powerful alternative to `valueFormat` prop. It allows formatting value label with a custom function. The function is the same for all component types (`default`, `multiple` and `range`) – you need to perform additional checks inside the function to handle different types.

Example of using a custom formatter function with `type="multiple"`:

[Clearable](#clearable)
-----------------------

Set `clearable` prop to display clear button in the right section. Note that if you set `rightSection` prop, clear button will not be displayed.

[Disabled state](#disabled-state)
---------------------------------

[Input props](#input-props)
---------------------------

`MonthPickerInput` component supports [Input](https://mantine.dev/core/input/) and [Input.Wrapper](https://mantine.dev/core/input/) components features and all `button` element props. `MonthPickerInput` documentation does not include all features supported by the component – see [Input](https://mantine.dev/core/input/) documentation to learn about all available features.

[With icon](#with-icon)
-----------------------

[Get element ref](#get-element-ref)
-----------------------------------

[Accessibility](#accessibility)
-------------------------------

If `MonthPickerInput` is used without `label` prop, it will not be announced properly by screen reader:

Set `aria-label` to make the input accessible. In this case label will not be visible, but screen reader will announce it:

If `label` prop is set, input will be accessible it is not required to set `aria-label`:</content>
</page>

<page>
  <title>YearPickerInput | Mantine</title>
  <url>https://mantine.dev/dates/year-picker-input/</url>
  <content>[YearPicker props](#yearpicker-props)
-------------------------------------

`YearPickerInput` supports most of the [YearPicker](https://mantine.dev/dates/year-picker/) props, read through [YearPicker](https://mantine.dev/dates/year-picker/) documentation to learn about all component features that are not listed on this page.

[Usage](#usage)
---------------

[Multiple dates](#multiple-dates)
---------------------------------

Set `type="multiple"` to allow user to pick multiple dates:

[Dates range](#dates-range)
---------------------------

Set `type="range"` to allow user to pick dates range:

[Open picker in modal](#open-picker-in-modal)
---------------------------------------------

By default, [YearPicker](https://mantine.dev/dates/year-picker/) is rendered inside [Popover](https://mantine.dev/core/popover/). You can change that to [Modal](https://mantine.dev/core/modal/) by setting `dropdownType="modal"`:

[Value format](#value-format)
-----------------------------

Use `valueFormat` prop to change [dayjs format](https://day.js.org/docs/en/display/format) of value label:

[Value formatter](#value-formatter)
-----------------------------------

`valueFormatter` is a more powerful alternative to `valueFormat` prop. It allows formatting value label with a custom function. The function is the same for all component types (`default`, `multiple` and `range`) – you need to perform additional checks inside the function to handle different types.

Example of using a custom formatter function with `type="multiple"`:

[Clearable](#clearable)
-----------------------

Set `clearable` prop to display clear button in the right section. Note that if you set `rightSection` prop, clear button will not be displayed.

[Disabled state](#disabled-state)
---------------------------------

[Input props](#input-props)
---------------------------

`MonthPickerInput` component supports [Input](https://mantine.dev/core/input/) and [Input.Wrapper](https://mantine.dev/core/input/) components features and all `button` element props. `MonthPickerInput` documentation does not include all features supported by the component – see [Input](https://mantine.dev/core/input/) documentation to learn about all available features.

[With icon](#with-icon)
-----------------------

[Get element ref](#get-element-ref)
-----------------------------------

[Accessibility](#accessibility)
-------------------------------

If `YearPickerInput` is used without `label` prop, it will not be announced properly by screen reader:

Set `aria-label` to make the input accessible. In this case label will not be visible, but screen reader will announce it:

If `label` prop is set, input will be accessible it is not required to set `aria-label`:</content>
</page>

<page>
  <title>YearPicker | Mantine</title>
  <url>https://mantine.dev/dates/year-picker/</url>
  <content>[Usage](#usage)
---------------

[Allow deselect](#allow-deselect)
---------------------------------

Set `allowDeselect` to allow user to deselect current selected date by clicking on it. `allowDeselect` is disregarded when `type` prop is `range` or `multiple`. When date is deselected `onChange` is called with `null`.

[Multiple dates](#multiple-dates)
---------------------------------

Set `type="multiple"` to allow user to pick multiple dates:

[Dates range](#dates-range)
---------------------------

Set `type="range"` to allow user to pick dates range:

[Single date in range](#single-date-in-range)
---------------------------------------------

By default, it is not allowed to select single date as range – when user clicks the same date second time it is deselected. To change this behavior set `allowSingleDateInRange` prop. `allowSingleDateInRange` is ignored when `type` prop is not `range`.

[Default date](#default-date)
-----------------------------

Use `defaultDate` prop to set date value that will be used to determine which decade should be displayed initially. For example to display `2040 – 2049` decade set `defaultDate={new Date(2040, 1)}`. If value is not specified, then `defaultDate` will use `new Date()`. Month, day, minutes and seconds are ignored in provided date object, only year is used – you can specify any date value.

Note that if you set `date` prop, then `defaultDate` value will be ignored.

[Controlled date](#controlled-date)
-----------------------------------

Set `date`, and `onDateChange` props to make currently displayed decade controlled. By doing so, you can customize date picking experience, for example, when user selects first date in range, you can add 20 years to current date value:

[Min and max date](#min-and-max-date)
-------------------------------------

Set `minDate` and `maxDate` props to define min and max dates. If previous/next page is not available then corresponding control will be disabled.

[Add props to year control](#add-props-to-year-control)
-------------------------------------------------------

You can add props to year controls with `getYearControlProps` function. It accepts year date as single argument, props returned from the function will be added to year control. For example, it can be used to disable specific control or add styles:

[Number of columns](#number-of-columns)
---------------------------------------

Set `numberOfColumns` prop to define number of pickers that will be rendered side by side:

Demo is not available on small screens. Make your screen larger to see the demo.

[Size](#size)
-------------

[Change year controls format](#change-year-controls-format)
-----------------------------------------------------------

Use `yearsListFormat` to change [dayjs format](https://day.js.org/docs/en/display/format) of year control:

[Change decade label format](#change-decade-label-format)
---------------------------------------------------------

Use `decadeLabelFormat` to change [dayjs format](https://day.js.org/docs/en/display/format) of decade label:

[Accessibility](#accessibility)
-------------------------------

### [Aria labels](#aria-labels)

Set `ariaLabels` prop to specify `aria-label` attributes for next/previous controls:

### [Year control aria-label](#year-control-aria-label)

Use `getYearControlProps` to customize `aria-label` attribute:

### [Keyboard interactions](#keyboard-interactions)

Note that the following events will only trigger if focus is on year control.</content>
</page>

<page>
  <title>TimeInput | Mantine</title>
  <url>https://mantine.dev/dates/time-input/</url>
  <content>[Usage](#usage)
---------------

`TimeInput` component supports [Input](https://mantine.dev/core/input/) and [Input.Wrapper](https://mantine.dev/core/input/) components features and all `input` element props. `TimeInput` documentation does not include all features supported by the component – see [Input](https://mantine.dev/core/input/) documentation to learn about all available features.

Input label

Input description

[TimePicker component](#timepicker-component)
---------------------------------------------

`TimeInput` component is based on the native `input[type="time"]` element and does not support most of advanced features like choosing time format or custom dropdown with time select. If you need more features, use [TimePicker](https://mantine.dev/dates/time-picker/) component instead.

`TimeInput` features/limitations:

*   Native `input[type="time"]` element
*   Native browser controls for time selection on mobile devices
*   Time format depends on the user's locale
*   Only native dropdown with hours/minutes/seconds, does not work in Firefox
*   Mobile Safari does not provide an option to select seconds

[Controlled](#controlled)
-------------------------

[Show browser picker](#show-browser-picker)
-------------------------------------------

You can show browser picker by calling `showPicker` method of input element. Note that some browsers (desktop Safari) do not support this feature and the method will do nothing.

Click icon to show browser picker

[With seconds](#with-seconds)
-----------------------------

[With icon](#with-icon)
-----------------------

[Disabled state](#disabled-state)
---------------------------------

[Get element ref](#get-element-ref)
-----------------------------------

[Accessibility](#accessibility)
-------------------------------

If `TimeInput` is used without `label` prop, it will not be announced properly by screen reader:

Set `aria-label` to make the input accessible. In this case label will not be visible, but screen reader will announce it:

If `label` prop is set, input will be accessible it is not required to set `aria-label`:</content>
</page>

<page>
  <title>TimePicker | Mantine</title>
  <url>https://mantine.dev/dates/time-picker/</url>
  <content>[Usage](#usage)
---------------

`TimePicker` component is an alternative to [TimeInput](https://mantine.dev/dates/time-input/) that offers more features, it supports 24-hour and 12-hour formats, dropdown with hours, minutes and seconds, and more.

[Controlled](#controlled)
-------------------------

`TimePicker` component value is a string in `hh:mm:ss` 24-hour format (for example `18:34:55`). Empty string is used to represent no value. `onChange` function is called only when the entered value is valid. The input value is considered valid in the following cases:

*   All inputs are empty. In this case `onChange` is called with an empty string.
*   All inputs are filled. For example if `withSeconds` prop is set and the user entered `12:34:56`, `onChange` will be called with `12:34:56`. But if the user entered `12:34`, `onChange` will not be called because seconds value is missing.

[With seconds](#with-seconds)
-----------------------------

Set `withSeconds` prop to enable seconds input. Note that if this prop is used, `onChange` is not called until all inputs are filled – it is not possible to enter only hours and minutes.

[12-hour format](#12-hour-format)
---------------------------------

Set `format="12h"` to use 12-hour format. Note that `onChange` is called only when all inputs are filled including am/pm input.

[Change am/pm labels](#change-ampm-labels)
------------------------------------------

To change am/pm labels use `amPmLabels` prop. Example of changing labels to Hindi:

[Min and max values](#min-and-max-values)
-----------------------------------------

Set `min` and `max` props to limit available time range:

[With dropdown](#with-dropdown)
-------------------------------

Set `withDropdown` prop to display the dropdown with hours, minutes, seconds and am/pm selects. By default, the dropdown is visible when one of the inputs is focused.

[Hours/minutes/seconds step](#hoursminutesseconds-step)
-------------------------------------------------------

Use `hoursStep`, `minutesStep` and `secondsStep` props to control step for each input. These props are used to control value by which the input is incremented or decremented when up/down arrow keys are pressed and to generate corresponding values range in the dropdown.

[Control dropdown opened state](#control-dropdown-opened-state)
---------------------------------------------------------------

Use `popoverProps` to pass props down to the underlying [Popover](https://mantine.dev/core/popover/) component:

[Time presets](#time-presets)
-----------------------------

You can define time presets with `presets` prop. Presets are displayed in the dropdown and can be selected by clicking on them. Time values for presets should be in `hh:mm:ss` or `hh:mm` 24-hour time format. Presets display value is generated based on `format`, `amPmLabels` and `withSeconds` props.

[Time presets groups](#time-presets-groups)
-------------------------------------------

To group presets use an array of objects with `label` and `values` keys:

[Time presets range](#time-presets-range)
-----------------------------------------

If you need to generate a range of time values, use `getTimeRange` function exported from `@mantine/dates` package. The function accepts start, end time and interval in `hh:mm:ss` format.

[Dropdown position](#dropdown-position)
---------------------------------------

By default, the dropdown is displayed below the input if there is enough space; otherwise it is displayed above the input. You can change this behavior by setting `position` and `middlewares` props, which are passed down to the underlying [Popover](https://mantine.dev/core/popover/) component.

Example of dropdown that is always displayed above the input:

[Dropdown width](#dropdown-width)
---------------------------------

To change dropdown width, set `width` prop in `comboboxProps`. By default, dropdown width is adjusted to fit all content. Example of dropdown width set to the input width:

[Paste events](#paste-events)
-----------------------------

By default, `TimePicker` handles only time in 24-hour format (for example `17:33:43` or `19:22`) for paste events. With `pasteSplit` prop you can create a custom paste time parser:

Try pasting time in 12h format in any input. For example, try pasting `12:34 PM` or `8:56:45 AM`

[Clearable](#clearable)
-----------------------

Set `clearable` prop to display a clear button in the right section of the input. The clear button is visible when at least one of the fields has value.

[Disabled](#disabled)
---------------------

[Read only](#read-only)
-----------------------

[Input props](#input-props)
---------------------------

`TimePicker` component supports [Input](https://mantine.dev/core/input/) and [Input.Wrapper](https://mantine.dev/core/input/) components features and all `div` element props. `TimePicker` documentation does not include all features supported by the component – see [Input](https://mantine.dev/core/input/) documentation to learn about all available features.

Input label

Input description

[Get refs of inner inputs](#get-refs-of-inner-inputs)
-----------------------------------------------------

Use `hoursRef`, `minutesRef`, `secondsRef` and `amPmRef` props to get refs of inner inputs:

[onFocus and onBlur events](#onfocus-and-onblur-events)
-------------------------------------------------------

`onFocus` and `onBlur` events are called when the first input is focused and the last input is blurred:

[Accessibility](#accessibility)
-------------------------------

Set aria labels for hours, minutes, seconds and am/pm inputs and clear button with corresponding props:

Keyboard interactions:</content>
</page>

<page>
  <title>TimeValue | Mantine</title>
  <url>https://mantine.dev/dates/time-value/</url>
  <content>[Usage](#usage)
---------------

Use `TimeValue` component to display time in different formats:

24h format: 18:45

12h format: 6:45 PM

[With seconds](#with-seconds)
-----------------------------

Use `withSeconds` prop to display seconds:

12h format: 6:45:34 PM

24h format: 18:45:34

[AM/PM labels](#ampm-labels)
----------------------------

Use `amPmLabels` prop to display AM/PM labels:

Custom AM/PM labels: 6:45 अपराह्न

[Date object](#date-object)
---------------------------

You can use `Date` object instead of string as `value`:

24h format: 18:45

12h format: 6:45 PM</content>
</page>

<page>
  <title>TimeGrid | Mantine</title>
  <url>https://mantine.dev/dates/time-grid/</url>
  <content>[Usage](#usage)
---------------

Use `TimeGrid` component to capture time value from the user with a predefined set of time slots:

[Controlled](#controlled)
-------------------------

[data prop](#data-prop)
-----------------------

`data` prop accepts an array of time values in 24-hour format. Values must be unique. To generate time range use `getTimeRange` function exported from `@mantine/dates` package:

[Min and max time](#min-and-max-time)
-------------------------------------

Set `minTime` and `maxTime` props to limit available time range. Both props accept time values in 24-hour format:

[Disable specific controls](#disable-specific-controls)
-------------------------------------------------------

You can disable specific time values by providing an array of disabled values to the `disableTime` prop:

[Allow deselect](#allow-deselect)
---------------------------------

Set `allowDeselect` prop to allow deselecting time value by clicking on the control with selected value:

[Change AM/PM labels](#change-ampm-labels)
------------------------------------------

[Disabled](#disabled)
---------------------

Set `disabled` prop to disable all controls:</content>
</page>

<page>
  <title>Getting started | Mantine</title>
  <url>https://mantine.dev/charts/getting-started/</url>
  <content>[Installation](#installation)
-----------------------------

After installation import package styles at the root of your application:

[Do not forget to import styles](#do-not-forget-to-import-styles)
-----------------------------------------------------------------

Followed installation instructions above but something is not working (misplaced tooltips or no colors)? You've fallen into the trap of not importing charts styles! To fix the issue, import charts styles at the root of your application:

[Based on recharts](#based-on-recharts)
---------------------------------------

Most of the components in `@mantine/charts` package are based on [recharts](https://recharts.org/) library. If you need advanced features that are not covered in `@mantine/charts` documentation, reference [recharts documentation](https://recharts.org/en-US/api) for more information.</content>
</page>

<page>
  <title>AreaChart | Mantine</title>
  <url>https://mantine.dev/charts/area-chart/</url>
  <content>[Usage](#usage)
---------------

Use `AreaChart` component without `type` prop to render a regular area chart. In a regular area chart, each data series is plotted on its own and does not interact with other series.

With gradient

With xaxis

With yaxis

With dots

[Stacked area chart](#stacked-area-chart)
-----------------------------------------

Set `type="stacked"` to render a stacked area chart. In this type of area chart stacking is applied along the vertical axis, allowing you to see the overall trend as well as the contribution of each individual series to the total.

[Percent area chart](#percent-area-chart)
-----------------------------------------

Set `type="percent"` to render a percent area chart. In this type of area chart the y-axis scale is always normalized to 100%, making it easier to compare the contribution of each series in terms of percentages.

[Split area chart](#split-area-chart)
-------------------------------------

Set `type="split"` to render a split area chart. In this type of area chart fill color is split into two colors, one for positive values and one for negative values. Split area chart supports only one data series.

[Split colors](#split-colors)
-----------------------------

Set `splitColors` prop to an array of two colors to customize the fill color of split area chart. The first color is used for positive values and the second color for negative values. `splitColors` prop is ignored in other types of area charts.

[Legend](#legend)
-----------------

To display chart legend, set `withLegend` prop. When one of the items in the legend is hovered, the corresponding data series is highlighted in the chart.

[Legend position](#legend-position)
-----------------------------------

You can pass props down to recharts [Legend](https://recharts.org/en-US/api/Legend) component with `legendProps` prop. For example, setting `legendProps={{ verticalAlign: 'bottom', height: 50 }}` will render the legend at the bottom of the chart and set its height to 50px.

[Series labels](#series-labels)
-------------------------------

By default, series `name` is used as a label. To change it, set `label` property in `series` object:

[Connect nulls](#connect-nulls)
-------------------------------

Use `connectNulls` prop to specify whether to connect a data point across null points. By default, `connectNulls` is `true`.

[Points labels](#points-labels)
-------------------------------

To display labels on data points, set `withPointLabels`:

[X and Y axis props](#x-and-y-axis-props)
-----------------------------------------

Use `xAxisProps` and `yAxisProps` to pass props down to recharts [XAxis](https://recharts.org/en-US/api/XAxis) and [YAxis](https://recharts.org/en-US/api/YAxis) components. For example, these props can be used to change orientation of axis:

[Axis labels](#axis-labels)
---------------------------

Use `xAxisLabel` and `yAxisLabel` props to display axis labels:

[X axis offset](#x-axis-offset)
-------------------------------

Use `xAxisProps` to set padding between the charts ends and the x-axis:

[Y axis scale](#y-axis-scale)
-----------------------------

Use `yAxisProps` to change domain of the Y axis. For example, if you know that your data will always be in the range of 0 to 100, you can set domain to `[0, 100]`:

[Right Y axis](#right-y-axis)
-----------------------------

To display additional Y axis on the right side of the chart, set `withRightYAxis` prop. You can pass props down to recharts [YAxis](https://recharts.org/en-US/api/YAxis) component with `rightYAxisProps` prop and assign a label to the right Y axis with `rightYAxisLabel` prop. Note that you need to bind data series to the right Y axis by setting `yAxisId` in the `series` object.

[Rotate x-axis labels](#rotate-x-axis-labels)
---------------------------------------------

To rotate x-axis labels, set `xAxisProps.angle` to a number of degrees to rotate:

[Value formatter](#value-formatter)
-----------------------------------

To format values in the tooltip and axis ticks, use `valueFormat` prop. It accepts a function that takes number value as an argument and returns formatted value:

[Area color](#area-color)
-------------------------

You can reference colors from [theme](https://mantine.dev/theming/theme-object/) the same way as in other components, for example, `blue`, `red.5`, `orange.7`, etc. Any valid CSS color value is also accepted.

[Change area color depending on color scheme](#change-area-color-depending-on-color-scheme)
-------------------------------------------------------------------------------------------

You can use CSS variables in `color` property. To define a CSS variable that changes depending on the color scheme, use [light/dark mixins](https://mantine.dev/styles/postcss-preset/#dark-and-light-mixins) or [light-dark function](https://mantine.dev/styles/postcss-preset/#light-dark-function). Example of area that is dark orange in light mode and lime in dark mode:

[Stroke dash array](#stroke-dash-array)
---------------------------------------

Set `strokeDasharray` prop to control the stroke dash array of the grid and cursor lines. The value represent the lengths of alternating dashes and gaps. For example, `strokeDasharray="10 5"` will render a dashed line with 10px dashes and 5px gaps.

[Grid and text colors](#grid-and-text-colors)
---------------------------------------------

Use `--chart-grid-color` and `--chart-text-color` to change colors of grid lines and text within the chart. With [CSS modules](https://mantine.dev/styles/css-modules/), you can change colors depending on color scheme:

If your application has only one color scheme, you can use `gridColor` and `textColor` props instead of CSS variables:

[Tooltip animation](#tooltip-animation)
---------------------------------------

By default, tooltip animation is disabled. To enable it, set `tooltipAnimationDuration` prop to a number of milliseconds to animate the tooltip position change.

[Units](#units)
---------------

Set `unit` prop to render a unit label next to the y-axis ticks and tooltip values:

[Custom tooltip](#custom-tooltip)
---------------------------------

Use `tooltipProps.content` to pass custom tooltip renderer to recharts [Tooltip](https://recharts.org/en-US/api/Tooltip) component. Note that it is required to filter recharts payload with `getFilteredChartTooltipPayload` function to remove empty values that are used for styling purposes only.

[Remove tooltip](#remove-tooltip)
---------------------------------

To remove tooltip, set `withTooltip={false}`. It also removes the cursor line and disables interactions with the chart.

[Customize dots](#customize-dots)
---------------------------------

Use `dotProps` to pass props down to recharts dot in regular state and `activeDotProps` to pass props down to recharts dot in active state (when cursor is over the current series).

[Stroke width](#stroke-width)
-----------------------------

Use `strokeWidth` prop to control the stroke width of all areas:

[Fill opacity](#fill-opacity)
-----------------------------

Use `fillOpacity` prop to control the fill opacity of all areas:

[Sync multiple AreaCharts](#sync-multiple-areacharts)
-----------------------------------------------------

You can pass props down to recharts [AreaChart](https://recharts.org/en-US/api/AreaChart) component with `areaChartProps` prop. For example, setting `areaChartProps={{ syncId: 'any-id' }}` will sync tooltip of multiple `AreaChart` components with the same `syncId` prop.

Apples sales:

Tomatoes sales:

[Vertical orientation](#vertical-orientation)
---------------------------------------------

Set `orientation="vertical"` to render a vertical area chart:

[Dashed area line](#dashed-area-line)
-------------------------------------

Set `strokeDasharray` property in `series` to change line style to dashed:

[Reference lines](#reference-lines)
-----------------------------------

Use `referenceLines` prop to render reference lines. Reference lines are always rendered behind the chart.

[Reference area](#reference-area)
---------------------------------

Use `ReferenceArea` component from recharts to display a reference area:</content>
</page>

<page>
  <title>LineChart | Mantine</title>
  <url>https://mantine.dev/charts/line-chart/</url>
  <content>[Usage](#usage)
---------------

With xaxis

With yaxis

With dots

[Gradient type](#gradient-type)
-------------------------------

Set `type="gradient"` to render a line chart with gradient fill. To customize gradient colors, use `gradientStops` prop. It accepts an array of objects with `offset` and `color` properties. `offset` is a number between 0 and 100 that defines the position of the color in the gradient, `color` is a reference to `theme.colors` or any valid CSS color.

[Legend](#legend)
-----------------

To display chart legend, set `withLegend` prop. When one of the items in the legend is hovered, the corresponding data series is highlighted in the chart.

[Legend position](#legend-position)
-----------------------------------

You can pass props down to recharts [Legend](https://recharts.org/en-US/api/Legend) component with `legendProps` prop. For example, setting `legendProps={{ verticalAlign: 'bottom', height: 50 }}` will render the legend at the bottom of the chart and set its height to 50px.

[Series labels](#series-labels)
-------------------------------

By default, series `name` is used as a label. To change it, set `label` property in `series` object:

[Connect nulls](#connect-nulls)
-------------------------------

Use `connectNulls` prop to specify whether to connect a data point across null points. By default, `connectNulls` is `true`.

[Points labels](#points-labels)
-------------------------------

To display labels on data points, set `withPointLabels`:

[X and Y axis props](#x-and-y-axis-props)
-----------------------------------------

Use `xAxisProps` and `yAxisProps` to pass props down to recharts [XAxis](https://recharts.org/en-US/api/XAxis) and [YAxis](https://recharts.org/en-US/api/YAxis) components. For example, these props can be used to change orientation of axis:

[Axis labels](#axis-labels)
---------------------------

Use `xAxisLabel` and `yAxisLabel` props to display axis labels:

[X axis offset](#x-axis-offset)
-------------------------------

Use `xAxisProps` to set padding between the charts ends and the x-axis:

[Y axis scale](#y-axis-scale)
-----------------------------

Use `yAxisProps` to change domain of the Y axis. For example, if you know that your data will always be in the range of 0 to 100, you can set domain to `[0, 100]`:

[Right Y axis](#right-y-axis)
-----------------------------

To display additional Y axis on the right side of the chart, set `withRightYAxis` prop. You can pass props down to recharts [YAxis](https://recharts.org/en-US/api/YAxis) component with `rightYAxisProps` prop and assign a label to the right Y axis with `rightYAxisLabel` prop. Note that you need to bind data series to the right Y axis by setting `yAxisId` in the `series` object.

[Value formatter](#value-formatter)
-----------------------------------

To format values in the tooltip and axis ticks, use `valueFormat` prop. It accepts a function that takes number value as an argument and returns formatted value:

[Line color](#line-color)
-------------------------

You can reference colors from [theme](https://mantine.dev/theming/theme-object/) the same way as in other components, for example, `blue`, `red.5`, `orange.7`, etc. Any valid CSS color value is also accepted.

[Change line color depending on color scheme](#change-line-color-depending-on-color-scheme)
-------------------------------------------------------------------------------------------

You can use CSS variables in `color` property. To define a CSS variable that changes depending on the color scheme, use [light/dark mixins](https://mantine.dev/styles/postcss-preset/#dark-and-light-mixins) or [light-dark function](https://mantine.dev/styles/postcss-preset/#light-dark-function). Example of line that is dark orange in light mode and lime in dark mode:

[Stroke dash array](#stroke-dash-array)
---------------------------------------

Set `strokeDasharray` prop to control the stroke dash array of the grid and cursor lines. The value represent the lengths of alternating dashes and gaps. For example, `strokeDasharray="10 5"` will render a dashed line with 10px dashes and 5px gaps.

[Grid and text colors](#grid-and-text-colors)
---------------------------------------------

Use `--chart-grid-color` and `--chart-text-color` to change colors of grid lines and text within the chart. With [CSS modules](https://mantine.dev/styles/css-modules/), you can change colors depending on color scheme:

If your application has only one color scheme, you can use `gridColor` and `textColor` props instead of CSS variables:

[Tooltip animation](#tooltip-animation)
---------------------------------------

By default, tooltip animation is disabled. To enable it, set `tooltipAnimationDuration` prop to a number of milliseconds to animate the tooltip position change.

[Units](#units)
---------------

Set `unit` prop to render a unit label next to the y-axis ticks and tooltip values:

[Custom tooltip](#custom-tooltip)
---------------------------------

Use `tooltipProps.content` to pass custom tooltip renderer to recharts [Tooltip](https://recharts.org/en-US/api/Tooltip) component. Note that it is required to filter recharts payload with `getFilteredChartTooltipPayload` function to remove empty values that are used for styling purposes only.

[Remove tooltip](#remove-tooltip)
---------------------------------

To remove tooltip, set `withTooltip={false}`. It also removes the cursor line and disables interactions with the chart.

[Customize dots](#customize-dots)
---------------------------------

Use `dotProps` to pass props down to recharts dot in regular state and `activeDotProps` to pass props down to recharts dot in active state (when cursor is over the current series).

[Stroke width](#stroke-width)
-----------------------------

Use `strokeWidth` prop to control the stroke width of all lines:

[Sync multiple LineCharts](#sync-multiple-linecharts)
-----------------------------------------------------

You can pass props down to recharts [LineChart](https://recharts.org/en-US/api/LineChart) component with `lineChartProps` prop. For example, setting `lineChartProps={{ syncId: 'any-id' }}` will sync tooltip of multiple `LineChart` components with the same `syncId` prop.

Apples sales:

Tomatoes sales:

[Vertical orientation](#vertical-orientation)
---------------------------------------------

Set `orientation="vertical"` to render a vertical line chart:

[Dashed line line](#dashed-line-line)
-------------------------------------

Set `strokeDasharray` property in `series` to change line style to dashed:

[Reference lines](#reference-lines)
-----------------------------------

Use `referenceLines` prop to render reference lines. Reference lines are always rendered behind the chart.

[Reference area](#reference-area)
---------------------------------

Use `ReferenceArea` component from recharts to display a reference area:</content>
</page>

<page>
  <title>BarChart | Mantine</title>
  <url>https://mantine.dev/charts/bar-chart/</url>
  <content>[Usage](#usage)
---------------

Use `BarChart` component without `type` prop to render a regular bar chart. In a regular bar chart, each data series is plotted on its own and does not interact with other series.

[Stacked bar chart](#stacked-bar-chart)
---------------------------------------

Set `type="stacked"` to render a stacked bar chart. In this type of bar chart stacking is applied along the vertical axis, allowing you to see the overall trend as well as the contribution of each individual series to the total.

[Mixed stacked bar chart](#mixed-stacked-bar-chart)
---------------------------------------------------

You can control how series are stacked by setting `stackId` property in series object:

[Percent bar chart](#percent-bar-chart)
---------------------------------------

Set `type="percent"` to render a percent bar chart. In this type of bar chart the y-axis scale is always normalized to 100%, making it easier to compare the contribution of each series in terms of percentages.

[Waterfall bar chart](#waterfall-bar-chart)
-------------------------------------------

Set `type="waterfall"` to render a waterfall bar chart. This chart type illustrates how an initial value is influenced by subsequent positive or negative values, with each bar starting where the previous one ended. Use the `color` prop inside data to color each bar individually. Note that the series color gets overwritten for this specific bar. Use the `standalone` prop inside data to decouple the bar from the flow.

[SVG pattern as bar fill](#svg-pattern-as-bar-fill)
---------------------------------------------------

You can use SVG patterns as bar fill. To do so, set `fill` property in series object to a url of the SVG pattern that is defined in the `defs` section of the chart `children`.

Example of using diagonal stripes and crosshatch patterns as bar fill:

[Bar color based on value](#bar-color-based-on-value)
-----------------------------------------------------

Use `getBarColor` prop to assign color based on value. `getBarColor` function is called with two arguments: value and series object. It should return a color string (theme color reference or any valid CSS color value).

Note that color returned by `getBarColor` does not impact colors of the legend and tooltip.

[Legend](#legend)
-----------------

To display chart legend, set `withLegend` prop. When one of the items in the legend is hovered, the corresponding data series is highlighted in the chart.

[Legend position](#legend-position)
-----------------------------------

You can pass props down to recharts [Legend](https://recharts.org/en-US/api/Legend) component with `legendProps` prop. For example, setting `legendProps={{ verticalAlign: 'bottom', height: 50 }}` will render the legend at the bottom of the chart and set its height to 50px.

[Series labels](#series-labels)
-------------------------------

By default, series `name` is used as a label. To change it, set `label` property in `series` object:

[X and Y axis props](#x-and-y-axis-props)
-----------------------------------------

Use `xAxisProps` and `yAxisProps` to pass props down to recharts [XAxis](https://recharts.org/en-US/api/XAxis) and [YAxis](https://recharts.org/en-US/api/YAxis) components. For example, these props can be used to change orientation of axis:

[Axis labels](#axis-labels)
---------------------------

Use `xAxisLabel` and `yAxisLabel` props to display axis labels:

[X axis offset](#x-axis-offset)
-------------------------------

Use `xAxisProps` to set padding between the charts ends and the x-axis:

[Y axis scale](#y-axis-scale)
-----------------------------

Use `yAxisProps` to change domain of the Y axis. For example, if you know that your data will always be in the range of 0 to 150, you can set domain to `[0, 150]`:

[Value formatter](#value-formatter)
-----------------------------------

To format values in the tooltip and axis ticks, use `valueFormat` prop. It accepts a function that takes number value as an argument and returns formatted value:

[Area color](#area-color)
-------------------------

You can reference colors from [theme](https://mantine.dev/theming/theme-object/) the same way as in other components, for example, `blue`, `red.5`, `orange.7`, etc. Any valid CSS color value is also accepted.

[Bar props](#bar-props)
-----------------------

You can pass props down to recharts [Bar](https://recharts.org/en-US/api/Bar) component with `barProps` prop. `barProps` accepts either an object with props or a function that receives series data as an argument and returns an object with props.

[Minimum bar size](#minimum-bar-size)
-------------------------------------

Use `minBarSize` prop to set the minimum size of the bar in px:

[Change bar color depending on color scheme](#change-bar-color-depending-on-color-scheme)
-----------------------------------------------------------------------------------------

You can use CSS variables in `color` property. To define a CSS variable that changes depending on the color scheme, use [light/dark mixins](https://mantine.dev/styles/postcss-preset/#dark-and-light-mixins) or [light-dark function](https://mantine.dev/styles/postcss-preset/#light-dark-function). Example of bar that is dark orange in light mode and lime in dark mode:

[Stroke dash array](#stroke-dash-array)
---------------------------------------

Set `strokeDasharray` prop to control the stroke dash array of the grid and cursor lines. The value represent the lengths of alternating dashes and gaps. For example, `strokeDasharray="10 5"` will render a dashed line with 10px dashes and 5px gaps.

[Grid and text colors](#grid-and-text-colors)
---------------------------------------------

Use `--chart-grid-color` and `--chart-text-color` to change colors of grid lines and text within the chart. With [CSS modules](https://mantine.dev/styles/css-modules/), you can change colors depending on color scheme:

If your application has only one color scheme, you can use `gridColor` and `textColor` props instead of CSS variables:

[Tooltip animation](#tooltip-animation)
---------------------------------------

By default, tooltip animation is disabled. To enable it, set `tooltipAnimationDuration` prop to a number of milliseconds to animate the tooltip position change.

[Units](#units)
---------------

Set `unit` prop to render a unit label next to the y-axis ticks and tooltip values:

[Custom tooltip](#custom-tooltip)
---------------------------------

Use `tooltipProps.content` to pass custom tooltip renderer to recharts [Tooltip](https://recharts.org/en-US/api/Tooltip) component. Note that it is required to filter recharts payload with `getFilteredChartTooltipPayload` function to remove empty values that are used for styling purposes only.

[Remove tooltip](#remove-tooltip)
---------------------------------

To remove tooltip, set `withTooltip={false}`. It also removes the cursor line and disables interactions with the chart.

[Sync multiple BarCharts](#sync-multiple-barcharts)
---------------------------------------------------

You can pass props down to recharts [BarChart](https://recharts.org/en-US/api/BarChart) component with `barChartProps` prop. For example, setting `barChartProps={{ syncId: 'any-id' }}` will sync tooltip of multiple `BarChart` components with the same `syncId` prop.

Smartphones sales:

Laptops sales:

[Vertical orientation](#vertical-orientation)
---------------------------------------------

Set `orientation="vertical"` to render a vertical bar chart:

[Reference lines](#reference-lines)
-----------------------------------

Use `referenceLines` prop to render reference lines. Reference lines are always rendered behind the chart.

[Reference area](#reference-area)
---------------------------------

Use `ReferenceArea` component from recharts to display a reference area:

[Bar value label](#bar-value-label)
-----------------------------------

To display value above each bar, set `withBarValueLabel`:

[Bar value label props](#bar-value-label-props)
-----------------------------------------------

You can pass props down to recharts [LabelList](https://recharts.org/en-US/api/LabelList) component with `valueLabelProps` prop. `valueLabelProps` accepts either an object with props or a function that receives series data as an argument and returns an object with props.

[Bar overlays](#bar-overlays)
-----------------------------</content>
</page>

<page>
  <title>CompositeChart | Mantine</title>
  <url>https://mantine.dev/charts/composite-chart/</url>
  <content>[Usage](#usage)
---------------

`CompositeChart` allows using `Line`, `Area` and `Bar` charts together in a single chart:

With xaxis

With yaxis

With dots

[Legend](#legend)
-----------------

To display chart legend, set `withLegend` prop. When one of the items in the legend is hovered, the corresponding data series is highlighted in the chart.

[Legend position](#legend-position)
-----------------------------------

You can pass props down to recharts [Legend](https://recharts.org/en-US/api/Legend) component with `legendProps` prop. For example, setting `legendProps={{ verticalAlign: 'bottom', height: 50 }}` will render the legend at the bottom of the chart and set its height to 50px.

[Series labels](#series-labels)
-------------------------------

By default, series `name` is used as a label. To change it, set `label` property in `series` object:

[Points labels](#points-labels)
-------------------------------

To display labels on data points, set `withPointLabels`. This feature is supported only for `Line` and `Area` charts:

[X and Y axis props](#x-and-y-axis-props)
-----------------------------------------

Use `xAxisProps` and `yAxisProps` to pass props down to recharts [XAxis](https://recharts.org/en-US/api/XAxis) and [YAxis](https://recharts.org/en-US/api/YAxis) components. For example, these props can be used to change orientation of axis:

[Axis labels](#axis-labels)
---------------------------

Use `xAxisLabel` and `yAxisLabel` props to display axis labels:

[X axis offset](#x-axis-offset)
-------------------------------

Use `xAxisProps` to set padding between the charts ends and the x-axis:

[Y axis scale](#y-axis-scale)
-----------------------------

Use `yAxisProps` to change domain of the Y axis. For example, if you know that your data will always be in the range of 0 to 100, you can set domain to `[0, 100]`:

[Right Y axis](#right-y-axis)
-----------------------------

To display additional Y axis on the right side of the chart, set `withRightYAxis` prop. You can pass props down to recharts [YAxis](https://recharts.org/en-US/api/YAxis) component with `rightYAxisProps` prop and assign a label to the right Y axis with `rightYAxisLabel` prop. Note that you need to bind data series to the right Y axis by setting `yAxisId` in the `series` object.

[Rotate x-axis labels](#rotate-x-axis-labels)
---------------------------------------------

To rotate x-axis labels, set `xAxisProps.angle` to a number of degrees to rotate:

[Value formatter](#value-formatter)
-----------------------------------

To format values in the tooltip and axis ticks, use `valueFormat` prop. It accepts a function that takes number value as an argument and returns formatted value:

[Chart color](#chart-color)
---------------------------

You can reference colors from [theme](https://mantine.dev/theming/theme-object/) the same way as in other components, for example, `blue`, `red.5`, `orange.7`, etc. Any valid CSS color value is also accepted.

[Change chart color depending on color scheme](#change-chart-color-depending-on-color-scheme)
---------------------------------------------------------------------------------------------

You can use CSS variables in `color` property. To define a CSS variable that changes depending on the color scheme, use [light/dark mixins](https://mantine.dev/styles/postcss-preset/#dark-and-light-mixins) or [light-dark function](https://mantine.dev/styles/postcss-preset/#light-dark-function). Example of chart that is dark orange in light mode and lime in dark mode:

[Stroke dash array](#stroke-dash-array)
---------------------------------------

Set `strokeDasharray` prop to control the stroke dash array of the grid and cursor lines. The value represent the lengths of alternating dashes and gaps. For example, `strokeDasharray="10 5"` will render a dashed line with 10px dashes and 5px gaps.

[Grid and text colors](#grid-and-text-colors)
---------------------------------------------

Use `--chart-grid-color` and `--chart-text-color` to change colors of grid lines and text within the chart. With [CSS modules](https://mantine.dev/styles/css-modules/), you can change colors depending on color scheme:

If your application has only one color scheme, you can use `gridColor` and `textColor` props instead of CSS variables:

[Tooltip animation](#tooltip-animation)
---------------------------------------

By default, tooltip animation is disabled. To enable it, set `tooltipAnimationDuration` prop to a number of milliseconds to animate the tooltip position change.

[Units](#units)
---------------

Set `unit` prop to render a unit label next to the y-axis ticks and tooltip values:

[Custom tooltip](#custom-tooltip)
---------------------------------

Use `tooltipProps.content` to pass custom tooltip renderer to recharts [Tooltip](https://recharts.org/en-US/api/Tooltip) component. Note that it is required to filter recharts payload with `getFilteredChartTooltipPayload` function to remove empty values that are used for styling purposes only.

[Remove tooltip](#remove-tooltip)
---------------------------------

To remove tooltip, set `withTooltip={false}`. It also removes the cursor line and disables interactions with the chart.

[Customize dots](#customize-dots)
---------------------------------

Use `dotProps` to pass props down to recharts dot in regular state and `activeDotProps` to pass props down to recharts dot in active state (when cursor is over the current series).

[Stroke width](#stroke-width)
-----------------------------

Use `strokeWidth` prop to control the stroke width of all areas/lines:

[Sync multiple charts](#sync-multiple-charts)
---------------------------------------------

You can pass props down to recharts [ComposedChart](https://recharts.org/en-US/api/ComposedChart) component with `composedChartProps` prop. For example, setting `composedChartProps={{ syncId: 'any-id' }}` will sync tooltip of multiple `CompositeChart` components with the same `syncId` prop.

Apples sales:

Tomatoes sales:

[Dashed lines](#dashed-lines)
-----------------------------

Set `strokeDasharray` property in `series` to change line style to dashed:

[Reference lines](#reference-lines)
-----------------------------------

Use `referenceLines` prop to render reference lines. Reference lines are always rendered behind the chart.</content>
</page>

<page>
  <title>PieChart | Mantine</title>
  <url>https://mantine.dev/charts/pie-chart/</url>
  <content>[Usage](#usage)
---------------

`PieChart` is based on [PieChart recharts component](https://recharts.org/en-US/api/PieChart):

[Segments labels](#segments-labels)
-----------------------------------

Set `withLabels` prop to display labels next to each segment. Use `labelPosition` prop to control the position of labels relative to the corresponding segment. Note that if your chart has a lot of segments and `labelPosition="inside"` is set, labels might overlap. In this case, use `labelPosition="outside`.

[Size](#size)
-------------

Set `size` prop to control width and height of the chart. Note that if `withLabels` and `labelPosition="outside"` prop are set, the chart height is automatically increased by 80px to make room for labels. You can override this behavior by setting `h` and `w` [style prop](https://mantine.dev/styles/style-props/).

[Segment color](#segment-color)
-------------------------------

You can reference colors from [theme](https://mantine.dev/theming/theme-object/) the same way as in other components, for example, `blue`, `red.5`, `orange.7`, etc. Any valid CSS color value is also accepted.

[Enable tooltip](#enable-tooltip)
---------------------------------

To enable the tooltip, set `withTooltip` prop:

[Tooltip data source](#tooltip-data-source)
-------------------------------------------

By default, the tooltip displays data for all segments when hovered over any segment. To display data only for the hovered segment, set `tooltipDataSource="segment"`:

Data only for hovered segment

Data only for all segments

[Start and end angle](#start-and-end-angle)
-------------------------------------------

Use `startAngle` and `endAngle` props to control the start and end angle of the chart. For example, to display a half-circle chart, set `startAngle={180}` and `endAngle={0}`:

Note that even when `startAngle` and `endAngle` props are set, the chart still takes the same amount of space as if it was a full circle.

[Segments stroke](#segments-stroke)
-----------------------------------

Use `strokeWidth` prop to control the width of the stroke around each segment:

To change color of the stroke, use `strokeColor` prop. You can reference colors from [theme](https://mantine.dev/theming/theme-object/) the same way as in other components, for example, `blue`, `red.5`, `orange.7`, etc. Any valid CSS color value is also accepted.

By default, segments stroke color is the same as the background color of the body element (`--mantine-color-body` CSS variable). If you want to change it depending on the color scheme, define CSS variable and pass it to the `strokeColor` prop:</content>
</page>

<page>
  <title>DonutChart | Mantine</title>
  <url>https://mantine.dev/charts/donut-chart/</url>
  <content>[Usage](#usage)
---------------

`DonutChart` is based on [PieChart recharts component](https://recharts.org/en-US/api/PieChart):

[Segments labels](#segments-labels)
-----------------------------------

Set `withLabels` prop to display labels next to each segment:

[Size and thickness](#size-and-thickness)
-----------------------------------------

Set `size` prop to control width and height of the chart. Note that if `withLabels` prop is set, the chart height is automatically increased by 80px to make room for labels. You can override this behavior by setting `h` [style prop](https://mantine.dev/styles/style-props/).

[Padding angle](#padding-angle)
-------------------------------

Use `paddingAngle` prop to control the space between segments:

[Segment color](#segment-color)
-------------------------------

You can reference colors from [theme](https://mantine.dev/theming/theme-object/) the same way as in other components, for example, `blue`, `red.5`, `orange.7`, etc. Any valid CSS color value is also accepted.

[Tooltip data source](#tooltip-data-source)
-------------------------------------------

By default, the tooltip displays data for all segments when hovered over any segment. To display data only for the hovered segment, set `tooltipDataSource="segment"`:

Data only for hovered segment

Data only for all segments

[Without tooltip](#without-tooltip)
-----------------------------------

To remove the tooltip, set `withTooltip={false}`:

[Chart label](#chart-label)
---------------------------

To display a label in the center of the chart, use `chartLabel` prop. It accepts a string or a number:

[Start and end angle](#start-and-end-angle)
-------------------------------------------

Use `startAngle` and `endAngle` props to control the start and end angle of the chart. For example, to display a half-circle chart, set `startAngle={180}` and `endAngle={0}`:

Note that even when `startAngle` and `endAngle` props are set, the chart still takes the same amount of space as if it was a full circle.

[Segments stroke](#segments-stroke)
-----------------------------------

Use `strokeWidth` prop to control the width of the stroke around each segment:

To change color of the stroke, use `strokeColor` prop. You can reference colors from [theme](https://mantine.dev/theming/theme-object/) the same way as in other components, for example, `blue`, `red.5`, `orange.7`, etc. Any valid CSS color value is also accepted.

By default, segments stroke color is the same as the background color of the body element (`--mantine-color-body` CSS variable). If you want to change it depending on the color scheme, define CSS variable and pass it to the `strokeColor` prop:</content>
</page>

<page>
  <title>FunnelChart | Mantine</title>
  <url>https://mantine.dev/charts/funnel-chart/</url>
  <content>[Usage](#usage)
---------------

`FunnelChart` is based on [FunnelChart recharts component](https://recharts.org/en-US/api/FunnelChart):

[Segments labels](#segments-labels)
-----------------------------------

Set `withLabels` prop to display labels next to each segment. Use `labelPosition` prop to control the position of labels relative to the corresponding segment.

[Size and thickness](#size-and-thickness)
-----------------------------------------

Set `size` prop to control width and height of the chart. You can override this behavior by setting `h` [style prop](https://mantine.dev/styles/style-props/).

[Segment color](#segment-color)
-------------------------------

You can reference colors from [theme](https://mantine.dev/theming/theme-object/) the same way as in other components, for example, `blue`, `red.5`, `orange.7`, etc. Any valid CSS color value is also accepted.

[Tooltip data source](#tooltip-data-source)
-------------------------------------------

By default, the tooltip displays data for all segments when hovered over any segment. To display data only for the hovered segment, set `tooltipDataSource="segment"`:

Data only for hovered segment

Data only for all segments

[Without tooltip](#without-tooltip)
-----------------------------------

To remove the tooltip, set `withTooltip={false}`:

[Segments stroke](#segments-stroke)
-----------------------------------

Use `strokeWidth` prop to control the width of the stroke around each segment:

To change color of the stroke, use `strokeColor` prop. You can reference colors from [theme](https://mantine.dev/theming/theme-object/) the same way as in other components, for example, `blue`, `red.5`, `orange.7`, etc. Any valid CSS color value is also accepted.

By default, segments stroke color is the same as the background color of the body element (`--mantine-color-body` CSS variable). If you want to change it depending on the color scheme, define CSS variable and pass it to the `strokeColor` prop:</content>
</page>

<page>
  <title>RadarChart | Mantine</title>
  <url>https://mantine.dev/charts/radar-chart/</url>
  <content>[Usage](#usage)
---------------

`RadarChart` is based on recharts [RadarChart](https://recharts.org/en-US/api/RadarChart) component:

[Multiple series](#multiple-series)
-----------------------------------

You can display multiple series on the same radar chart:

[Change color](#change-color)
-----------------------------

You can reference colors from [theme](https://mantine.dev/theming/theme-object/) the same way as in other components, for example, `blue`, `red.5`, `orange.7`, etc. Any valid CSS color value is also accepted.

[Hide/show chart parts](#hideshow-chart-parts)
----------------------------------------------

With polar grid

With polar angle axis

With polar radius axis

With tooltip

With dots

[With tooltip and dots](#with-tooltip-and-dots)
-----------------------------------------------

[Recharts props](#recharts-props)
---------------------------------

To pass props down to the underlying recharts components, use the following props:

*   `radarChartProps` passed props to [RadarChart](https://recharts.org/en-US/api/RadarChart) component
*   `polarGridProps` passed props to [PolarGrid](https://recharts.org/en-US/api/PolarGrid) component
*   `polarAngleAxisProps` passed props to [PolarAngleAxis](https://recharts.org/en-US/api/PolarAngleAxis) component
*   `polarRadiusAxisProps` passed props to [PolarRadiusAxis](https://recharts.org/en-US/api/PolarRadiusAxis) component

Example of passing props down to [PolarRadiusAxis](https://recharts.org/en-US/api/PolarRadiusAxis) component:

[Legend](#legend)
-----------------

Set `withLegend` prop to display the legend:</content>
</page>

<page>
  <title>ScatterChart | Mantine</title>
  <url>https://mantine.dev/charts/scatter-chart/</url>
  <content>[Usage](#usage)
---------------

[Multiple series](#multiple-series)
-----------------------------------

[Legend](#legend)
-----------------

To display chart legend, set `withLegend` prop. When one of the items in the legend is hovered, the corresponding data series is highlighted in the chart.

[Legend position](#legend-position)
-----------------------------------

You can pass props down to recharts [Legend](https://recharts.org/en-US/api/Legend) component with `legendProps` prop. For example, setting `legendProps={{ verticalAlign: 'bottom', height: 50 }}` will render the legend at the bottom of the chart and set its height to 50px.

[X and Y axis props](#x-and-y-axis-props)
-----------------------------------------

Use `xAxisProps` and `yAxisProps` to pass props down to recharts [XAxis](https://recharts.org/en-US/api/XAxis) and [YAxis](https://recharts.org/en-US/api/YAxis) components. For example, these props can be used to change orientation of axis:

[Value formatter](#value-formatter)
-----------------------------------

To format values in the tooltip and axis ticks, use `valueFormat` prop. It accepts a function that takes number value as an argument and returns formatted value or an object with `x` and `y` keys to format x and y values separately:

[Point labels](#point-labels)
-----------------------------

Set `pointLabels` prop to `x` or `y` to display labels on data points for the corresponding axis:

[Grid and text colors](#grid-and-text-colors)
---------------------------------------------

Use `--chart-grid-color` and `--chart-text-color` to change colors of grid lines and text within the chart. With [CSS modules](https://mantine.dev/styles/css-modules/), you can change colors depending on color scheme:

If your application has only one color scheme, you can use `gridColor` and `textColor` props instead of CSS variables:

[Stroke dash array](#stroke-dash-array)
---------------------------------------

Set `strokeDasharray` prop to control the stroke dash array of the grid and cursor lines. The value represent the lengths of alternating dashes and gaps. For example, `strokeDasharray="10 5"` will render a dashed line with 10px dashes and 5px gaps.

[Units](#units)
---------------

Set `unit` prop to render a unit label next to the axis ticks and tooltip values:

[Tooltip labels](#tooltip-labels)
---------------------------------

To customize labels displayed in the tooltip, use `labels` prop:

[Custom tooltip](#custom-tooltip)
---------------------------------

Use `tooltipProps.content` to pass custom tooltip renderer to recharts [Tooltip](https://recharts.org/en-US/api/Tooltip) component:

[Remove tooltip](#remove-tooltip)
---------------------------------

To remove tooltip, set `withTooltip={false}`. It also removes the cursor line and disables interactions with the chart.

[Tooltip animation](#tooltip-animation)
---------------------------------------

By default, tooltip animation is disabled. To enable it, set `tooltipAnimationDuration` prop to a number of milliseconds to animate the tooltip position change.

[Customize dots](#customize-dots)
---------------------------------

You can use any shape as a dot by passing props to recharts [Scatter](https://recharts.org/en-US/api/Scatter) component:

[Reference lines](#reference-lines)
-----------------------------------

Use `referenceLines` prop to render reference lines. Reference lines are always rendered behind the chart.</content>
</page>

<page>
  <title>BubbleChart | Mantine</title>
  <url>https://mantine.dev/charts/bubble-chart/</url>
  <content>[Usage](#usage)
---------------

[Change color](#change-color)
-----------------------------

You can reference colors from [theme](https://mantine.dev/theming/theme-object/) the same way as in other components, for example, `blue`, `red.5`, `orange.7`, etc. Any valid CSS color value is also accepted.

[Change area color depending on color scheme](#change-area-color-depending-on-color-scheme)
-------------------------------------------------------------------------------------------

You can use CSS variables in `color` property. To define a CSS variable that changes depending on the color scheme, use [light/dark mixins](https://mantine.dev/styles/postcss-preset/#dark-and-light-mixins) or [light-dark function](https://mantine.dev/styles/postcss-preset/#light-dark-function). Example of area that is dark orange in light mode and lime in dark mode:

[Remove tooltip](#remove-tooltip)
---------------------------------

To remove tooltip, set `withTooltip={false}`. It also removes the cursor line and disables interactions with the chart.

[Value formatter](#value-formatter)
-----------------------------------

To format values in the tooltip, use `valueFormat` prop. It accepts a function that takes number value as an argument and returns formatted value:

[Grid and text colors](#grid-and-text-colors)
---------------------------------------------

Use `--chart-grid-color` and `--chart-text-color` to change colors of grid lines and text within the chart. With [CSS modules](https://mantine.dev/styles/css-modules/), you can change colors depending on color scheme:

If your application has only one color scheme, you can use `gridColor` and `textColor` props instead of CSS variables:</content>
</page>

<page>
  <title>RadialBarChart | Mantine</title>
  <url>https://mantine.dev/charts/radial-bar-chart/</url>
  <content>    import { RadialBarChart } from '@mantine/charts';
    
    const data = [
        { name: '18-24', value: 31.47, color: 'blue' },
        { name: '25-29', value: 26.69, color: 'blue' },
        { name: '30-34', value: 15.69, color: 'blue' },
        { name: '35-39', value: 8.22, color: 'blue' },
        { name: '40-49', value: 8.63, color: 'blue' },
        { name: '50+', value: 2.63, color: 'blue' },
        { name: 'unknown', value: 6.67, color: 'blue' },
      ];
    
    function Demo() {
      return <RadialBarChart data={data} dataKey="value" h={220} w={220} />;
    }</content>
</page>

<page>
  <title>Sparkline | Mantine</title>
  <url>https://mantine.dev/charts/sparkline/</url>
  <content>[Usage](#usage)
---------------

`Sparkline` is a simplified version of [AreaChart](https://mantine.dev/charts/area-chart/). It can be used to display a single series of data in a small space.

[Change area color depending on color scheme](#change-area-color-depending-on-color-scheme)
-------------------------------------------------------------------------------------------

You can use CSS variables in `color` property. To define a CSS variable that changes depending on the color scheme, use [light/dark mixins](https://mantine.dev/styles/postcss-preset/#dark-and-light-mixins) or [light-dark function](https://mantine.dev/styles/postcss-preset/#light-dark-function). Example of area that is dark orange in light mode and lime in dark mode:

[Trend colors](#trend-colors)
-----------------------------

Use `trendColors` prop instead of `color` to change chart color depending on the trend. The prop accepts an object with `positive`, `negative` and `neutral` properties:

*   `positive` - color for positive trend (first value is less than the last value in `data` array)
*   `negative` - color for negative trend (first value is greater than the last value in `data` array)
*   `neutral` - color for neutral trend (first and last values are equal)

`neutral` is optional, if not provided, the color will be the same as `positive`.

Positive trend:

Negative trend:

Neutral trend:</content>
</page>

<page>
  <title>Heatmap | Mantine</title>
  <url>https://mantine.dev/charts/heatmap/</url>
  <content>[Usage](#usage)
---------------

`Heatmap` is used to display data in a table where each column represents a week. The only required prop is `data` – object where keys are dates in `YYYY-MM-DD` format and values are numbers.

`startDate` and `endDate` props are optional, they are used to define heatmap range. If not set, heatmap will display data for the last year.

[Data format](#data-format)
---------------------------

`Heatmap` expects data in the following format:

[With tooltip](#with-tooltip)
-----------------------------

Set `withTooltip` and `getTooltipLabel` props to display tooltip when `Heatmap` cells are hovered. `getTooltipLabel` is called with date and value and must return string to display in tooltip.

MonWedFriSunFebMarAprMayJunJulAugSepOctNovDecJan

[Change colors](#change-colors)
-------------------------------

`Heatmap` colors can be changed with `colors` prop. It should be an array of any valid CSS color values (hex, rgba, CSS variables, etc.). By default, `Heatmap` uses 4 colors to indicate heat level, but you can pass any number of colors.

[Colors depending on color scheme](#colors-depending-on-color-scheme)
---------------------------------------------------------------------

If you want to change colors depending on the color scheme, you should define those colors in `.css` file:

Note that in this case, you can only use 4 colors without passing `colors` prop. If you need more colors, you should pass them manually to the component:

[Values domain](#values-domain)
-------------------------------

By default, `Heatmap` calculates domain based on data values, for example, for the following data, the domain will be `[1, 4]`:

Based on the domain, `Heatmap` calculates colors for each rect: 1 – min heat level, 4 – max heat level. To specify domain manually, use `domain` prop. It is useful when your data does not cover the whole range of possible values. For example, the subset of data passed to the heatmap has values from 1 to 4, but the actual range is from 1 to 10. In this case, you can pass `[1, 10]` to `domain` prop:

[Weekdays and months labels](#weekdays-and-months-labels)
---------------------------------------------------------

Set `withMonthLabels` and `withWeekdayLabels` props to display chart labels:

MonWedFriSunFebMarAprMayJunJulAugSepOctNovDecJan

[Change labels text](#change-labels-text)
-----------------------------------------

To change labels, use `weekdayLabels` and `monthLabels` props. `weekdayLabels` prop must be an array of 7 strings with weekday names starting from Sunday. `monthLabels` prop must be an array of 12 strings with month names starting from January.

ПнСрПтВсФевМарАпрМайИюнИюлАвгСенОктНояДекЯнв

[Rect size, gap and radius](#rect-size-gap-and-radius)
------------------------------------------------------

[Pass props to rect](#pass-props-to-rect)
-----------------------------------------

Use `getRectProps` to pass props to each rect. For example, it can be used to add onClick handler to each rect:

[Hide outside dates](#hide-outside-dates)
-----------------------------------------

[First day of week](#first-day-of-week)
---------------------------------------

The default first day of the week is Monday, you can change it with `firstDayOfWeek` prop:</content>
</page>

<page>
  <title>CodeHighlight | Mantine</title>
  <url>https://mantine.dev/x/code-highlight/</url>
  <content>[Installation](#installation)
-----------------------------

After installation import package styles at the root of your application:

[Example](#example)
-------------------

`CodeHighlight` component is used to display code snippets with syntax highlighting. It provides a flexible adapter system that allows using any code highlighting library of your choice.

Example of code highlighting with [shiki](https://shiki.matsu.io/):

[Adapters](#adapters)
---------------------

`@mantine/code-highlight` package does not depend on any specific code highlighting library. You can choose one of the default adapters provided by the package or create your own.

Default adapters:

*   `createShikiAdapter` – creates [shiki](https://shiki.matsu.io/) adapter
*   `createHighlightJsAdapter` – creates [highlight.js](https://highlightjs.org/) adapter
*   `plainTextAdapter` – does not highlight code, just displays it as plain text (used by default if no adapter provided)

[Usage with shiki](#usage-with-shiki)
-------------------------------------

[Shiki](https://shiki.matsu.io/) library provides the most advanced syntax highlighting for TypeScript and CSS/Sass code. It uses textmate grammars to highlight code (same as in VSCode). Shiki adapter is recommended if you need to highlight advanced TypeScript (generics, jsx nested in props) or CSS code (custom syntaxes, newest features). Shiki adapter is used for all code highlighting in Mantine documentation.

To use shiki adapter you need to install `shiki` package:

Then wrap your app with `CodeHighlightAdapterProvider` and provide `createShikiAdapter` as `adapter` prop:

After that, you can use `CodeHighlight` component in your application:

All further code highlighting examples on this page are using shiki adapter.

[Usage with highlight.js](#usage-with-highlightjs)
--------------------------------------------------

[Highlight.js](https://highlightjs.org/) provides less accurate highlighting compared to shiki, but it has smaller bundle size and better performance. Choose highlight.js adapter if you need to highlight basic JavaScript, HTML, and CSS code.

To use highlight.js adapter you need to install `highlight.js` package:

Then wrap your app with `CodeHighlightAdapterProvider` and provide `createHighlightJsAdapter` as `adapter` prop:

Then you need to add styles of one of the highlight.js themes to your application. You can do that by importing css file from `highlight.js` package or adding it via CDN link to the head of your application:

After that, you can use `CodeHighlight` component in your application.

[Create custom adapter](#create-custom-adapter)
-----------------------------------------------

You can create a custom adapter if you want to enhance the default behavior of the code highlighting or use a different library.

Example of creating a custom shiki adapter with custom themes and logic:

[Copy button](#copy-button)
---------------------------

You can customize copy button labels with `copyLabel` and `copiedLabel` props. In case you need to remove the copy button, set `withCopyButton={false}`.

[With tabs](#with-tabs)
-----------------------

`CodeHighlightTabs` component allows organizing multiple code blocks into tabs:

[Tabs with icons](#tabs-with-icons)
-----------------------------------

You can use any React node as tab icon. The example below uses TypeScript and CSS icons from the `@mantinex/dev-icons` package, but you can use any other icons library or custom icons:

[Tabs icons based on file name](#tabs-icons-based-on-file-name)
---------------------------------------------------------------

As an alternative to providing icons manually for each tab, you can use `getFileIcon` prop to assign icons based on file name. `getFileIcon` accepts file name and must React node or `null`.

[Expandable code](#expandable-code)
-----------------------------------

If the code snippet is too long, you can make it expandable with `withExpandButton` and `defaultExpanded={false}` props. To change label of the expand/collapse control tooltip, use `expandCodeLabel` and `collapseCodeLabel`.

[Custom controls](#custom-controls)
-----------------------------------

Use `controls` prop with `CodeHighlightControl` component to add custom controls to the code block:

[Inline code](#inline-code)
---------------------------

`InlineCodeHighlight` component allows highlighting inline code snippets:

You can highlight code inline: `<InlineCodeHighlight code="" language="tsx" />`. Is that not cool?</content>
</page>

<page>
  <title>Notifications system | Mantine</title>
  <url>https://mantine.dev/x/notifications/</url>
  <content>[Installation](#installation)
-----------------------------

After installation import package styles at the root of your application:

Add `Notifications` component anywhere in your application. Note that:

*   It is required to render `Notifications` component inside [MantineProvider](https://mantine.dev/theming/mantine-provider/)
*   You do not need to wrap your application with `Notifications` component – it is not a provider, it is a regular component
*   You should not render multiple `Notifications` components – if you do that, your notifications will be duplicated

All set! You can now use all notifications system features.

[Do not forget to import styles](#do-not-forget-to-import-styles)
-----------------------------------------------------------------

Followed installation instructions above but something is not working (`position` prop not working, notifications are stuck at the bottom)? You've fallen into the trap of not importing notifications styles! To fix the issue, import notifications styles at the root of your application:

[Functions](#functions)
-----------------------

`@mantine/notifications` package exports `notifications` object with the following functions:

*   `notifications.show` – adds given notification to the notifications list or queue, depending on the current state and `limit`
*   `notifications.hide` – removes notification with given `id` from the notifications state and queue
*   `notifications.update` – updates notification that was previously added to the state or queue
*   `notifications.updateState` – executes given callback with current notifications state and queue as an argument and updates state with returned value
*   `notifications.clean` – removes all notifications from the notifications state and queue
*   `notifications.cleanQueue` – removes all notifications from the queue

All functions can be imported from `@mantine/notifications` package and can be used in any part of your application:

You can also import these functions separately:

[Notification props](#notification-props)
-----------------------------------------

`notifications.show` and `notification.update` functions can be called with an object that has the following properties:

*   `id` – notification id, it is used to update and remove notifications, by default `id` is randomly generated
*   `position` – notification position, by default the value from the `position` prop of the `Notifications` component is used
*   `withBorder` – determines whether notification should have a border
*   `withCloseButton` – determines whether the close button should be visible
*   `onClose` – calls when notification is unmounted
*   `onOpen` – calls when notification is mounted
*   `autoClose` – defines timeout in ms on which notification will be automatically closed, use `false` to disable auto close
*   `message` – required notification body
*   `color, icon, title, radius, className, style, loading` – props passed down to the [Notification](https://mantine.dev/core/notification/) component

All properties except `message` are optional.

Notifications preview (`message` prop used as `children`):

Loading

With close button

With border

[Customize notification styles](#customize-notification-styles)
---------------------------------------------------------------

You can use `style`, `className` or [Styles API](https://mantine.dev/styles/styles-api/) `classNames`, `styles` props to customize notification styles. Usually, it is better to override [Notification](https://mantine.dev/core/notification/) styles with `classNames` prop in the [theme object](https://mantine.dev/theming/theme-object/).

[Notifications container position](#notifications-container-position)
---------------------------------------------------------------------

You can define notification position in `notifications.show` function. Possible `position` values:

*   `top-left`
*   `top-right`
*   `top-center`
*   `bottom-left`
*   `bottom-right`
*   `bottom-center`

The `position` can be defined on the `Notifications` component. In the following example, notifications will be displayed in the top right corner of the screen if `position` is not defined in `notifications.show` function:

[Limit and queue](#limit-and-queue)
-----------------------------------

You can limit maximum number of notifications that are displayed at a time by setting `limit` prop on `Notifications`:

All notifications added after the `limit` was reached are added to the queue and displayed when notification from current state is hidden.

[Remove notifications from state and queue](#remove-notifications-from-state-and-queue)
---------------------------------------------------------------------------------------

To remove specific notification from state or queue use `notifications.hide` function:

Use `notifications.cleanQueue` function to remove all notifications from the queue and `notifications.clean` to remove all notifications both from the state and queue:

[Update notification](#update-notification)
-------------------------------------------

[Auto close](#auto-close)
-------------------------

You can configure auto close timeout with `Notifications`:

Or per notification in `notifications.show`/`notifications.update` functions:

`notifications.show` and `notifications.update` functions `autoClose` prop has higher priority.

[Subscribe to notifications state](#subscribe-to-notifications-state)
---------------------------------------------------------------------

You can subscribe to notifications state changes with `useNotifications` hook. The hook returns an object with `notifications` and `queue` arrays. `notifications` array contains all notifications that are currently displayed, `queue` contains notifications that are waiting to be displayed.

Notifications state

\[\]

Notifications queue

\[\]</content>
</page>

<page>
  <title>Spotlight | Mantine</title>
  <url>https://mantine.dev/x/spotlight/</url>
  <content>[Installation](#installation)
-----------------------------

After installation import package styles at the root of your application:

[Usage](#usage)
---------------

`Spotlight` component can be used as a search or as a command center of your application. It is used as a search on mantine.dev website, you can trigger it with `Ctrl + K` shortcut. `Spotlight` is based on [Modal](https://mantine.dev/core/modal/) component and supports most of its props.

[Actions](#actions)
-------------------

`@mantine/spotlight` package exports an object with actions that can be used to control the spotlight:

These actions can be passed to event listeners or used anywhere in your application (not limited to React components):

You can also import actions directly from the `@mantine/spotlight` package, if you prefer this syntax:

[Spotlight store](#spotlight-store)
-----------------------------------

`spotlight` object documented above uses the default store, it works fine if you have only one spotlight in your application. In case you need multiple spotlights, you need to create your own store for each of them:

[Keyboard shortcuts](#keyboard-shortcuts)
-----------------------------------------

`Spotlight` uses [use-hotkeys](https://mantine.dev/hooks/use-hotkeys/) hook to handle keyboard shortcuts. By default, `Ctrl + K` and `Cmd + K` shortcuts are used to open spotlight, you can change them with `shortcut` prop:

[Limit prop](#limit-prop)
-------------------------

Use `limit` prop to limit the maximum number of actions that can be displayed at a time. Usually, 5–7 actions is a good number. `limit` prop is crucial for performance in case you have a lot of actions, it will prevent the spotlight from rendering all of them at once.

The example below renders 3000 actions, but only 7 of them are displayed at a time:

[Scrollable actions list](#scrollable-actions-list)
---------------------------------------------------

By default, `Spotlight` actions list is not scrollable. If you have a lot of actions that you need to display at a time, set `scrollable` and `maxHeight` props. Note that there are caveats with both approaches:

*   When the `scrollable` prop is not set, actions list height is not limited and the spotlight body will grow to fit all actions. This can result in a very long spotlight body that will overflow the viewport. To prevent this, use `limit` prop to define the maximum number of actions that can be displayed at a time. Usually, 5–7 actions is a good number.
*   When the `scrollable` prop is set, actions list height will always equal to the value of `maxHeight` prop (it will not shrink if there are not enough actions to fill the space). When there are more actions than can fit into the list, it will become scrollable. Scrolling logic is handled by [ScrollArea](https://mantine.dev/core/scroll-area/) component.

In other words, if you want the actions list to shrink, do not set `scrollable` prop and use `limit` prop. If you want the actions list to always have a fixed height, set `scrollable` and `maxHeight` props.

[Actions groups](#actions-groups)
---------------------------------

`Spotlight` supports actions groups, you can use them to group actions by category:

[Compound components](#compound-components)
-------------------------------------------

If you need more control over spotlight rendering and logic, use compound components. Available components:

*   `Spotlight.Root` – root component, should be used as a wrapper for all other components, accepts all props to customize logic
*   `Spotlight.Search` – search input
*   `Spotlight.ActionsList` – list of actions, required to wrap all actions and actions groups
*   `Spotlight.Action` – action button
*   `Spotlight.ActionsGroup` - group of actions
*   `Spotlight.Empty` – empty state (nothing found)

For example, with compound components pattern you can customize actions contents:

[Fixed elements offset](#fixed-elements-offset)
-----------------------------------------------

`Spotlight` component uses [react-remove-scroll](https://github.com/theKashey/react-remove-scroll) package to lock scroll. To properly size these `elements` add a `className` to them ([documentation](https://github.com/theKashey/react-remove-scroll#positionfixed-elements)):</content>
</page>

<page>
  <title>Dropzone | Mantine</title>
  <url>https://mantine.dev/x/dropzone/</url>
  <content>[Installation](#installation)
-----------------------------

After installation import package styles at the root of your application:

[Usage](#usage)
---------------

`Dropzone` lets you capture one or more files from user. Component is based on [react-dropzone](https://react-dropzone.js.org/) and support all of its core features:

*   Accepts/rejects files based on provided mime types
*   Limits individual file size
*   Renders given children and provides context based component to display elements based on current status

Drag images here or click to select files

Attach as many files as you like, each file should not exceed 5mb

[Dropzone.Accept, Dropzone.Reject and Dropzone.Idle](#dropzoneaccept-dropzonereject-and-dropzoneidle)
-----------------------------------------------------------------------------------------------------

`Dropzone.Accept`, `Dropzone.Reject` and `Dropzone.Idle` components are visible only when the user performs certain action:

*   `Dropzone.Accept` is visible only when the user drags file that can be accepted over the dropzone
*   `Dropzone.Reject` is visible only when the user drags file that cannot be accepted over the dropzone
*   `Dropzone.Idle` is visible when the user does not drag anything over dropzone

[Loading state](#loading-state)
-------------------------------

Set `loading` prop to indicate loading state with [LoadingOverlay](https://mantine.dev/core/loading-overlay/) component. When `loading` props is true user cannot drop or select new files (`Dropzone` becomes disabled):

Drag images here or click to select files

Attach as many files as you like, each file should not exceed 5mb

[Disabled state](#disabled-state)
---------------------------------

If you want to implement your own loading state you can disable `Dropzone` without `LoadingOverlay`. Same as with `loading`, when `Dropzone` is disabled user cannot drop or select new files:

Drag images here or click to select files

Attach as many files as you like, each file should not exceed 5mb

[Open file browser manually](#open-file-browser-manually)
---------------------------------------------------------

To open files browser from outside of component use `openRef` prop to get function that will trigger file browser:

Drag images here or click to select files

Attach as many files as you like, each file should not exceed 5mb

[Enable child pointer event](#enable-child-pointer-event)
---------------------------------------------------------

By default, Dropzone disables pointer events on its children for dragging events to work. When `activateOnClick={false}`, clicking on any children inside Dropzone will not do anything. However, you can set style `pointerEvents: 'all'` to make children clickable. Note that you need to set these styles only on interactive elements, such as buttons or links.

[Mime types](#mime-types)
-------------------------

To specify file types provide an object with the keys set to the [mime type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types) and the values as an array of file extensions. Find more examples of accepting specific file types in the [react-dropzone documentation](https://react-dropzone.js.org/#section-accepting-specific-file-types).

You can also specify file types by providing an array of mime types to `accept` prop:

To save some research time you can use `MIME_TYPES` variable exported from `@mantine/dropzone`:

`MIME_TYPES` includes following data:

Additionally you can use grouped mime types:

[Styles API](#styles-api)
-------------------------

`Dropzone` root element has the following data attributes to change styles based on current status:

*   `data-loading` – when `loading` prop is `true`
*   `data-accept` – when user drags files that can be accepted over the dropzone
*   `data-reject` – when user drags files that cannot be accepted over the dropzone
*   `data-idle` – default state – user does not drag any files over dropzone

[Images previews](#images-previews)
-----------------------------------

[Get ref](#get-ref)
-------------------

[Dropzone.FullScreen component](#dropzonefullscreen-component)
--------------------------------------------------------------

`Dropzone.FullScreen` lets you capture files dropped to browser window instead of specific area. It supports the same props as `Dropzone` component.

To preview component click button and drop images to browser window:</content>
</page>

<page>
  <title>Carousel | Mantine</title>
  <url>https://mantine.dev/x/carousel/</url>
  <content>[Installation](#installation)
-----------------------------

After installation import package styles at the root of your application:

[Do not forget to import styles](#do-not-forget-to-import-styles)
-----------------------------------------------------------------

Followed installation instructions above but something is not working (Carousel slides are rendered vertically, no controls or indicators)? You've fallen into the trap of not importing carousel styles! To fix the issue, import carousel styles at the root of your application:

[Documentation demos](#documentation-demos)
-------------------------------------------

Demos presents on this page use blue background color for demonstration purposes. To simply demos code, background color and other demo-only styles are not included in the demo code. When you copy paste demo code to your project, it will not have blue background color.

[Usage](#usage)
---------------

`@mantine/carousel` package is based on [embla carousel](https://www.embla-carousel.com/):

[Options](#options)
-------------------

With controls

With indicators

[Embla options](#embla-options)
-------------------------------

You can pass configuration options directly to embla carousel with `emblaOptions` prop. You can find embla options description in [embla options reference](https://www.embla-carousel.com/api/options/).

Example of passing `loop`, `dragFree` and `align` options:

[Size and gap](#size-and-gap)
-----------------------------

Set `slideSize` and `slideGap` on `Carousel` component to control size and gap of every slide:

[Responsive styles](#responsive-styles)
---------------------------------------

`slideSize` and `slideGap` props work the same way as [style props](https://mantine.dev/styles/style-props/), you can pass an object with values for different breakpoints:

[Container queries](#container-queries)
---------------------------------------

To use [container queries](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment/Container_queries) instead of media queries, set `type="container"`. With container queries, slides size and gap will be adjusted based on the container width, not the viewport width.

Note that, when using container queries, `slideSize` and `slideGap` props cannot reference `theme.breakpoints` values in keys. It is required to use exact px or em values.

To see how the slides size and gap changes, resize the root element of the demo with the resize handle located at the bottom right corner of the demo:

[Drag free](#drag-free)
-----------------------

`dragFree` will disable slides snap points – user will be able to stop dragging at any position:

[Vertical orientation](#vertical-orientation)
---------------------------------------------

Carousel with `orientation="vertical"` requires `height` prop to be set:

[Controls icons](#controls-icons)
---------------------------------

You can replace default next/previous controls icons with any React nodes:

[100% height](#100-height)
--------------------------

Set `height="100%"` to make Carousel take 100% height of the container. Note that in this case:

*   container element must have `display: flex` styles
*   carousel root element must have `flex: 1` styles
*   container element must have fixed height

[Get embla instance](#get-embla-instance)
-----------------------------------------

You can get [embla instance](https://www.embla-carousel.com/api/methods/) with `getEmblaApi` prop. You will be able enhance carousel with additional logic after that using embla api methods:

[Embla plugins](#embla-plugins)
-------------------------------

Set `plugins` prop to enhance carousel with [embla plugins](https://www.embla-carousel.com/plugins/). Note that plugins are not installed with `@mantine/carousel` package and you will need to install them on your side.

Example with [autoplay plugin](https://www.embla-carousel.com/plugins/autoplay/):

[Styles API](#styles-api)
-------------------------

`Carousel` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Component Styles API

Hover over selectors to highlight corresponding elements

[Indicator styles](#indicator-styles)
-------------------------------------

[Hide inactive controls](#hide-inactive-controls)
-------------------------------------------------

[Show controls on hover](#show-controls-on-hover)
-------------------------------------------------

[Example: Images carousel](#example-images-carousel)
----------------------------------------------------

[Example: Cards carousel](#example-cards-carousel)
--------------------------------------------------

nature

### Best forests to visit in North America

beach

### Hawaii beaches review: better than you think

nature

### Mountains at night: 12 best locations to enjoy the view

nature

### Aurora in Norway: when to visit for best experience

tourism

### Best places to visit this winter

nature

### Active volcanos reviews: travel at your own risk</content>
</page>

<page>
  <title>NavigationProgress | Mantine</title>
  <url>https://mantine.dev/x/nprogress/</url>
  <content>[Installation](#installation)
-----------------------------

    yarn add @mantine/nprogress

After installation import package styles at the root of your application:

    import '@mantine/nprogress/styles.css';

[Setup NavigationProgress](#setup-navigationprogress)
-----------------------------------------------------

Render `NavigationProgress` anywhere in your app within [MantineProvider](https://mantine.dev/theming/mantine-provider/):

    import { MantineProvider } from '@mantine/core';
    import { NavigationProgress } from '@mantine/nprogress';
    
    function Demo() {
      return (
        <MantineProvider>
          <NavigationProgress />
          {/* Your app here */}
        </MantineProvider>
      );
    }

[Usage](#usage)
---------------

    import { Button, Group } from '@mantine/core';
    import { nprogress, NavigationProgress } from '@mantine/nprogress';
    
    function Demo() {
      return (
        <>
          <NavigationProgress />
          <Group justify="center">
            <Button onClick={() => nprogress.start()}>Start</Button>
            <Button onClick={() => nprogress.stop()}>Stop</Button>
            <Button onClick={() => nprogress.increment()}>Increment</Button>
            <Button onClick={() => nprogress.decrement()}>Decrement</Button>
            <Button onClick={() => nprogress.set(50)}>Set 50%</Button>
            <Button onClick={() => nprogress.reset()}>Reset</Button>
            <Button onClick={() => nprogress.complete()}>Complete</Button>
          </Group>
        </>
      );
    }</content>
</page>

<page>
  <title>Modals manager | Mantine</title>
  <url>https://mantine.dev/x/modals/</url>
  <content>[Installation](#installation)
-----------------------------

[Setup ModalsProvider](#setup-modalsprovider)
---------------------------------------------

Wrap your app with `ModalsProvider` component:

[Confirm modal](#confirm-modal)
-------------------------------

@mantine/modals package includes special modal that can be used for confirmations. Component includes confirm and cancel buttons and supports children to display additional information about action. Use `openConfirmModal` function to open a confirm modal:

`openConfirmModal` function accepts one argument with following properties:

*   `modalId` – modal id, defaults to random id, can be used to close modal programmatically
*   `children` – additional modal content displayed before actions
*   `onCancel` – called when cancel button is clicked
*   `onConfirm` – called when confirm button is clicked
*   `closeOnConfirm` – should modal be closed when confirm button is clicked, defaults to `true`
*   `closeOnCancel` – should modal be closed when cancel button is clicked, defaults to `true`
*   `cancelProps` – cancel button props
*   `confirmProps` – confirm button props
*   `groupProps` – buttons [Group](https://mantine.dev/core/group/) props
*   `labels` – cancel and confirm buttons labels, can be defined on ModalsProvider

Using this properties you can customize confirm modal to match current context requirements:

To setup shared labels for confirm modals set `labels` on `ModalsProvider`:

[Context modals](#context-modals)
---------------------------------

You can define any amount of modals in ModalsProvider context:

And then open one of these modals with `modals.openContextModal` function. `modals.openContextModal` function accepts 2 arguments: modal key (should match one defined on ModalsProvider) and modal props:

[Typesafe context modals](#typesafe-context-modals)
---------------------------------------------------

By default `innerProps` and `modal` are not typesafe. You can add typesafety with a Typescript module declaration.

Typesafe context modals will force you to use the correct types for `openContextModal`:

[Content modals](#content-modals)
---------------------------------

With `modals.open` function you can open a modal with any content:

[Multiple opened modals](#multiple-opened-modals)
-------------------------------------------------

You can open multiple layers of modals. Every opened modal is added as first element in modals queue. To close all opened modals call `modals.closeAll()` function:

[Modal props](#modal-props)
---------------------------

You can pass props down to the [Modal](https://mantine.dev/core/modal/) component by adding them to the argument of every `modals.x` function. Example of setting `radius`, `size` and `withCloseButton` props:

[Dynamic Content and the modals manager](#dynamic-content-and-the-modals-manager)
---------------------------------------------------------------------------------

The Modals manager allows you to dynamically update the content and properties of both standard and context modals after they are opened.

To update regular modals, use the `modals.updateModal` function:

Context modals can also be updated dynamically using `modals.updateContextModal`:</content>
</page>

<page>
  <title>Rich text editor | Mantine</title>
  <url>https://mantine.dev/x/tiptap/</url>
  <content>[Installation](#installation)
-----------------------------

Install with yarn:

After installation import package styles at the root of your application:

[TipTap editor](#tiptap-editor)
-------------------------------

`@mantine/tiptap` provides a UI for [Tiptap](https://tiptap.dev/). `RichTextEditor` component works with [Editor](https://tiptap.dev/api/editor) instance of tiptap. This means that you have full control over the editor [state and configuration](https://tiptap.dev/guide/configuration) with [useEditor hook](https://tiptap.dev/installation/react).

In other words, `RichTextEditor` component does not manage state for you, controls just execute operations on the `Editor` instance. If you want to implement something that is related to state or component value (e.g. controlled mode, value transforms to HTML/Markdown), you should look for documentation on [tiptap.dev](https://tiptap.dev/) website.

[Usage](#usage)
---------------

[Subtle variant](#subtle-variant)
---------------------------------

`variant="subtle"` removes borders from the controls groups, makes controls larger and reduces spacing of the toolbar:

[Controlled](#controlled)
-------------------------

To control editor state, create a wrapper component and pass `onChange` handler to `useEditor` hook:

[Controls and extensions](#controls-and-extensions)
---------------------------------------------------

Some controls require installation of additional [Tiptap extensions](https://tiptap.dev/extensions). For example, if you want to use `RichTextEditor.Underline` control, you will need to install `@tiptap/extension-underline` package:

Included with `@tiptap/starter-kit` (should be installed by default):

*   `RichTextEditor.H1`
*   `RichTextEditor.H2`
*   `RichTextEditor.H3`
*   `RichTextEditor.H4`
*   `RichTextEditor.H5`
*   `RichTextEditor.H6`
*   `RichTextEditor.BulletList`
*   `RichTextEditor.OrderedList`
*   `RichTextEditor.Bold`
*   `RichTextEditor.Italic`
*   `RichTextEditor.Strikethrough`
*   `RichTextEditor.ClearFormatting`
*   `RichTextEditor.Blockquote`
*   `RichTextEditor.Code`
*   `RichTextEditor.CodeBlock`
*   `RichTextEditor.Hr`
*   `RichTextEditor.Undo`
*   `RichTextEditor.Redo`

Controls that require [@tiptap/extension-link](https://www.npmjs.com/package/@tiptap/extension-link) extension:

*   `RichTextEditor.Link`
*   `RichTextEditor.Unlink`

Controls that require [@tiptap/extension-text-align](https://www.npmjs.com/package/@tiptap/extension-text-align) extension:

*   `RichTextEditor.AlignLeft`
*   `RichTextEditor.AlignRight`
*   `RichTextEditor.AlignCenter`
*   `RichTextEditor.AlignJustify`

Controls that require [@tiptap/extension-color](https://www.npmjs.com/package/@tiptap/extension-color) and [@tiptap/extension-text-style](https://www.npmjs.com/package/@tiptap/extension-text-style) extensions:

*   `RichTextEditor.ColorPicker`
*   `RichTextEditor.Color`
*   `RichTextEditor.UnsetColor`

Other controls with required extensions:

*   `RichTextEditor.Underline` requires [@tiptap/extension-underline](https://www.npmjs.com/package/@tiptap/extension-underline)
*   `RichTextEditor.Superscript` requires [@tiptap/extension-superscript](https://www.npmjs.com/package/@tiptap/extension-superscript)
*   `RichTextEditor.Subscript` requires [@tiptap/extension-subscript](https://www.npmjs.com/package/@tiptap/extension-subscript)
*   `RichTextEditor.Highlight` requires [@tiptap/extension-highlight](https://www.npmjs.com/package/@tiptap/extension-highlight)

[Placeholder](#placeholder)
---------------------------

To use placeholder you will need to install [@tiptap/extension-placeholder](https://www.npmjs.com/package/@tiptap/extension-placeholder) package:

[Link extension](#link-extension)
---------------------------------

`@mantine/tiptap` provides custom `Link` extension that is required to be used instead of `@tiptap/extension-link` in order for `Ctrl + K` keyboard shortcut to work:

[Text color](#text-color)
-------------------------

To use text color you will need to install additional packages:

You can use the following controls to change text color:

*   `RichTextEditor.ColorPicker` – allows to pick colors from given predefined color swatches and with [ColorPicker](https://mantine.dev/core/color-picker/) component
*   `RichTextEditor.Color` – allows to apply given color with one click
*   `RichTextEditor.UnsetColor` – clears color styles

[Code highlight](#code-highlight)
---------------------------------

To use code highlight you will need to install additional packages:

[Tasks](#tasks)
---------------

To use tasks you will need to install additional packages:

[Typography styles](#typography-styles)
---------------------------------------

By default, `RichTextEditor` renders content with [TypographyStylesProvider](https://mantine.dev/core/typography-styles-provider/) and some additional styles. You can disable these styles by setting `withTypographyStyles={false}`:

Then you will be able to add your own styles either with [global styles](https://mantine.dev/styles/global-styles/) or with [Styles API](https://mantine.dev/styles/styles-api/):

[Bubble menu](#bubble-menu)
---------------------------

You can use [BubbleMenu](https://tiptap.dev/api/extensions/bubble-menu) component with any `RichTextEditor` controls. Bubble menu will appear near a selection of text:

[Floating menu](#floating-menu)
-------------------------------

You can use [FloatingMenu](https://tiptap.dev/api/extensions/floating-menu) component with any `RichTextEditor` controls. Floating menu will appear in an empty line:

[Sticky toolbar](#sticky-toolbar)
---------------------------------

Set `sticky` prop on `RichTextEditor.Toolbar` component to make toolbar sticky, control `top` property with `stickyOffset`. For example, on mantine.dev documentation website there is a header with `var(--docs-header-height)` height, in this case we will need to set `stickyOffset="var(--docs-header-height)"` to make sticky position correctly with fixed positioned element.

[Editor context](#editor-context)
---------------------------------

Use `useRichTextEditorContext` hook to get [Editor](https://tiptap.dev/api/editor) from the context. This hook can be used to create custom control or run any operations supported by the Tiptap [editor API](https://tiptap.dev/api/editor).

[Custom controls](#custom-controls)
-----------------------------------

Use `RichTextEditor.Control` component to create custom controls. It supports all props supported by `button` element and has `active` prop to indicate active state. Note that you will need to set `aria-label` attribute to make control visible for screen readers.

[Change icons](#change-icons)
-----------------------------

You can change icon of control by setting `icon` prop. It accepts a component that must handle `size` prop:

[Labels and localization](#labels-and-localization)
---------------------------------------------------

`RichTextEditor` supports changing labels for all controls with `labels` prop:

Most labels are used to add `aria-label` and `title` attributes to controls, some of the labels can be a function that returns string. If you do not provide all labels, then they will be merged with the default labels.

All available labels:

Default labels (can be imported from `@mantine/tiptap` package):</content>
</page>

<page>
  <title>VisuallyHidden | Mantine</title>
  <url>https://mantine.dev/core/visually-hidden/</url>
  <content>[Usage](#usage)
---------------

`VisuallyHidden` is a utility component that hides content visually but leaves it available to screen readers.

For example, it can be used with [ActionIcon](https://mantine.dev/core/action-icon/) component:

    import { IconHeart } from '@tabler/icons-react';
    import { ActionIcon, VisuallyHidden } from '@mantine/core';
    
    function Demo() {
      return (
        <ActionIcon>
          <IconHeart />
          <VisuallyHidden>Like post</VisuallyHidden>
        </ActionIcon>
      );
    }

[

Transition

](https://mantine.dev/core/transition/)[

Mantine extensions

](https://mantine.dev/x/extensions/)</content>
</page>

<page>
  <title>use-form | Mantine</title>
  <url>https://mantine.dev/form/use-form/</url>
  <content>[Installation](#installation)
-----------------------------

`@mantine/form` package does not depend on any other libraries, you can use it with or without `@mantine/core` inputs:

[Usage](#usage)
---------------

[API overview](#api-overview)
-----------------------------

All examples below use the following example use-form hook.

### [Values](#values)

[Form values guide](https://mantine.dev/form/values/)

### [List items](#list-items)

[Nested fields guide](https://mantine.dev/form/nested/)

### [Validation](#validation)

[Form validation guide](https://mantine.dev/form/validation/)

### [Errors](#errors)

[Form errors guide](https://mantine.dev/form/errors/)

Validation errors occur when defined validation rules were violated, `initialErrors` were specified in useForm properties or validation errors were set manually.

### [onReset and onSubmit](#onreset-and-onsubmit)

Wrapper function for form `onSubmit` and `onReset` event handler. `onSubmit` handler accepts as second argument a function that will be called with errors object when validation fails.

### [onSubmitPreventDefault option](#onsubmitpreventdefault-option)

By default, `event.preventDefault()` is called on the form `onSubmit` handler. If you want to change this behavior, you can pass `onSubmitPreventDefault` option to `useForm` hook. It can have the following values:

*   `always` (default) - always call `event.preventDefault()`
*   `never` - never call `event.preventDefault()`
*   `validation-failed` - call `event.preventDefault()` only if validation failed

### [Touched and dirty](#touched-and-dirty)

[Touched & dirty guide](https://mantine.dev/form/status/)

[UseFormReturnType](#useformreturntype)
---------------------------------------

`UseFormReturnType` can be used when you want to pass `form` as a prop to another component:</content>
</page>

<page>
  <title>use-field | Mantine</title>
  <url>https://mantine.dev/form/use-field/</url>
  <content>[Usage](#usage)
---------------

`use-field` hook is a simpler alternative to [use-form](https://mantine.dev/form/use-form/), it can be used to manage state of a single input without the need to create a form:

`use-field` hook accepts the following options object as a single argument:

And returns the following object:

[Validate on blur](#validate-on-blur)
-------------------------------------

To validate the field on blur, set `validateOnBlur` option to `true`:

[Validate on change](#validate-on-change)
-----------------------------------------

To validate the field on change, set `validateOnChange` option to `true`:

[Async validation](#async-validation)
-------------------------------------

`validate` option accepts both async and sync functions, in both cases the function must return an error message that will be displayed to the user or `null` if the value is valid. To keep track of async validation state, use `isValidating` property:

Async validation can be used with `validateOnBlur` option, but not recommended with `validateOnChange` because it will trigger validation on every key press which may lead to race conditions:

[Touched and dirty](#touched-and-dirty)
---------------------------------------

To get information about whether the field has been focused at least once, use `isTouched` method and to check if the value has been changed from the initial value, use `isDirty` method:

Dirty: not dirty

Touched: not touched

[Clear error on change](#clear-error-on-change)
-----------------------------------------------

By default, the error message is cleared when the value changes, to disable this behavior set `clearErrorOnChange` option to `false`:

[Uncontrolled mode](#uncontrolled-mode)
---------------------------------------

Uncontrolled mode of `use-field` hook works similar to uncontrolled mode of [use-form](https://mantine.dev/form/uncontrolled/). In uncontrolled mode, rerenders are minimized and the input value is managed by the input itself. It is useful if you experience performance issues with controlled mode, but in most cases controlled mode is recommended as it always provides up to date field information as React state.</content>
</page>

<page>
  <title>Uncontrolled mode | Mantine</title>
  <url>https://mantine.dev/form/uncontrolled/</url>
  <content>[Controlled mode](#controlled-mode)
-----------------------------------

Controlled mode is the default mode of the form. In this mode, the form data is stored in React state and all components are rerendered when form data changes. Controlled mode is not recommended for large forms.

Example of a form with controlled mode:

Form values:

{
  "name": "",
  "email": ""
}

Submitted values:

–

As you can see in the example above, `form.values` update on every change. This means that every component that uses `form.values` will rerender on every change.

Uncontrolled mode is an alternative mode of the form introduced in 7.8.0 release. It is now the recommended mode for all forms. Uncontrolled mode provides significant performance improvements for large forms.

With uncontrolled mode, the form data is stored in a ref instead of React state and `form.values` are not updated on every change.

Example of a form with uncontrolled mode:

Form values:

{
  "name": "",
  "email": ""
}

Submitted values:

–

As you can see in the example above, `form.values` do not update at all.

[form.getValues](#formgetvalues)
--------------------------------

`form.getValues` function returns current form values. It can be used anywhere in the component to get the current form values. It can be used in both controlled and uncontrolled modes.

Although `form.values` can be used to get the current form values in controlled mode, it is recommended to use `form.getValues` instead as it always returns the latest values while `form.values` is outdated in uncontrolled mode and before state update in controlled mode.

`form.getValues()` returns a ref value of the current form values. This means that you cannot pass it to `useEffect` dependencies array as it will always be the same reference.

Instead of observing form values with `useEffect`, use `onValuesChange` callback to listen to form values changes:

[form.getInputProps](#formgetinputprops)
----------------------------------------

[form.getInputProps](https://mantine.dev/form/get-input-props/) returns different props for controlled and uncontrolled modes. In controlled mode, the returned object has `value` prop, while in uncontrolled mode it has `defaultValue` prop.

Uncontrolled mode relies on `key` returned from `form.key()` to update components when `form.setFieldValue` or `form.setValues` are called. You should set `key` supplied by `form.key()` to the input component to ensure that it has updated value:

In case you need to have a [list of fields](https://mantine.dev/form/nested/#nested-arrays), do not pass `key` to the input component directly, instead add a wrapper element and pass `key` to it:

[Uncontrolled mode in custom components](#uncontrolled-mode-in-custom-components)
---------------------------------------------------------------------------------

If you want to build a custom component that supports uncontrolled form mode, you must add support for `defaultValue` prop. The best way to add support for `defaultValue` is to use [use-uncontrolled](https://mantine.dev/hooks/use-uncontrolled/) hook:</content>
</page>

<page>
  <title>Form values | Mantine</title>
  <url>https://mantine.dev/form/values/</url>
  <content>[Initial values](#initial-values)
---------------------------------

In most cases you should set `initialValues`:

[setValues handler](#setvalues-handler)
---------------------------------------

With `form.setValues` you can set all form values, for example you can set values after you have received a response from the backend API:

[setValues partial](#setvalues-partial)
---------------------------------------

`form.setValues` can also be used to set multiple values at once, payload will be shallow merged with current values state:

[Initialize form](#initialize-form)
-----------------------------------

When called `form.initialize` handler sets `initialValues` and `values` to the same value and marks form as initialized. It can be used only once, next `form.initialize` calls are ignored.

`form.initialize` is useful when you want to sync form values with backend API response:

Example with [TanStack Query](https://tanstack.com/query/latest) (react-query):

Note that `form.initialize` will erase all values that were set before it was called. It is usually a good idea to set `readOnly` or `disabled` on all form fields before `form.initialize` is called to prevent data loss. You can implement this with [enhanceGetInputProps](https://mantine.dev/form/get-input-props/#enhancegetinputprops):

[setFieldValue handler](#setfieldvalue-handler)
-----------------------------------------------

`form.setFieldValue` handler allows to set value of the field at given path:

[reset handler](#reset-handler)
-------------------------------

`form.reset` handler sets values to `initialValues` and clear all errors:

[setInitialValues handler](#setinitialvalues-handler)
-----------------------------------------------------

`form.setInitialValues` handler allows to update `initialValues` after form was initialized:

[transformValues](#transformvalues)
-----------------------------------

Use `transformValues` to transform values before they get submitted in `onSubmit` handler. For example, it can be used to merge several fields into one or to convert types:

[Get transformed values](#get-transformed-values)
-------------------------------------------------

You can get transformed values outside of `form.onSubmit` method by calling `form.getTransformedValues`. It accepts `values` that need to be transformed as optional argument, if it is not provided, then the result of `form.getValues()` transformation will be returned instead:

[onValuesChange](#onvalueschange)
---------------------------------

`onValuesChange` function is called every time form values change, use it instead of `useEffect` to subscribe to form values changes:

[form.watch](#formwatch)
------------------------

`form.watch` is an effect function that allows subscribing to changes of a specific form field. It accepts field path and a callback function that is called with new value, previous value, touched and dirty field states:

Note that `form.watch` uses `useEffect` under the hood – all hooks rules apply. For example, you cannot use `form.watch` conditionally or inside loops.

[Get values type](#get-values-type)
-----------------------------------

[Get transformed values type](#get-transformed-values-type)
-----------------------------------------------------------

To get transformed values (output of [transformValues](https://mantine.dev/form/values/#transformvalues)) use `TransformedValues` type. It is useful when you want to create a custom submit function:

[Set values type](#set-values-type)
-----------------------------------

By default, form values types will be inferred from `initialValues`. To avoid that, you can pass type to `useForm` hook, this approach is useful when types cannot be correctly inferred or when you want to provide more specific types:</content>
</page>

<page>
  <title>Form errors | Mantine</title>
  <url>https://mantine.dev/form/errors/</url>
  <content>[Errors object](#errors-object)
-------------------------------

`form.errors` is an object of React nodes that contains validation errors:

[Initial errors](#initial-errors)
---------------------------------

Same as with [initial values](https://mantine.dev/form/values/) you can set initial form errors:

[setErrors handler](#seterrors-handler)
---------------------------------------

[setFieldError handler](#setfielderror-handler)
-----------------------------------------------

`form.setFieldError` handler sets error of the given field:

[clearErrors handler](#clearerrors-handler)
-------------------------------------------

`form.clearErrors` handler clear all form errors:

[clearFieldError handler](#clearfielderror-handler)
---------------------------------------------------

`form.clearFieldError` handler clears error of the given field:

[Errors as react node](#errors-as-react-node)
---------------------------------------------

You can use any React node as an error message:

Note that errors that are `false`, `null` or `undefined` will be automatically removed:

[FormErrors type](#formerrors-type)
-----------------------------------

`form.errors` type is `Record<string, React.ReactNode>`, you can import a shorthand `FormErrors` type from `@mantine/form`:

You can also get type directly from the `form` instance:</content>
</page>

<page>
  <title>getInputProps | Mantine</title>
  <url>https://mantine.dev/form/get-input-props/</url>
  <content>[getInputProps handler](#getinputprops-handler)
-----------------------------------------------

`form.getInputProps` returns an object with `value` (`defaultValue` for "uncontrolled" mode), `onChange`, `onFocus`, `onBlur`, `error` and all props specified in `enhanceGetInputProps` function. Return value should be spread to the input component.

You can pass the following options to `form.getInputProps` as second argument:

*   `type`: default `input`. Must be set to `checkbox` if the input requires `checked` prop instead of `value`.
*   `withError`: default `type === 'input'`. Determines whether the returned object should contain an `error` property with `form.errors[path]` value.
*   `withFocus`: default `true`. Determines whether the returned object should contain an `onFocus` handler. If disabled, the touched state will only change if value of the field has been changed.
*   Any additional props that can be accessed with `enhanceGetInputProps` function. These props are not passed to the input.

[enhanceGetInputProps](#enhancegetinputprops)
---------------------------------------------

`enhanceGetInputProps` is a function that can be used to add additional props to the object returned by `form.getInputProps`. You can define it in `useForm` hook options. Its argument is an object with the following properties:

*   `inputProps` – object returned by `form.getInputProps` by default
*   `field` – field path, first argument of `form.getInputProps`, for example `name`, `user.email`, `users.0.name`
*   `options` – second argument of `form.getInputProps`, for example `{ type: 'checkbox' }`, can be used to pass additional options to `enhanceGetInputProps` function
*   `form` – form instance

Example of using `enhanceGetInputProps` to disable input based on field path:

Example of using `enhanceGetInputProps` to add additional props to the input based on option passed to `form.getInputProps`:

Your name

Your personal information is stored securely. (Just kidding!)

Example of using `enhanceGetInputProps` to add `disabled` prop to all inputs if the form has not been initialized yet:

[Initialize form](#initialize-form)
-----------------------------------

When called `form.initialize` handler sets `initialValues` and `values` to the same value and marks form as initialized. It can be used only once, next `form.initialize` calls are ignored.

`form.initialize` is useful when you want to sync form values with backend API response:

Example with [TanStack Query](https://tanstack.com/query/latest) (react-query):

[Integrate getInputProps with custom inputs](#integrate-getinputprops-with-custom-inputs)
-----------------------------------------------------------------------------------------

`form.getInputProps` returns an object with the following properties:

*   `value`
*   `defaultValue`
*   `onChange`
*   `onFocus`
*   `onBlur`
*   `error`

To create a custom input that works with `form.getInputProps`, make sure that your component accepts these props and passes them to the input component or uses them in any other way.

Example of creating a custom input component:

Then use it with `form.getInputProps`:</content>
</page>

<page>
  <title>Form validation | Mantine</title>
  <url>https://mantine.dev/form/validation/</url>
  <content>[Validation with rules object](#validation-with-rules-object)
-------------------------------------------------------------

To validate form with rules object, provide an object of functions which take field value as an argument and return error message (any React node) or null if field is valid:

[Rule function arguments](#rule-function-arguments)
---------------------------------------------------

Each form rule receives the following arguments:

*   `value` – value of field
*   `values` – all form values
*   `path` – field path, for example `user.email` or `cart.0.price`

`path` argument can be used to get information about field location relative to other fields, for example you can get index of array element:

[formRootRule](#formrootrule)
-----------------------------

`formRootRule` is a special rule path that can be used to validate objects and arrays alongside with their nested fields. For example, it is useful when you want to capture a list of values, validate each value individually and then validate the list itself to not be empty:

Another example is to validate an object fields combination:

[Validation based on other form values](#validation-based-on-other-form-values)
-------------------------------------------------------------------------------

You can get all form values as a second rule function argument to perform field validation based on other form values. For example, you can validate that password confirmation is the same as password:

[Function based validation](#function-based-validation)
-------------------------------------------------------

Another approach to handle validation is to provide a function to `validate`. Function takes form values as single argument and should return object that contains errors of corresponding fields. If field is valid or field validation is not required, you can either return null or simply omit it from the validation results.

[Validate fields on change](#validate-fields-on-change)
-------------------------------------------------------

To validate all fields on change set `validateInputOnChange` option to `true`:

You can also provide an array of fields paths to validate only those values:

[Validate fields on blur](#validate-fields-on-blur)
---------------------------------------------------

To validate all fields on blur set `validateInputOnBlur` option to `true`:

You can also provide an array of fields paths to validate only those values:

[Clear field error on change](#clear-field-error-on-change)
-----------------------------------------------------------

By default, field error is cleared when value changes. To change this, set `clearInputErrorOnChange` to `false`:

[Validation in onSubmit handler](#validation-in-onsubmit-handler)
-----------------------------------------------------------------

`form.onSubmit` accepts two arguments: first argument is `handleSubmit` function that will be called with form values, when validation was completed without errors, second argument is `handleErrors` function, it is called with errors object when validation was completed with errors.

You can use `handleErrors` function to perform certain actions when user tries to submit form without values, for example, you can show a notification:

[isValid handler](#isvalid-handler)
-----------------------------------

`form.isValid` performs form validation with given validation functions, rules object or schema, but unlike `form.validate` it does not set `form.errors` and just returns boolean value that indicates whether form is valid.

[Focus first invalid field](#focus-first-invalid-field)
-------------------------------------------------------

The second argument of the `form.onSubmit` function is a callback function that is called with the [errors object](https://mantine.dev/form/errors/) when form validation fails. You can use this callback to focus the first invalid field or perform any other action.

To get the DOM node of any input, use `form.getInputNode('path-to-field')`. Note that in order for this feature to work, you need to spread `form.getInputProps('path-to-field')` to the input element.</content>
</page>

<page>
  <title>Form validators | Mantine</title>
  <url>https://mantine.dev/form/validators/</url>
  <content>[Usage](#usage)
---------------

`@mantine/form` package exports several functions that can be used in [validation rules object](https://mantine.dev/form/validation/#validation-with-rules-object). Validation functions are tiny in size and provide basic validation, if you have complex validation requirements, use other types of [validation](https://mantine.dev/form/validation/).

[Optional error](#optional-error)
---------------------------------

Last argument of all validator functions below is optional. If error is not set, then fields with failed validation will only have invalid styles without error message:

[isNotEmpty](#isnotempty)
-------------------------

`isNotEmpty` checks that form value is not empty. Empty string, empty array, `false`, `null` and `undefined` values are considered to be empty. Strings are trimmed before validation.

[isEmail](#isemail)
-------------------

`isEmail` uses `/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,})+$/` regexp to determine whether form value is an email:

[matches](#matches)
-------------------

`matches` checks whether form value matches given regexp. If form value is not a string, validation will be failed.

[isInRange](#isinrange)
-----------------------

`isInRange` checks whether form value is within given `min`\-`max` range. If form value is not a number, validation will be failed.

[hasLength](#haslength)
-----------------------

`hasLength` check whether form value length is within given `min`\-`max` range. `hasLength` will work correctly with strings, arrays and any other objects that have `length` property. Strings are trimmed before validation.

[matchesField](#matchesfield)
-----------------------------

`matchesField` checks whether form value is the same as value in other form field. Note that `matchesField` can only work with primitive values (arrays and objects cannot be compared).

[isJSONString](#isjsonstring)
-----------------------------

`isJSONString` checks whether form value is a valid JSON string.

[isNotEmptyHTML](#isnotemptyhtml)
---------------------------------

`isNotEmptyHTML` checks that form value is not an empty HTML string. Empty string, string with only HTML tags and whitespace are considered to be empty.</content>
</page>

<page>
  <title>Form schema validation | Mantine</title>
  <url>https://mantine.dev/form/schema-validation/</url>
  <content>`@mantine/form` supports schema validation with:

*   [zod](https://www.npmjs.com/package/zod)
*   [joi](https://www.npmjs.com/package/joi)
*   [yup](https://www.npmjs.com/package/yup)
*   [superstruct](https://www.npmjs.com/package/superstruct)
*   [valibot](https://www.npmjs.com/package/valibot)

You need to install one of the libraries yourself, `@mantine/form` package does not depend on any of them. If you do not know what schema validation library to choose, use [zod](https://www.npmjs.com/package/zod), it is the most modern and developer-friendly library.

[zod](#zod)
-----------

Installation:

Basic fields validation with zod v3:

Nested fields validation

List fields validation:

[zod v4](#zod-v4)
-----------------

To use zod 4:

*   Update `mantine-form-zod-resolver` to `1.2.0` or later version
*   Update zod to version `3.25.0` or later
*   Replace `zod` imports with `zod/v4` (only if you have `zod@3` in your `package.json`)
*   Replace `zodResolver` with `zod4Resolver` in your code
*   All other code remains the same

Example with zod v4:

[yup](#yup)
-----------

Installation:

Basic fields validation:

Nested fields validation:

List fields validation:

[joi](#joi)
-----------

Installation:

Basic fields validation:

Nested fields validation:

List fields validation:

[superstruct](#superstruct)
---------------------------

Installation:

Basic fields validation:

Nested fields validation:

List fields validation:

[valibot](#valibot)
-------------------

Installation:

Basic fields validation:

Nested fields validation:

List fields validation:

With TypeScript:

You can use the `InferInput` type from the `valibot` library to get the type of the form data.</content>
</page>

<page>
  <title>Nested fields | Mantine</title>
  <url>https://mantine.dev/form/nested/</url>
  <content>[Properties paths](#properties-paths)
-------------------------------------

Most of `form` handlers accept property path as the first argument. Property path includes keys/indices of objects/arrays at which target property is contained:

[Nested objects](#nested-objects)
---------------------------------

I accept terms and conditions

[Set nested object value](#set-nested-object-value)
---------------------------------------------------

[Nested object values validation](#nested-object-values-validation)
-------------------------------------------------------------------

[Nested arrays](#nested-arrays)
-------------------------------

[List handlers](#list-handlers)
-------------------------------

`useForm` hook provides the following handlers to manage list state:

*   `removeListItem` – removes list item at given index
*   `insertListItem` – inserts list item at given index (appends item to the end of the list if index is not specified)
*   `reorderListItem` – reorders list item with given position at specified field
*   `replaceListItem` – replaces list item at given index with new value

[List values validation](#list-values-validation)
-------------------------------------------------</content>
</page>

<page>
  <title>Form status | Mantine</title>
  <url>https://mantine.dev/form/status/</url>
  <content>[Touched and dirty state](#touched-and-dirty-state)
---------------------------------------------------

`form.isTouched` and `form.isDirty` fields provide information about current field status:

*   Field is considered to be `touched` when user focused it or its value was changed programmatically with `form.setFieldValue` handler
*   Field is considered to be `dirty` when its value was changed and new value is different from field value specified in `initialValues` (compared with [fast-deep-equal](https://www.npmjs.com/package/fast-deep-equal))

[isTouched and isDirty functions](#istouched-and-isdirty-functions)
-------------------------------------------------------------------

[touchTrigger option](#touchtrigger-option)
-------------------------------------------

`touchTrigger` option allows customizing events that change touched state. It accepts two options:

*   `change` (default) – field will be considered touched when its value changes or it has been focused
*   `focus` – field will be considered touched only when it has been focused

Example of using `focus` trigger:

[Initial values](#initial-values)
---------------------------------

You can provide initial touched and dirty values with `initialTouched` and `initialDirty` properties. Both properties support [the same fields path format as errors](https://mantine.dev/form/errors/):

[resetTouched and resetDirty](#resettouched-and-resetdirty)
-----------------------------------------------------------

`form.resetTouched` and `form.resetDirty` functions will make all fields clean and untouched. Note that `form.reset` will also reset `touched` and `dirty` state:

To reset values that are used for dirty check call `form.resetDirty` with new values:

[Submitting state](#submitting-state)
-------------------------------------

`form.submitting` field will be set to `true` if function passed to `form.onSubmit` returns a promise. After the promise is resolved or rejected, `form.submitting` will be set to `false`:

You can also manually set `form.submitting` to `true` or `false`:</content>
</page>

<page>
  <title>Form context | Mantine</title>
  <url>https://mantine.dev/form/create-form-context/</url>
  <content>[Usage](#usage)
---------------

`createFormContext` function creates context provider and hook to get form object from context:

    import { TextInput } from '@mantine/core';
    import { createFormContext } from '@mantine/form';
    
    // Definition of form values is required
    interface FormValues {
      age: number;
      name: string;
    }
    
    // createFormContext returns a tuple with 3 items:
    // FormProvider is a component that sets form context
    // useFormContext hook return form object that was previously set in FormProvider
    // useForm hook works the same way as useForm exported from the package but has predefined type
    const [FormProvider, useFormContext, useForm] =
      createFormContext<FormValues>();
    
    function ContextField() {
      const form = useFormContext();
      return (
        <TextInput
          label="Your name"
          key={form.key('name')}
          {...form.getInputProps('name')}
        />
      );
    }
    
    export function Context() {
      // Create form as described in use-form documentation
      const form = useForm({
        mode: 'uncontrolled',
        initialValues: {
          age: 0,
          name: '',
        },
      });
    
      // Wrap your form with FormProvider
      return (
        <FormProvider form={form}>
          <form onSubmit={form.onSubmit(() => {})}>
            <ContextField />
          </form>
        </FormProvider>
      );
    }

[Store context in separate file](#store-context-in-separate-file)
-----------------------------------------------------------------

Usually it is a good idea to store form context in separate file to avoid dependencies cycle:

    // form-context.ts file
    import { createFormContext } from '@mantine/form';
    
    interface UserFormValues {
      age: number;
      name: string;
    }
    
    // You can give context variables any name
    export const [UserFormProvider, useUserFormContext, useUserForm] =
      createFormContext<UserFormValues>();

Then you can import context variables from anywhere:

    // NameInput.tsx
    import { TextInput } from '@mantine/core';
    import { useUserFormContext } from './form-context';
    
    export function NameInput() {
      const form = useUserFormContext();
      return (
        <TextInput
          label="Name"
          key={form.key('name')}
          {...form.getInputProps('name')}
        />
      );
    }

    // UserForm.tsx
    import { NumberInput } from '@mantine/core';
    import { UserFormProvider, useUserForm } from './form-context';
    import { NameInput } from './NameInput';
    
    function UserForm() {
      const form = useUserForm({
        mode: 'uncontrolled',
        initialValues: {
          age: 0,
          name: '',
        },
      });
    
      return (
        <UserFormProvider form={form}>
          <form onSubmit={form.onSubmit(() => {})}>
            <NumberInput
              label="Age"
              key={form.key('age')}
              {...form.getInputProps('age')}
            />
            <NameInput />
          </form>
        </UserFormProvider>
      );
    }</content>
</page>

<page>
  <title>Form actions | Mantine</title>
  <url>https://mantine.dev/form/actions/</url>
  <content>[Usage](#usage)
---------------

Form actions allow changing state of the form from anywhere in your application. The mechanism of form actions is similar to [notifications system](https://mantine.dev/x/notifications/), [modals manager](https://mantine.dev/x/modals/) and other similar packages.

To use form actions, set `name` property in [use-form](https://mantine.dev/form/use-form/) settings:

Then call `createFormActions` function with the same form name as specified in `useForm` settings:

After that, you can use `demoFormActions` to change form state from anywhere in your application. For example, after a fetch request or after a user interaction with a component that does not have access to the form state:

[Form name](#form-name)
-----------------------

Form name must be a string that contains only letters, numbers and dashes:

Note that form names must be unique, if you have multiple forms with the same name, form actions will update the state of all forms with the same name.

`createFormActions` function returns an object with the following methods:

*   `setFieldValue`
*   `setValues`
*   `setInitialValues`
*   `setErrors`
*   `setFieldError`
*   `clearFieldError`
*   `clearErrors`
*   `reset`
*   `validate`
*   `validateField`
*   `reorderListItem`
*   `removeListItem`
*   `insertListItem`
*   `setDirty`
*   `setTouched`
*   `resetDirty`
*   `resetTouched`

All methods work similar to [use-form](https://mantine.dev/form/use-form/) hooks methods – functions accept the same arguments but do not return anything.</content>
</page>

<page>
  <title>Recipes | Mantine</title>
  <url>https://mantine.dev/form/recipes/</url>
  <content>    import { Group, TextInput, Button, Center } from '@mantine/core';
    import { useForm } from '@mantine/form';
    import { randomId } from '@mantine/hooks';
    import { DragDropContext, Droppable, Draggable } from '@hello-pangea/dnd';
    import { IconGripVertical } from '@tabler/icons-react';
    
    function Demo() {
      const form = useForm({
        mode: 'uncontrolled',
        initialValues: {
          employees: [
            { name: 'John Doe', email: 'john@mantine.dev', key: randomId() },
            { name: 'Bill Love', email: 'bill@mantine.dev', key: randomId() },
            { name: 'Nancy Eagle', email: 'nanacy@mantine.dev', key: randomId() },
            { name: 'Lim Notch', email: 'lim@mantine.dev', key: randomId() },
            { name: 'Susan Seven', email: 'susan@mantine.dev', key: randomId() },
          ],
        },
      });
    
      const fields = form.getValues().employees.map((item, index) => (
        <Draggable key={item.key} index={index} draggableId={item.key}>
          {(provided) => (
            <Group ref={provided.innerRef} mt="xs" {...provided.draggableProps}>
              <Center {...provided.dragHandleProps}>
                <IconGripVertical size={18} />
              </Center>
              <TextInput
                placeholder="John Doe"
                key={form.key(`employees.${index}.name`)}
                {...form.getInputProps(`employees.${index}.name`)}
              />
              <TextInput
                placeholder="example@mail.com"
                key={form.key(`employees.${index}.email`)}
                {...form.getInputProps(`employees.${index}.email`)}
              />
            </Group>
          )}
        </Draggable>
      ));
    
      return (
        <div>
          <DragDropContext
            onDragEnd={({ destination, source }) =>
              destination?.index !== undefined && form.reorderListItem('employees', { from: source.index, to: destination.index })
            }
          >
            <Droppable droppableId="dnd-list" direction="vertical">
              {(provided) => (
                <div {...provided.droppableProps} ref={provided.innerRef}>
                  {fields}
                  {provided.placeholder}
                </div>
              )}
            </Droppable>
          </DragDropContext>
    
          <Group justify="center" mt="md">
            <Button onClick={() => form.insertListItem('employees', { name: '', email: '', key: randomId() })}>
              Add employee
            </Button>
          </Group>
        </div>
      );
    }</content>
</page>

<page>
  <title>Popover | Mantine</title>
  <url>https://mantine.dev/core/popover/</url>
  <content>[Usage](#usage)
---------------

[Controlled](#controlled)
-------------------------

You can control Popover state with `opened` and `onChange` props:

Controlled example with mouse events:

[Focus trap](#focus-trap)
-------------------------

If you need to use interactive elements (inputs, buttons, etc.) inside `Popover.Dropdown`, set `trapFocus` prop:

[Inline elements](#inline-elements)
-----------------------------------

Enable `inline` middleware to use `Popover` with inline elements:

Stantler’s magnificent antlers were traded at high prices as works of art. As a result, this Pokémon was hunted close to extinction by those who were after the priceless antlers. When visiting a junkyard, you may catch sight of it having an intense fight with Murkrow over shiny objects.Ho-Oh’s feathers glow in seven colors depending on the angle at which they are struck by light. These feathers are said to bring happiness to the bearers. This Pokémon is said to live at the foot of a rainbow.

[Same width](#same-width)
-------------------------

Set `width="target"` prop to make Popover dropdown take the same width as target element:

[offset](#offset)
-----------------

Set `offset` prop to a number to change dropdown position relative to the target element. This way you can control dropdown offset on main axis only.

To control offset on both axis, pass object with `mainAxis` and `crossAxis` properties:

[Middlewares](#middlewares)
---------------------------

You can enable or disable [Floating UI](https://floating-ui.com/) middlewares with `middlewares` prop:

*   [shift](https://floating-ui.com/docs/shift) middleware shifts the dropdown to keep it in view. It is enabled by default
*   [flip](https://floating-ui.com/docs/flip) middleware changes the placement of the dropdown to keep it in view. It is enabled by default.
*   [inline](https://floating-ui.com/docs/inline) middleware improves positioning for inline reference elements that span over multiple lines. It is disabled by default.
*   [size](https://floating-ui.com/docs/size) middleware manipulates dropdown size. It is disabled by default.

Example of turning off `shift` and `flip` middlewares:

[Customize middleware options](#customize-middleware-options)
-------------------------------------------------------------

To customize [Floating UI](https://floating-ui.com/) middlewares options, pass them as an object to the `middlewares` prop. For example, to change [shift](https://floating-ui.com/docs/shift) middleware padding to `20px` use the following configuration:

[Dropdown arrow](#dropdown-arrow)
---------------------------------

Set `withArrow` prop to add an arrow to the dropdown. Arrow is a `div` element rotated with `transform: rotate(45deg)`.

`arrowPosition` prop determines how arrow is position relative to the target element when `position` is set to `*-start` and `*-end` values on `Popover` component. By default, the value is `center` – the arrow is positioned in the center of the target element if it is possible.

If you change `arrowPosition` to `side`, then the arrow will be positioned on the side of the target element, and you will be able to control arrow offset with `arrowOffset` prop. Note that when `arrowPosition` is set to `center`, `arrowOffset` prop is ignored.

[With overlay](#with-overlay)
-----------------------------

Set `withOverlay` prop to add overlay behind the dropdown. You can pass additional configuration to [Overlay](https://mantine.dev/core/overlay/) component with `overlayProps` prop:

[Hide detached](#hide-detached)
-------------------------------

Use `hideDetached` prop to configure how the dropdown behaves when the target element is hidden with styles (`display: none`, `visibility: hidden`, etc.), removed from the DOM, or when the target element is scrolled out of the viewport.

By default, `hideDetached` is enabled – the dropdown is hidden with the target element. You can change this behavior with `hideDetached={false}`. To see the difference, try to scroll the root element of the following demo:

[Disabled](#disabled)
---------------------

Set `disabled` prop to prevent `Popover.Dropdown` from rendering:

[Click outside](#click-outside)
-------------------------------

By default, `Popover` closes when you click outside of the dropdown. To disable this behavior, set `closeOnClickOutside={false}`.

You can configure events that are used for click outside detection with `clickOutsideEvents` prop. By default, `Popover` listens to `mousedown` and `touchstart` events. You can change it to any other events, for example, `mouseup` and `touchend`:

[onDismiss](#ondismiss)
-----------------------

If you need to control opened state, but still want to close popover on outside clicks and escape key presses, use `onDismiss` prop:

[Initial focus](#initial-focus)
-------------------------------

Popover uses [FocusTrap](https://mantine.dev/core/focus-trap/) component to manage focus. Add `data-autofocus` attribute to element that should receive initial focus:

[Popover.Target children](#target-children)
-------------------------------------------

`Popover.Target` requires an element or a component as a single child – strings, fragments, numbers and multiple elements/components are not supported and **will throw error**. Custom components must provide a prop to get root element ref, all Mantine components support ref out of the box.

[Required ref prop](#required-ref-prop)
---------------------------------------

Custom components that are rendered inside Popover.Target are required to support `ref` prop:

Use `forwardRef` function to forward ref to root element:

[Nested popovers](#nested-popovers)
-----------------------------------

Nested popovers require children rendering without [Portal](https://mantine.dev/core/portal/). Usually, you should disable portal with props of the component that renders popover content, for example, [Select](https://mantine.dev/core/select/) has `comboboxProps={{ withinPortal: false }}` prop. Check documentation of the component that you are using to render popover content to find out how to disable the portal. If the portal is not disabled, outside click will close all popovers.

Example of disabling portal in [Select](https://mantine.dev/core/select/) and [DatePickerInput](https://mantine.dev/dates/date-picker-input/) components:

[Accessibility](#accessibility)
-------------------------------

Popover follows [WAI-ARIA recommendations](https://www.w3.org/TR/wai-aria-practices-1.2/#dialog_modal):

*   Dropdown element has `role="dialog"` and `aria-labelledby="target-id"` attributes
*   Target element has `aria-haspopup="dialog"`, `aria-expanded`, `aria-controls="dropdown-id"` attributes

Uncontrolled Popover will be accessible only when used with `button` element or component that renders it ([Button](https://mantine.dev/core/button/), [ActionIcon](https://mantine.dev/core/action-icon/), etc.). Other elements will not support `Space` and `Enter` key presses.

[Keyboard interactions](#keyboard-interactions)
-----------------------------------------------</content>
</page>

<page>
  <title>Version v8.1.0 | Mantine</title>
  <url>https://mantine.dev/changelog/8-1-0</url>
  <content>[Support Mantine development](#support-mantine-development)
-----------------------------------------------------------

You can now sponsor Mantine development with [OpenCollective](https://opencollective.com/mantinedev). All funds are used to improve Mantine and create new features and components.

[Sponsor Mantine](https://opencollective.com/mantinedev)

[DatePicker presets](#datepicker-presets)
-----------------------------------------

[DatePicker](https://mantine.dev/dates/date-picker/), [DatePickerInput](https://mantine.dev/dates/date-picker-input/) and [DateTimePicker](https://mantine.dev/dates/date-time-picker/) now support `presets` prop that allows you to add custom date presets. Presets are displayed next to the calendar:

[Calendar headerControlsOrder](#calendar-headercontrolsorder)
-------------------------------------------------------------

[Calendar](https://mantine.dev/dates/calendar/) and other components based on it now support `headerControlsOrder` prop. You can use `headerControlsOrder` prop to change the order of header controls. The prop accepts an array of `'next' | 'previous' | 'level`. Note that each control can be used only once in the array.

[Popover middlewares improvements](#popover-middlewares-improvements)
---------------------------------------------------------------------

[Popover](https://mantine.dev/core/popover/) component now handles `shift` and `flip` Floating UI differently. Starting from 8.1.0 version, the popover dropdown position is not changed when the popover is opened. `shift` and `flip` middlewares are used only once to calculate the initial position of the dropdown.

This change fixes incorrect flipping/shifting behavior when there is dynamic content in the dropdown. For example, searchable [Select](https://mantine.dev/core/select/) and [DatePickerInput](https://mantine.dev/dates/date-picker-input/) without `consistentWeeks` option.

Previous behavior:

New behavior:

[use-long-press hook](#use-long-press-hook)
-------------------------------------------

New [use-long-press](https://mantine.dev/hooks/use-long-press/) hook:

[Reference area support in charts](#reference-area-support-in-charts)
---------------------------------------------------------------------

[BarChart](https://mantine.dev/charts/bar-chart/), [AreaChart](https://mantine.dev/charts/area-chart/) and [LineChart](https://mantine.dev/charts/line-chart/) components now support reference area. Reference area is a rectangular area that can be used to highlight a specific region of the chart:

[use-form resetField handler](#use-form-resetfield-handler)
-----------------------------------------------------------

[use-form](https://mantine.dev/form/use-form/) now has a `resetField` method that resets field value to its initial value:

[TagsInput isDuplicate prop](#tagsinput-isduplicate-prop)
---------------------------------------------------------

You can now use `isDuplicate` prop in [TagsInput](https://mantine.dev/core/tags-input/) component to control how duplicates are detected. It is a function that receives two arguments: tag value and current tags. The function must return `true` if the value is duplicate.

Example of using `isDuplicate` to allow using the same value with different casing:

[Slider domain prop](#slider-domain-prop)
-----------------------------------------

[Slider](https://mantine.dev/core/slider/) component now supports `domain` prop that allows setting the possible range of values independently of the `min` and `max` values:

[RangeSlider pushOnOverlap prop](#rangeslider-pushonoverlap-prop)
-----------------------------------------------------------------

[RangeSlider](https://mantine.dev/core/slider/) component now supports `pushOnOverlap` prop that defines whether the slider should push the overlapping thumb when the user drags it.

[Hooks types exports](#hooks-types-exports)
-------------------------------------------

`@mantine/hooks` package now exports all types used in hooks options and return values. For example, you can now import [use-uncontrolled](https://mantine.dev/hooks/use-uncontrolled/) types like this:

Types exported from the library:

[zod v4 with use-form](#zod-v4-with-use-form)
---------------------------------------------

You can now use zod v4 with [use-form](https://mantine.dev/form/use-form/). To use zod 4:

*   Update `mantine-form-zod-resolver` to `1.2.1` or later version
*   Update zod to version `3.25.0` or later
*   Replace `zod` imports with `zod/v4` (only if you have `zod@3` in your `package.json`)
*   Replace `zodResolver` with `zod4Resolver` in your code
*   All other code remains the same

Example with zod v4:

[Documentation updates](#documentation-updates)
-----------------------------------------------

*   [use-debounced-callback](https://mantine.dev/hooks/use-debounced-callback/) documentation was updated to include new `flush` and `flushOnUnmount` features
*   Documentation about exported types was added to all applicable hooks

[Other changes](#other-changes)
-------------------------------

*   All components now support `bdrs` style prop to set border radius.
*   [DateTimePicker](https://mantine.dev/dates/date-time-picker/) now supports `defaultTimeValue` prop
*   [Tooltip](https://mantine.dev/core/tooltip/) now supports `autoContrast` prop.
*   Handlers returned from [use-counter](https://mantine.dev/hooks/use-counter/) are now memoized.
*   Return value of [use-event-listener](https://mantine.dev/hooks/use-event-listener/), [use-focus-within](https://mantine.dev/hooks/use-focus-within/), [use-focus-trap](https://mantine.dev/hooks/use-focus-trap/), [use-hover](https://mantine.dev/hooks/use-hover/), [use-move](https://mantine.dev/hooks/use-move/), [use-radial-move](https://mantine.dev/hooks/use-radial-move/) changed (`React.RefObject` -> `React.RefCallback`), required to fix incorrect ref handling in several cases. For more information, see the issue on GitHub – [#7406](https://github.com/mantinedev/mantine/issues/7406).
*   Deprecated `React.MutableRefObject` type was replaced with `React.RefObject` in all packages to better support React 19 types.
*   `positionDependencies` prop is now deprecated in [Tooltip](https://mantine.dev/core/tooltip/), [Popover](https://mantine.dev/core/popover/) and other components based on Popover. The prop is no longer required and can be safely removed. `positionDependencies` prop will be removed in 9.0 release.</content>
</page>

<page>
  <title>Version v7.17.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-17-0</url>
  <content>[Portal reuseTargetNode prop](#portal-reusetargetnode-prop)
-----------------------------------------------------------

[Portal](https://mantine.dev/core/portal/) component now supports `reuseTargetNode` prop which allows to reuse the same target node for all instances. This option is more performant than the previous behavior, it is recommended to be enabled. This option will be enabled by default in the `8.0` major release.

To enable reuseTargetNode option in all components that depend on Portal, add the following code to your [theme](https://mantine.dev/theming/theme-object/):

Example usage. In the following example, all three paragraphs will be rendered in the same target node:

[use-form formRootRule](#use-form-formrootrule)
-----------------------------------------------

`formRootRule` is a special rule path that can be used to [validate](https://mantine.dev/form/validation/) objects and arrays alongside with their nested fields. For example, it is useful when you want to capture a list of values, validate each value individually and then validate the list itself to not be empty:

Another example is to validate an object fields combination:

[isJSONString and isNotEmptyHTML form validators](#isjsonstring-and-isnotemptyhtml-form-validators)
---------------------------------------------------------------------------------------------------

New `isJSONString` and `isNotEmptyHTML` [form validators](https://mantine.dev/form/validators/):

*   `isNotEmptyHTML` checks that form value is not an empty HTML string. Empty string, string with only HTML tags and whitespace are considered to be empty.
*   `isJSONString` checks that form value is a valid JSON string.

[Popover onDismiss](#popover-ondismiss)
---------------------------------------

[Popover](https://mantine.dev/core/popover/) now supports `onDismiss` prop, which makes it easier to subscribe to outside clicks and escape key presses to close popover:

[MantineProvider env](#mantineprovider-env)
-------------------------------------------

[MantineProvider](https://mantine.dev/theming/mantine-provider/) component now supports `env` prop. It can be used in test environment to disable some features that might impact tests and/or make it harder to test components:

*   transitions that mount/unmount child component with delay
*   portals that render child component in a different part of the DOM

To enable test environment, set `env` to `test`:

[use-file-dialog hook](#use-file-dialog-hook)
---------------------------------------------

New [use-file-dialog](https://mantine.dev/hooks/use-file-dialog/) allows capturing one or more files from the user without file input element:

[Remix deprecation](#remix-deprecation)
---------------------------------------

[Remix](https://remix.run/) is deprecated, the documentation related to Remix integration was removed, use [React Router](https://mantine.dev/guides/react-router/) instead. To simplify maintenance, Remix/React Router templates were archived and will not be updated.

[Help center updates](#help-center-updates)
-------------------------------------------

*   [I get hydration warning about data-mantine-color-scheme attribute, what does it mean?](https://help.mantine.dev/q/color-scheme-hydration-warning) question
*   [How can I apply styles to all Mantine components?](https://help.mantine.dev/q/apply-styles-to-all) question

[Other changes](#other-changes)
-------------------------------

*   [Tooltip](https://mantine.dev/core/tooltip/) now supports customizing `middlewares`
*   [ScrollArea](https://mantine.dev/core/scroll-area/) now supports `overscrollBehavior` prop
*   [Affix](https://mantine.dev/core/affix/) now supports `theme.spacing` values for `position` prop
*   [Anchor](https://mantine.dev/core/anchor/) now supports `underline="not-hover"` option to display underline only when the link is not hovered</content>
</page>

<page>
  <title>Version v8.0.0 | Mantine</title>
  <url>https://mantine.dev/changelog/8-0-0</url>
  <content>[Support Mantine development](#support-mantine-development)
-----------------------------------------------------------

You can now sponsor Mantine development with [OpenCollective](https://opencollective.com/mantinedev). All funds are used to improve Mantine and create new features and components.

[Sponsor Mantine](https://opencollective.com/mantinedev)

[Migration guide](#migration-guide)
-----------------------------------

This changelog covers breaking changes and new features in Mantine 8.0. To migrate your application to Mantine 8.0, follow [7.x → 8.x migration guide](https://mantine.dev/guides/7x-to-8x/).

[Granular global styles exports](#granular-global-styles-exports)
-----------------------------------------------------------------

Global styles are now split between 3 files:

*   `baseline.css` – a minimal CSS reset, sets `box-sizing: border-box` and changes font properties
*   `default-css-variables.css` – contains all CSS variables generated from the default theme
*   `global.css` – global classes used in Mantine components

If you previously imported individual styles from `@mantine/core` package, you need to update imports to use new files:

If you imported `@mantine/core/styles.css`, no changes are required – all new files are already included in `styles.css`.

[Menu with submenus](#menu-with-submenus)
-----------------------------------------

[Menu](https://mantine.dev/core/menu/) component now supports submenus:

[Popover hideDetached](#popover-hidedetached)
---------------------------------------------

[Popover](https://mantine.dev/core/popover/) component now supports `hideDetached` prop to configure how the dropdown behaves when the target element is hidden with styles (`display: none`, `visibility: hidden`, etc.), removed from the DOM, or when the target element is scrolled out of the viewport.

By default, `hideDetached` is enabled – the dropdown is hidden with the target element. You can change this behavior with `hideDetached={false}`. To see the difference, try to scroll the root element of the following demo:

[Date values as strings](#date-values-as-strings)
-------------------------------------------------

All `@mantine/dates` components now use date strings in `YYYY-MM-DD` or `YYYY-MM-DD HH:mm:ss` format instead of `Date` objects. This change was made to resolve issues related to timezones – now the output of all `@mantine/dates` components does not include any timezone-specific information. Follow [7.x → 8.x migration guide](https://mantine.dev/guides/7x-to-8x/) to learn how to update the code to use new string values.

Example of using [DatePicker](https://mantine.dev/dates/date-picker/) component with string values:

[DatesProvider timezone](#datesprovider-timezone)
-------------------------------------------------

`DatesProvider` component no longer supports `timezone` option – all `@mantine/dates` components now use strings in `YYYY-MM-DD HH:mm:ss` format as values and do not contain timezone information.

If you need to handle timezones in your application, you can use a dedicated dates library ([dayjs](https://day.js.org/), [luxon](https://moment.github.io/luxon/#/), [date-fns](https://date-fns.org/)) to update timezone values.

Example of using Mantine components with [dayjs](https://day.js.org/):

[TimePicker component](#timepicker-component)
---------------------------------------------

New [TimePicker](https://mantine.dev/dates/time-picker/) component is an alternative to [TimeInput](https://mantine.dev/dates/time-input/) that offers more features. It supports 24-hour and 12-hour formats, dropdown with hours, minutes and seconds, and more.

[DateTimePicker component changes](#datetimepicker-component-changes)
---------------------------------------------------------------------

[DateTimePicker](https://mantine.dev/dates/date-time-picker/) component now uses [TimePicker](https://mantine.dev/dates/time-picker/) under the hood instead of [TimeInput](https://mantine.dev/dates/time-input/). You can now use all [TimePicker](https://mantine.dev/dates/time-picker/) features with [DateTimePicker](https://mantine.dev/dates/date-time-picker/) component.

Prop `timeInputProps` is no longer available, to pass props down to the underlying [TimePicker](https://mantine.dev/dates/time-picker/) you need to use `timePickerProps` prop.

Example of enabling dropdown and setting `12h` format for time picker:

[TimeValue component](#timevalue-component)
-------------------------------------------

New [TimeValue](https://mantine.dev/dates/time-value/) component can be used to display a formatted time string with similar formatting options to [TimePicker](https://mantine.dev/dates/time-picker/) component.

24h format: 18:45

12h format: 6:45 PM

[TimeGrid component](#timegrid-component)
-----------------------------------------

New [TimeGrid](https://mantine.dev/dates/time-grid/) component allows to capture time value from the user with a predefined set of time slots:

[Heatmap component](#heatmap-component)
---------------------------------------

New [Heatmap](https://mantine.dev/charts/heatmap/) component allows to display data in a calendar heatmap format:

MonWedFriSunFebMarAprMayJunJulAugSepOctNovDecJan

[CodeHighlight changes](#codehighlight-changes)
-----------------------------------------------

[@mantine/code-highlight](https://mantine.dev/x/code-highlight/) package no longer depends on [highlight.js](https://highlightjs.org/). Instead, it now provides a new API based on adapters that allows using any syntax highlighter of your choice. Out of the, box `@mantine/code-highlight` provides adapters for [shiki](https://shiki.matsu.io/) and [highlight.js](https://highlightjs.org/).

To learn about the migration process and how to use the new adapters API, check the updated [CodeHighlight documentation](https://mantine.dev/x/code-highlight/) and [7.x → 8.x migration guide](https://mantine.dev/guides/7x-to-8x/).

[CodeHighlight with shiki](#codehighlight-with-shiki)
-----------------------------------------------------

You can now use [CodeHighlight](https://mantine.dev/x/code-highlight/) component with [shiki](https://shiki.matsu.io/).

[Shiki](https://shiki.matsu.io/) library provides the most advanced syntax highlighting for TypeScript and CSS/Sass code. It uses textmate grammars to highlight code (same as in VSCode). Shiki adapter is recommended if you need to highlight advanced TypeScript (generics, jsx nested in props) or CSS code (custom syntaxes, newest features). Shiki adapter is used for all code highlighting in Mantine documentation.

To use shiki adapter, you need to install `shiki` package:

Then wrap your app with `CodeHighlightAdapterProvider` and provide `createShikiAdapter` as `adapter` prop:

After that, you can use `CodeHighlight` component in your application:

[Carousel changes](#carousel-changes)
-------------------------------------

[@mantine/carousel](https://mantine.dev/x/carousel/) package was updated to use the latest version of `embla-carousel-react` package. This update includes breaking changes:

*   `speed` and `draggable` props were removed – they are no longer supported by `embla-carousel-react`
*   It is now required to install both `embla-carousel` and `embla-carousel-react` packages explicitly
*   `useAnimationOffsetEffect` hook was removed – the issue it addressed was fixed in `embla-carousel-react`
*   `Embla` type export was removed, you should use `EmblaCarouselType` from `embla-carousel` instead
*   Props that were previously passed to embla are now grouped under `emblaOptions` prop

Follow the [7.x → 8.x migration guide](https://mantine.dev/guides/7x-to-8x/) to update your application to use the latest version of `@mantine/carousel`.

[Switch withThumbIndicator](#switch-withthumbindicator)
-------------------------------------------------------

[Switch](https://mantine.dev/core/switch/) component styles were updated to include indicator inside the thumb. You can change it by setting `withThumbIndicator` prop:

I agree to sell my privacy

With thumb indicator

Disabled

[Theme types augmentation](#theme-types-augmentation)
-----------------------------------------------------

You can now augment `spacing`, `radius`, `breakpoints`, `fontSizes`, `lineHeights`, and `shadows` types. To learn more about this feature, follow [this guide](https://mantine.dev/guides/typescript/#theme-object-declarations).

Example of types augmentation for `spacing` and `radius`:

[Other changes](#other-changes)
-------------------------------

*   [Kbd](https://mantine.dev/core/kbd/) component now supports `size` prop
*   [DateInput](https://mantine.dev/dates/date-input/) component no longer supports `preserveTime` prop, use different component to capture time values
*   [ScrollArea](https://mantine.dev/core/scroll-area/) component no longer has forced `display: table` styles on the wrapper element of the content. It also now supports `content` Styles API selector to apply styles to the content element.
*   [Image](https://mantine.dev/core/image/) component no longer includes `flex: 0` styles by default
*   [SegmentedControl](https://mantine.dev/core/segmented-control/) default height values were changed to match sizes of [Input](https://mantine.dev/core/input/) components
*   Type of `wrapperProps` prop in all components that support it (`Checkbox`, `Radio`, `Chip`, most inputs) was changed to more strict type
*   [Portal](https://mantine.dev/core/portal/) component now has `reuseTargetNode` prop enabled by default
*   [use-form](https://mantine.dev/form/use-form/) `setFieldValue` handler types are now stricter
*   [Menu.Item](https://mantine.dev/core/menu/) no longer has `data-hovered` attribute, use `:hover` and `:focus` selectors instead to apply styles
*   [use-os](https://mantine.dev/hooks/use-os/) now supports Chrome OS detection, its return type now includes `chromeos` value in the union
*   The default eye dropper icon of [ColorInput](https://mantine.dev/core/color-input/) component was updated
*   The default spacing of [Notification](https://mantine.dev/core/notification/) component was increased
*   [Code](https://mantine.dev/core/code/) component color styles were updated</content>
</page>

<page>
  <title>Version v7.16.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-16-0</url>
  <content>[use-scroll-spy hook](#use-scroll-spy-hook)
-------------------------------------------

New [use-scroll-spy](https://mantine.dev/hooks/use-scroll-spy/) hook tracks scroll position and returns index of the element that is currently in the viewport. It is useful for creating table of contents components (like in mantine.dev sidebar on the right side) and similar features.

[TableOfContents component](#tableofcontents-component)
-------------------------------------------------------

New [TableOfContents](https://mantine.dev/core/table-of-contents/) component is built on top of `use-scroll-spy` hook and can be used to create table of contents components like the one on the right side of mantine.dev documentation sidebar:

[Input.ClearButton component](#inputclearbutton-component)
----------------------------------------------------------

New `Input.ClearButton` component can be used to add clear button to custom inputs based on `Input` component. `size` of the clear button is automatically inherited from the input:

[Popover with overlay](#popover-with-overlay)
---------------------------------------------

[Popover](https://mantine.dev/core/popover/) and other components based on it now support `withOverlay` prop:

[Container queries in Carousel](#container-queries-in-carousel)
---------------------------------------------------------------

You can now use [container queries](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment/Container_queries) in [Carousel](https://mantine.dev/x/carousel/) component. With container queries, all responsive values are adjusted based on the container width, not the viewport width.

Example of using container queries. To see how the grid changes, resize the root element of the demo with the resize handle located at the bottom right corner of the demo:

[RangeSlider restrictToMarks](#rangeslider-restricttomarks)
-----------------------------------------------------------

[RangeSlider](https://mantine.dev/core/slider/) component now supports `restrictToMarks` prop:

[Pagination withPages prop](#pagination-withpages-prop)
-------------------------------------------------------

[Pagination](https://mantine.dev/core/pagination/) component now supports `withPages` prop which allows hiding pages controls and displaying only previous and next buttons:

[useForm touchTrigger option](#useform-touchtrigger-option)
-----------------------------------------------------------

[use-form](https://mantine.dev/form/use-form/) hook now supports `touchTrigger` option that allows customizing events that change touched state. It accepts two options:

*   `change` (default) – field will be considered touched when its value changes or it has been focused
*   `focus` – field will be considered touched only when it has been focused

Example of using `focus` trigger:

[Help Center updates](#help-center-updates)
-------------------------------------------

*   [Native browser validation does not work in some components, what should I do?](https://help.mantine.dev/q/native-required) question
*   [My styles are broken with disabled JavaScript. What should I do?](https://help.mantine.dev/q/disabled-js) question
*   [How can I add fuzzy search to Select component?](https://help.mantine.dev/q/select-fuzzy) question
*   [use-local-storage hook returns real value only after mounting, is it a bug?](https://help.mantine.dev/q/local-storage-effect) question
*   [How can I upload files from Dropzone component?](https://help.mantine.dev/q/dropzone-upload) question

[Other changes](#other-changes)
-------------------------------

*   [Autocomplete](https://mantine.dev/core/autocomplete/) now supports `clearable` prop
*   [where-\* mixins](https://mantine.dev/styles/postcss-preset/#where--mixins) documentation has been added
*   [use-local-storage](https://mantine.dev/hooks/use-local-storage/) hook now supports `sync` option which allows disabling synchronization between browser tabs</content>
</page>

<page>
  <title>Version v7.15.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-15-0</url>
  <content>[Support Mantine development](#support-mantine-development)
-----------------------------------------------------------

You can now sponsor Mantine development with [OpenCollective](https://opencollective.com/mantinedev). All funds will be used to improve Mantine and create new features and components.

[Sponsor Mantine](https://opencollective.com/mantinedev)

[use-radial-move hook](#use-radial-move-hook)
---------------------------------------------

New [use-radial-move](https://mantine.dev/hooks/use-radial-move/) hook can be used to create custom radial sliders:

[BarChart color based on value](#barchart-color-based-on-value)
---------------------------------------------------------------

[BarChart](https://mantine.dev/charts/bar-chart/) component now supports `getBarColor` prop to assign color based on value. `getBarColor` function is called with two arguments: value and series object. It should return a color string (theme color reference or any valid CSS color value).

[Button.GroupSection and ActionIcon.GroupSection](#buttongroupsection-and-actionicongroupsection)
-------------------------------------------------------------------------------------------------

`ActionIcon.GroupSection` and `Button.GroupSection` are new components that can be used in `ActionIcon.Group`/`Button.Group` to create sections that are not `ActionIcon`/`Button` components:

[Table vertical variant](#table-vertical-variant)
-------------------------------------------------

[Table](https://mantine.dev/core/table/) component now support `variant="vertical"`:

<table data-variant="vertical" data-with-table-border="true"><tbody><tr data-with-row-border="true"><th>Epic name</th><td>7.x migration</td></tr><tr data-with-row-border="true"><th>Status</th><td>Open</td></tr><tr data-with-row-border="true"><th>Total issues</th><td>135</td></tr><tr data-with-row-border="true"><th>Total story points</th><td>874</td></tr><tr data-with-row-border="true"><th>Last updated at</th><td>September 26, 2024 17:41:26</td></tr></tbody></table>

[Table tabular numbers](#table-tabular-numbers)
-----------------------------------------------

[Table](https://mantine.dev/core/table/) component now supports `tabularNums` prop to render numbers in tabular style. It sets `font-variant-numeric: tabular-nums` which makes numbers to have equal width. This is useful when you have columns with numbers and you want them to be aligned:

| Product | Units sold |
| --- | --- |
| Apples | 2,214,411,234 |
| Oranges | 9,983,812,411 |
| Bananas | 1,234,567,890 |
| Pineapples | 9,948,810,000 |
| Pears | 9,933,771,111 |

[Update function in modals manager](#update-function-in-modals-manager)
-----------------------------------------------------------------------

[Modals manager](https://mantine.dev/x/modals/) now supports `modals.updateModal` and `modals.updateContextModal` function to update modal after it was opened:

[useForm submitting state](#useform-submitting-state)
-----------------------------------------------------

[use-form](https://mantine.dev/form/use-form/) hook now supports `form.submitting` field and `form.setSubmitting` function to track form submission state.

`form.submitting` field will be set to `true` if function passed to `form.onSubmit` returns a promise. After the promise is resolved or rejected, `form.submitting` will be set to `false`:

You can also manually set `form.submitting` to `true` or `false`:

[useForm onSubmitPreventDefault option](#useform-onsubmitpreventdefault-option)
-------------------------------------------------------------------------------

[use-form](https://mantine.dev/form/use-form/) hook now supports `onSubmitPreventDefault` option. This option is useful if you want to integrate `useForm` hook with [server actions](https://github.com/mantinedev/mantine/issues/7142). By default, `event.preventDefault()` is called on the form `onSubmit` handler. If you want to change this behavior, you can pass `onSubmitPreventDefault` option to `useForm` hook. It can have the following values:

*   `always` (default) - always call `event.preventDefault()`
*   `never` - never call `event.preventDefault()`
*   `validation-failed` - call `event.preventDefault()` only if validation failed

[Subtle RichTextEditor variant](#subtle-richtexteditor-variant)
---------------------------------------------------------------

[RichTextEditor](https://mantine.dev/x/tiptap/) component now supports `subtle` variant:

[onExitTransitionEnd and onEnterTransitionEnd](#onexittransitionend-and-onentertransitionend)
---------------------------------------------------------------------------------------------

[Modal](https://mantine.dev/core/modal/) and [Drawer](https://mantine.dev/core/drawer/) components now support `onExitTransitionEnd` and `onEnterTransitionEnd` props, which can be used to run code after exit/enter transition is finished. For example, this is useful when you want to clear data after modal is closed:

[Week numbers in DatePicker](#week-numbers-in-datepicker)
---------------------------------------------------------

[DatePicker](https://mantine.dev/dates/date-picker/) and other components based on Calendar component now support `withWeekNumbers` prop to display week numbers:

| # | Mo | Tu | We | Th | Fr | Sa | Su |
| --- | --- | --- | --- | --- | --- | --- | --- |
| 22 |  |  |  |  |  |  |  |
| 23 |  |  |  |  |  |  |  |
| 24 |  |  |  |  |  |  |  |
| 25 |  |  |  |  |  |  |  |
| 26 |  |  |  |  |  |  |  |
| 27 |  |  |  |  |  |  |  |

[New demo: BarChart with overlay](#new-demo-barchart-with-overlay)
------------------------------------------------------------------

[Variants types augmentation](#variants-types-augmentation)
-----------------------------------------------------------

[Custom variants](https://mantine.dev/styles/variants-sizes/#custom-variants-types) types augmentation guide was added to the documentation.

Example of adding custom variant type to [Button](https://mantine.dev/core/button/) component:

[Help Center updates](#help-center-updates)
-------------------------------------------

*   [How to use Mantine template on GitHub?](https://help.mantine.dev/q/templates-usage) and [How can I submit a template to Mantine documentation?](https://help.mantine.dev/q/submit-template) pages were moved from the documentation to Help Center
*   [How that thing is done on mantine.dev website?](https://help.mantine.dev/q/how-that-thing-is-done) question
*   [Why is it required to have 10 shades per color?](https://help.mantine.dev/q/ten-shades-per-color) question
*   [Why I see color scheme flickering on page load?](https://help.mantine.dev/q/color-scheme-flickering) question
*   [How can I test Modal/Drawer/Popover components?](https://help.mantine.dev/q/portals-testing) question</content>
</page>

<page>
  <title>Version v7.14.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-14-0</url>
  <content>[AngleSlider component](#angleslider-component)
-----------------------------------------------

New [AngleSlider](https://mantine.dev/core/angle-slider/) component:

[RadialBarChart component](#radialbarchart-component)
-----------------------------------------------------

New [RadialBarChart](https://mantine.dev/charts/radial-bar-chart/) component:

[FunnelChart component](#funnelchart-component)
-----------------------------------------------

New [FunnelChart](https://mantine.dev/charts/funnel-chart/) component:

[Modal.Stack and Drawer.Stack components](#modalstack-and-drawerstack-components)
---------------------------------------------------------------------------------

New [Modal.Stack](https://mantine.dev/core/modal/) and [Drawer.Stack](https://mantine.dev/core/drawer/) components simplify usage of multiple modals/drawers at the same time.

Use `Modal.Stack` component to render multiple modals at the same time. `Modal.Stack` keeps track of opened modals, manages z-index values, focus trapping and `closeOnEscape` behavior. `Modal.Stack` is designed to be used with `useModalsStack` hook.

Differences from using multiple `Modal` components:

*   `Modal.Stack` manages z-index values – modals that are opened later will always have higher z-index value disregarding their order in the DOM
*   `Modal.Stack` disables focus trap and `Escape` key handling for all modals except the one that is currently opened
*   Modals that are not currently opened are present in the DOM but are hidden with `opacity: 0` and `pointer-events: none`
*   Only one overlay is rendered at a time

[useModalsStack/useDrawersStack hooks](#usemodalsstackusedrawersstack-hooks)
----------------------------------------------------------------------------

`useModalsStack` hook provides an easy way to control multiple modals at the same time. It accepts an array of unique modals ids and returns an object with the following properties:

Example of using `useModalsStack` with `Modal` component:

[Restrict Slider selection to marks](#restrict-slider-selection-to-marks)
-------------------------------------------------------------------------

[Slider](https://mantine.dev/core/slider/) component now supports `restrictToMarks` prop that restricts slider value to marks only. Note that in this case `step` prop is ignored:

[BarChart SVG pattern fill](#barchart-svg-pattern-fill)
-------------------------------------------------------

[BarChart](https://mantine.dev/charts/bar-chart/) now can be used with SVG pattern fill:

[Help center updates](#help-center-updates)
-------------------------------------------

*   New [Can I use nested inline styles with Mantine components?](https://help.mantine.dev/q/nested-inline-styles) question
*   New [Can I use PostCSS function in inline styles?](https://help.mantine.dev/q/postcss-fns-inline) question
*   New [Why my Carousel slides are in vertical orientation?](https://help.mantine.dev/q/carousel-missing-styles) question
*   New [My buttons are transparent and the background is visible only on hover, what is wrong?](https://help.mantine.dev/q/transparent-buttons) question
*   New [Can I have different primary color for light and dark color schemes?](https://help.mantine.dev/q/primary-virtual-color) question
*   New [How can I change body background color?](https://help.mantine.dev/q/body-background) question
*   New [My Popover dropdown closes when I click on the dropdown of nested Popover](https://help.mantine.dev/q/nested-popover-closes) question

[Other changes](#other-changes)
-------------------------------

*   [useTree](https://mantine.dev/core/tree/) hook now accepts `onNodeExpand` and `onNodeCollapse` callbacks
*   [useTree](https://mantine.dev/core/tree/) hook now returns additional `checkAllNodes`, `uncheckAllNodes` and `setCheckedState` handlers
*   [Tree](https://mantine.dev/core/tree/) component now includes `getTreeExpandedState` to generate expanded state based on the tree data
*   [use-form](https://mantine.dev/form/use-form/) now supports `form.replaceListItem` handler to replace list item at given index</content>
</page>

<page>
  <title>Version v7.13.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-13-0</url>
  <content>[Container queries support in Grid](#container-queries-support-in-grid)
-----------------------------------------------------------------------

You can now use [container queries](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment/Container_queries) in [Grid](https://mantine.dev/core/grid/) component. With container queries, all responsive values are adjusted based on the container width, not the viewport width.

Example of using container queries. To see how the grid changes, resize the root element of the demo with the resize handle located at the bottom right corner of the demo:

[CompositeChart component](#compositechart-component)
-----------------------------------------------------

New [CompositeChart](https://mantine.dev/charts/composite-chart/) component allows using `Line`, `Area` and `Bar` charts together in a single chart:

[Points labels](#points-labels)
-------------------------------

[LineChart](https://mantine.dev/charts/line-chart/) and [AreaChart](https://mantine.dev/charts/area-chart/) now support `withPointLabels` prop to display labels on data points:

[ScatterChart](https://mantine.dev/charts/scatter-chart/) also supports point labels, but also allows to control which axis should display labels with `pointLabels` prop:

[BarChart: Mixed stacks](#barchart-mixed-stacks)
------------------------------------------------

You can now control how [BarChart](https://mantine.dev/charts/bar-chart/) series are stacked by setting `stackId` property in series object:

[BarChart: Minimum bar size](#barchart-minimum-bar-size)
--------------------------------------------------------

[BarChart](https://mantine.dev/charts/bar-chart/) now supports `minBarSize` prop to set the minimum size of the bar in px:

[New demo: Custom Tabs variant](#new-demo-custom-tabs-variant)
--------------------------------------------------------------

A new example of adding a custom variant to [Tabs](https://mantine.dev/core/tabs/) component with [FloatingIndicator](https://mantine.dev/core/floating-indicator/):

[New demo: Custom slider](#new-demo-custom-slider)
--------------------------------------------------

Example of [use-move](https://mantine.dev/hooks/use-move/) hook usage to create a custom slider:

[Help Center updates](#help-center-updates)
-------------------------------------------

*   New [How to integrate custom input with use-form hook?](https://help.mantine.dev/q/custom-input-use-form) question
*   New [Can I remove MultiSelect placeholder when the component has selected values?](https://help.mantine.dev/q/multiselect-value-placeholder) question
*   New [How can I load fonts in React Router?](https://help.mantine.dev/q/react-router-load-fonts) question
*   New [My styles are overridden by Mantine components styles, what should I do?](https://help.mantine.dev/q/styles-order) question
*   New [Why I cannot use one polymorphic component in component prop of another polymorphic component?](https://help.mantine.dev/q/polymorphic-in-polymorphic) question
*   New [Can I use an array of strings as a list in use-form?](https://help.mantine.dev/q/list-of-strings-in-use-form) question

[Other changes](#other-changes)
-------------------------------

*   New demo has been added to [Chip](https://mantine.dev/core/chip/) component with an example of how to deselect radio chip
*   [BarChart](https://mantine.dev/charts/bar-chart/) now supports `maxBarWidth` prop to set the maximum width of each bar in px</content>
</page>

<page>
  <title>Version v7.12.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-12-0</url>
  <content>[Notifications at any position](#notifications-at-any-position)
---------------------------------------------------------------

It is now possible to display notifications at any position on the screen with [@mantine/notifications package](https://mantine.dev/x/notifications/):

[Subscribe to notifications state](#subscribe-to-notifications-state)
---------------------------------------------------------------------

You can now subscribe to notifications state changes with `useNotifications` hook:

Notifications state

\[\]

Notifications queue

\[\]

[SemiCircleProgress component](#semicircleprogress-component)
-------------------------------------------------------------

New [SemiCircleProgress](https://mantine.dev/core/semi-circle-progress/) component:

Fill direction

Right to left

Left to right

[Tree checked state](#tree-checked-state)
-----------------------------------------

[Tree](https://mantine.dev/core/tree/) component now supports checked state:

[Disable specific features in postcss-preset-mantine](#disable-specific-features-in-postcss-preset-mantine)
-----------------------------------------------------------------------------------------------------------

You can now disable specific features of the [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/) by setting them to `false` in the configuration object. This feature is available starting from `postcss-preset-mantine@1.17.0`.

[Help Center updates](#help-center-updates)
-------------------------------------------

*   [Server components guide](https://help.mantine.dev/q/server-components) has been updated to include `Component.extend` usage in server components.
*   [A guide on applying input focus styles](https://help.mantine.dev/q/input-focus-styles) has been updated to work correctly with [PasswordInput](https://mantine.dev/core/password-input/) and other components in which the `input` selector is not used for actual input element.
*   The guide on [how to disable all inputs in the form](https://help.mantine.dev/q/disable-all-inputs-in-form) now includes additional instructions for [use-form](https://mantine.dev/form/use-form/).
*   New [Can I have color schemes other than light and dark?](https://help.mantine.dev/q/light-dark-is-not-enough) guide explains the difference between color scheme and theme and why Mantine does not support custom color schemes.
*   New [Why VSCode cannot autoimport Text component?](https://help.mantine.dev/q/why-vscode-cannot-autoimport-text) guide explains why VSCode cannot automatically import `Text` component.
*   New [Are Mantine components accessible?](https://help.mantine.dev/q/are-mantine-components-accessible) question
*   New [How can I focus the first input with error with use-form?](https://help.mantine.dev/q/focus-first-input-with-error) question
*   New [How to scroll to the top of the form if the form is submitted with errors?](https://help.mantine.dev/q/scroll-to-the-top-of-the-form) question
*   New [Why my notifications are displayed at a wrong position?](https://help.mantine.dev/q/notifications-missing-styles) question
*   New [Why my screen is completely empty after I've added notifications package?](https://help.mantine.dev/q/notifications-empty-screen) question
*   New [Why can I not use value/label data structure with Autocomplete/TagsInput?](https://help.mantine.dev/q/autocomplete-value-label) question
*   New [Why FileButton does not work in Menu?](https://help.mantine.dev/q/file-button-in-menu) question
*   New [How can I display different elements in light and dark color schemes?](https://help.mantine.dev/q/light-dark-elements) question

[Other changes](#other-changes)
-------------------------------

*   [use-interval](https://mantine.dev/hooks/use-interval/) hook now supports `autoInvoke` option to start the interval automatically when the component mounts.
*   [use-form](https://mantine.dev/form/use-form/) with `mode="uncontrolled"` now triggers additional rerender when dirty state changes to allow subscribing to form state changes.
*   [ScrollArea](https://mantine.dev/core/scroll-area/) component now supports `onTopReached` and `onBottomReached` props. The functions are called when the user scrolls to the top or bottom of the scroll area.
*   [Accordion.Panel](https://mantine.dev/core/accordion/) component now supports `onTransitionEnd` prop that is called when the panel animation completes.</content>
</page>

<page>
  <title>Version v7.11.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-11-0</url>
  <content>[withProps function](#withprops-function)
-----------------------------------------

All Mantine components now have `withProps` static function that can be used to add default props to the component:

[Avatar initials](#avatar-initials)
-----------------------------------

[Avatar](https://mantine.dev/core/avatar/) component now supports displaying initials with auto generated color based on the given `name` value. To display initials instead of the default placeholder, set `name` prop to the name of the person, for example, `name="John Doe"`. If the name is set, you can use `color="initials"` to generate color based on the name:

[BubbleChart component](#bubblechart-component)
-----------------------------------------------

New [BubbleChart](https://mantine.dev/charts/bubble-chart/) component:

[BarChart waterfall type](#barchart-waterfall-type)
---------------------------------------------------

[BarChart](https://mantine.dev/charts/bar-chart/) component now supports `waterfall` type which is useful for visualizing changes in values over time:

[LineChart gradient type](#linechart-gradient-type)
---------------------------------------------------

[LineChart](https://mantine.dev/charts/line-chart/) component now supports `gradient` type which renders line chart with gradient fill:

[Right Y axis](#right-y-axis)
-----------------------------

[LineChart](https://mantine.dev/charts/line-chart/), [BarChart](https://mantine.dev/charts/bar-chart/) and [AreaChart](https://mantine.dev/charts/area-chart/) components now support `rightYAxis` prop which renders additional Y axis on the right side of the chart:

[RadarChart legend](#radarchart-legend)
---------------------------------------

[RadarChart](https://mantine.dev/charts/radar-chart/) component now supports legend:

[TagsInput acceptValueOnBlur](#tagsinput-acceptvalueonblur)
-----------------------------------------------------------

[TagsInput](https://mantine.dev/core/tags-input/) component behavior has been changed. Now By default, if the user types in a value and blurs the input, the value is added to the list. You can change this behavior by setting `acceptValueOnBlur` to `false`. In this case, the value is added only when the user presses `Enter` or clicks on a suggestion.

[Transition delay](#transition-delay)
-------------------------------------

[Transition](https://mantine.dev/core/transition/) component now supports `enterDelay` and `exitDelay` props to delay transition start:

[Documentation updates](#documentation-updates)
-----------------------------------------------

*   New [segmented progress](https://mantine.dev/core/progress/#example-progress-with-segments) example has been added to `Progress` component documentation
*   [Select](https://mantine.dev/core/select/), [TagsInput](https://mantine.dev/core/tags-input/) and [MultiSelect](https://mantine.dev/core/multi-select/) components documentation now includes additional demo on how to change the dropdown width
*   New [DatePicker](https://mantine.dev/dates/date-picker/#exclude-dates) example for `excludeDate` prop

[Other changes](#other-changes)
-------------------------------

*   [Pagination](https://mantine.dev/core/pagination/) component now supports `hideWithOnePage` prop which hides pagination when there is only one page
*   [Spoiler](https://mantine.dev/core/spoiler/) component now supports controlled expanded state with `expanded` and `onExpandedChange` props
*   [Burger](https://mantine.dev/core/burger/) component now supports `lineSize` prop to change lines height
*   [Calendar](https://mantine.dev/dates/calendar/), [DatePicker](https://mantine.dev/dates/date-picker/) and other similar components now support `highlightToday` prop to highlight today's date</content>
</page>

<page>
  <title>Version v7.10.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-10-0</url>
  <content>[Tree component](#tree-component)
---------------------------------

New [Tree](https://mantine.dev/core/tree/) component:

[form.getInputNode](#formgetinputnode)
--------------------------------------

New `form.getInputNode(path)` handler returns input DOM node for the given field path. Form example, it can be used to focus input on form submit if there is an error:

[Container queries in SimpleGrid](#container-queries-in-simplegrid)
-------------------------------------------------------------------

You can now use [container queries](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment/Container_queries) in [SimpleGrid](https://mantine.dev/core/simple-grid/) component. With container queries, grid columns and spacing will be adjusted based on the container width, not the viewport width.

Example of using container queries. To see how the grid changes, resize the root element of the demo with the resize handle located at the bottom right corner of the demo:

[Checkbox and Radio indicators](#checkbox-and-radio-indicators)
---------------------------------------------------------------

New [Checkbox.Indicator](https://mantine.dev/core/checkbox/#checkboxindicator) and [Radio.Indicator](https://mantine.dev/core/radio/#radioindicator) components look exactly the same as `Checkbox` and `Radio` components, but they do not have any semantic meaning, they are just visual representations of checkbox and radio states.

`Checkbox.Indicator` component:

`Radio.Indicator` component:

[Checkbox and Radio cards](#checkbox-and-radio-cards)
-----------------------------------------------------

New [Checkbox.Card](https://mantine.dev/core/checkbox/#checkboxcard-component) and [Radio.Card](https://mantine.dev/core/radio/#radiocard-component) components can be used as replacements for `Checkbox` and `Radio` to build custom cards/buttons/etc. that work as checkboxes and radios. Components are accessible by default and support the same keyboard interactions as `input[type="checkbox"]` and `input[type="radio"]`.

`Checkbox.Card` component:

`Checkbox.Card` component with `Checkbox.Group`:

Pick packages to install

Choose all packages that you will need in your application

CurrentValue: –

`Radio.Card` component:

`Radio.Card` component with `Radio.Group`:

Pick one package to install

Choose a package that you will need in your application

CurrentValue: –

[bd style prop](#bd-style-prop)
-------------------------------

New [bd style prop](https://mantine.dev/styles/style-props/) can be used to set `border` CSS property. It is available in all components that support style props.

Border width value is automatically converted to rem. For border color you can reference theme colors similar to other style props:</content>
</page>

<page>
  <title>Version v7.9.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-9-0</url>
  <content>[@mantine/emotion package](#mantineemotion-package)
---------------------------------------------------

New [@mantine/emotion](https://mantine.dev/styles/emotion/) package is now available to simplify migration from [6.x to 7.x](https://mantine.dev/guides/6x-to-7x/). It includes `createStyles` function and additional functionality for `sx` and `styles` props for all components similar to what was available in `@mantine/core` package in v6.

If you still haven't migrated to 7.x because of the change in styling approach, you can now have a smoother transition by using `@mantine/emotion` package. To learn more about the package, visit the [documentation page](https://mantine.dev/styles/emotion/) and updated [6.x to 7.x migration guide](https://mantine.dev/guides/6x-to-7x/).

[React 18.3 support](#react-183-support)
----------------------------------------

All `@mantine/*` components and hooks have been updated to support React 18.3. It is recommended to update your application as well to prepare for the upcoming [React 19 release](https://react.dev/blog/2024/04/25/react-19).

[use-field hook](#use-field-hook)
---------------------------------

New [use-field](https://mantine.dev/form/use-field/) hook is now available in `@mantine/form` package. It can be used as a simpler alternative to [use-form](https://mantine.dev/form/use-form/) hook to manage state of a single input without the need to create a form. The hook supports most of `use-form` hook features: validation with function, touched and dirty state, error message, validation on change/blur and more.

`use-field` hook also supports async validation:

[Custom PostCSS mixins](#custom-postcss-mixins)
-----------------------------------------------

You can now define custom mixins that are not included in [mantine-postcss-preset](https://mantine.dev/styles/postcss-preset/) by specifying them in the `mixins` option. To learn about mixins syntax, follow [postcss-mixins documentation](https://github.com/postcss/postcss-mixins#readme). Note that this feature is available in `postcss-preset-mantine` starting from version 1.15.0.

Example of adding `clearfix` and `circle` mixins:

Then you can use these mixins in your styles:

[use-matches hook](#use-matches-hook)
-------------------------------------

New `use-matches` hook exported from `@mantine/core` is an alternative to [use-media-query](https://mantine.dev/hooks/use-media-query/) if you need to match multiple media queries and values. It accepts an object with media queries as keys and values at given breakpoint as values.

Note that `use-matches` hook uses the same logic as [use-media-query](https://mantine.dev/hooks/use-media-query/) under the hood, it is not recommended to be used as a primary source of responsive styles, especially if you have ssr in your application.

In the following example:

*   Starting from `theme.breakpoints.lg`, color will be `red.9`
*   Between `theme.breakpoints.sm` and `theme.breakpoints.lg`, color will be `orange.9`
*   Below `theme.breakpoints.sm`, color will be `blue.9`

Box with color that changes based on screen size

[BarChart value label](#barchart-value-label)
---------------------------------------------

[BarChart](https://mantine.dev/charts/bar-chart/) now supports `withBarValueLabel` prop that allows displaying value label on top of each bar:

[Documentation updates](#documentation-updates)
-----------------------------------------------

*   New [usage with emotion](https://mantine.dev/styles/emotion/) guide
*   [6.x -> 7.x](https://mantine.dev/guides/6x-to-7x/) guide has been updated to include migration to [@mantine/emotion](https://mantine.dev/styles/emotion/) package
*   [use-field](https://mantine.dev/form/use-field/) hook documentation
*   [Uncontrolled form mode](https://mantine.dev/form/uncontrolled/) examples now include usage of `form.key()` function
*   [Custom PostCSS mixins](https://mantine.dev/styles/postcss-preset/#custom-mixins) documentation
*   [use-matches](https://mantine.dev/styles/responsive/#use-matches-hook) hook documentation has been added to the responsive guide

[Other changes](#other-changes)
-------------------------------

*   Advanced templates now include GitHub workflows to run tests on CI
*   [AspectRatio](https://mantine.dev/core/aspect-ratio/) component has been migrated to [aspect-ratio](https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio) CSS property</content>
</page>

<page>
  <title>Version v7.8.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-8-0</url>
  <content>[Auto convert px to rem in .css files](#auto-convert-px-to-rem-in-css-files)
----------------------------------------------------------------------------

Start from version `1.14.4` [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/) supports `autoRem` option that can be used to automatically convert all `px` values to `rem` units in `.css` files.

This option works similar to `rem` function. The following code:

Will be transformed to:

Note that `autoRem` converts only CSS properties, values in `@media` queries are not converted automatically – you still need to use `em` function to convert them.

`autoRem` option does not convert values in the following cases:

*   Values in `calc()`, `var()`, `clamp()` and `url()` functions
*   Values in `content` property
*   Values that contain `rgb()`, `rgba()`, `hsl()`, `hsla()` colors

If you want to convert above values to rem units, use `rem` function manually.

[Uncontrolled form mode](#uncontrolled-form-mode)
-------------------------------------------------

[useForm](https://mantine.dev/form/use-form/) hook now supports [uncontrolled mode](https://mantine.dev/form/uncontrolled/). Uncontrolled mode provides a significant performance improvement by reducing the number of re-renders and the amount of state updates almost to 0. Uncontrolled mode is now the recommended way to use the `useForm` hook for almost all use cases.

Example of uncontrolled form (`form.values` are not updated):

Form values:

{
  "name": "",
  "email": ""
}

Submitted values:

–

[form.getValues](#formgetvalues)
--------------------------------

With uncontrolled mode, you can not access `form.values` as a state variable, instead, you can use `form.getValues()` method to get current form values at any time:

`form.getValues()` always returns the latest form values, it is safe to use it after state updates:

[form.watch](#formwatch)
------------------------

`form.watch` is an effect function that allows subscribing to changes of a specific form field. It accepts field path and a callback function that is called with new value, previous value, touched and dirty field states:

[Customize Popover middlewares](#customize-popover-middlewares)
---------------------------------------------------------------

You can now customize `middlewares` options in [Popover](https://mantine.dev/core/popover/) component and in other components ([Menu](https://mantine.dev/core/menu/), [Select](https://mantine.dev/core/select/), [Combobox](https://mantine.dev/core/combobox/), etc.) based on Popover.

To customize [Floating UI](https://floating-ui.com/) middlewares options, pass them as an object to the `middlewares` prop. For example, to change [shift](https://floating-ui.com/docs/shift) middleware padding to `20px` use the following configuration:

[use-fetch hook](#use-fetch-hook)
---------------------------------

New [use-fetch](https://mantine.dev/hooks/use-fetch/) hook:

[use-map hook](#use-map-hook)
-----------------------------

New [use-map](https://mantine.dev/hooks/use-map/) hook:

| Page | Views last month |  |
| --- | --- | --- |
| /hooks/use-media-query | 4124 |  |
| /hooks/use-clipboard | 8341 |  |
| /hooks/use-fetch | 9001 |  |

[use-set hook](#use-set-hook)
-----------------------------

New [use-set](https://mantine.dev/hooks/use-set/) hook:

Add new scope

Duplicate scopes are not allowed

`@mantine``@mantine-tests``@mantinex`

[use-debounced-callback hook](#use-debounced-callback-hook)
-----------------------------------------------------------

New [use-debounced-callback](https://mantine.dev/hooks/use-debounced-callback/) hook:

[use-throttled-state hook](#use-throttled-state-hook)
-----------------------------------------------------

New [use-throttled-state](https://mantine.dev/hooks/use-throttled-state/) hook:

[use-throttled-value hook](#use-throttled-value-hook)
-----------------------------------------------------

New [use-throttled-value](https://mantine.dev/hooks/use-throttled-value/) hook:

[use-throttled-callback hook](#use-throttled-callback-hook)
-----------------------------------------------------------

New [use-throttled-callback](https://mantine.dev/hooks/use-throttled-callback/) hook:

[use-orientation hook](#use-orientation-hook)
---------------------------------------------

New [use-orientation](https://mantine.dev/hooks/use-orientation/) hook:

Angle: `0`

Type: `landscape-primary`

[use-is-first-render hook](#use-is-first-render-hook)
-----------------------------------------------------

New [use-is-first-render](https://mantine.dev/hooks/use-is-first-render/) hook:

[Documentation updates](#documentation-updates)
-----------------------------------------------

*   New [uncontrolled form](https://mantine.dev/form/uncontrolled/) guide
*   [onValuesChange](https://mantine.dev/form/values/#onvalueschange) documentation has been added
*   A new demo has been added to [tiptap](https://mantine.dev/x/tiptap/#typography-styles) that shows how to customize typography styles
*   A new guide has been added to customize [Popover](https://mantine.dev/core/popover/#customize-middleware-options) middlewares

[Other changes](#other-changes)
-------------------------------

*   [NumberInput](https://mantine.dev/core/number-input/) now supports `withKeyboardEvents={false}` to disable up/down arrow keys handling
*   [Popover](https://mantine.dev/core/popover/) [shift](https://floating-ui.com/docs/shift) middleware now has default padding of 5px to offset dropdown near the edge of the viewport</content>
</page>

<page>
  <title>Version v7.7.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-7-0</url>
  <content>[Virtual colors](#virtual-colors)
---------------------------------

Virtual color is a special color which values should be different for light and dark color schemes. To define a virtual color, use `virtualColor` function which accepts an object with the following properties as a single argument:

*   `name` – color name, must be the same as the key in `theme.colors` object
*   `light` – a key of `theme.colors` object for light color scheme
*   `dark` – a key of `theme.colors` object for dark color scheme

To see the demo in action, switch between light and dark color schemes (`Ctrl + J`):

This box has virtual background color, it is pink in dark mode and cyan in light mode

[FloatingIndicator component](#floatingindicator-component)
-----------------------------------------------------------

New [FloatingIndicator](https://mantine.dev/core/floating-indicator/) component:

[ScatterChart component](#scatterchart-component)
-------------------------------------------------

New [ScatterChart](https://mantine.dev/charts/scatter-chart/) component:

[colorsTuple function](#colorstuple-function)
---------------------------------------------

New `colorsTuple` function can be used to:

*   Use single color as the same color for all shades
*   Transform dynamic string arrays to Mantine color tuple (the array should still have 10 values)

[use-mutation-observer hook](#use-mutation-observer-hook)
---------------------------------------------------------

New [useMutationObserver](https://mantine.dev/hooks/use-mutation-observer/) hook:

Press Ctrl + Shift + L to change direction

Direction was changed to: Not changed yet

[use-state-history hook](#use-state-history-hook)
-------------------------------------------------

New [useStateHistory](https://mantine.dev/hooks/use-state-history/) hook:

Current value: 1

{
  "history": \[
    1
  \],
  "current": 0
}

[Axis labels](#axis-labels)
---------------------------

[AreaChart](https://mantine.dev/charts/area-chart/), [BarChart](https://mantine.dev/charts/bar-chart/) and [LineChart](https://mantine.dev/charts/line-chart/) components now support `xAxisLabel` and `yAxisLabel` props:

[Documentation updates](#documentation-updates)
-----------------------------------------------

*   New section has been added to the [responsive guide](https://mantine.dev/styles/responsive/#hidden-and-visible-from-as-classes) on how to use `mantine-hidden-from-{x}` and `mantine-visible-from-{x}` classes.
*   [Jest](https://mantine.dev/guides/jest/) and [Vitest](https://mantine.dev/guides/vitest/) guides configuration has been updated to include mocks for `window.HTMLElement.prototype.scrollIntoView`
*   [CSS variables](https://mantine.dev/styles/css-variables/) documentation has been updated to include more information about typography and colors variables

[Help center updates](#help-center-updates)
-------------------------------------------

New articles added to the [help center](https://help.mantine.dev/):

*   [Can I use SegmentedControl with empty value?](https://help.mantine.dev/q/segmented-control-no-value)
*   [Is there a comparison with other libraries?](https://help.mantine.dev/q/other-libs)
*   [Can I use Mantine with Vue/Svelte/Angular/etc.?](https://help.mantine.dev/q/vue-svelte-angular)
*   [How can I test Select/MultiSelect components?](https://help.mantine.dev/q/combobox-testing)

[Other changes](#other-changes)
-------------------------------

*   [SegmentedControl](https://mantine.dev/core/segmented-control/) indicator positioning logic has been migrated to [FloatingIndicator](https://mantine.dev/core/floating-indicator/). It is now more performant and works better when used inside elements with `transform: scale()`.
*   New [use-mounted](https://mantine.dev/hooks/use-mounted/) hook
*   [Sparkline](https://mantine.dev/charts/sparkline/) now supports `connectNulls` and `areaProps` props
*   [Select](https://mantine.dev/core/select/), [MultiSelect](https://mantine.dev/core/multi-select/), [Autocomplete](https://mantine.dev/core/autocomplete/) and [TagsInput](https://mantine.dev/core/tags-input/) components now support `scrollAreaProps` prop to pass props down to the [ScrollArea](https://mantine.dev/core/scroll-area/) component in the dropdown
*   [Transition](https://mantine.dev/core/transition/) component now supports 4 new transitions: `fade-up`, `fade-down`, `fade-left`, `fade-right`
*   Default [Modal](https://mantine.dev/core/modal/) transition was changed to `fade-down`. This change resolves issues with [SegmentedControl](https://mantine.dev/core/segmented-control/) indicator positioning when used inside modals.
*   You can now reference headings font sizes and line heights in `fz` and `lh` style props with `h1`, `h2`, `h3`, `h4`, `h5`, `h6` values</content>
</page>

<page>
  <title>Version v7.6.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-6-0</url>
  <content>[Container queries support](#container-queries-support)
-------------------------------------------------------

You can now use [container queries](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_container_queries) with Mantine components. `rem` and `em` functions from [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/#remem-functions) are available in container queries staring from `postcss-preset-mantine@1.13.0`.

Resize parent element to see container query in action

[RadarChart component](#radarchart-component)
---------------------------------------------

New [RadarChart](https://mantine.dev/charts/radar-chart/) component:

[FocusTrap.InitialFocus component](#focustrapinitialfocus-component)
--------------------------------------------------------------------

[FocusTrap.InitialFocus](https://mantine.dev/core/focus-trap/) is a new component that adds a visually hidden element which will receive the focus when the focus trap is activated. Once `FocusTrap.InitialFocus` loses focus, it is removed from the tab order.

For example, it is useful if you do not want to focus any elements inside the [Modal](https://mantine.dev/core/modal/) when it is opened:

[New MantineProvider props](#new-mantineprovider-props)
-------------------------------------------------------

[MantineProvider](https://mantine.dev/theming/mantine-provider/) now includes more props to control how styles are generated and injected. These props are useful if you use Mantine as a headless library and in test environments.

### [deduplicateCssVariables](#deduplicatecssvariables)

`deduplicateCssVariables` prop determines whether CSS variables should be deduplicated: if a CSS variable has the same value as in the default theme, it is not added in the runtime. By default, it is set to `true`. If set to `false`, all Mantine CSS variables will be added in `<style />` tag, even if they have the same value as in the default theme.

### [withStaticClasses](#withstaticclasses)

`withStaticClasses` determines whether components should have static classes, for example, `mantine-Button-root`. By default, static classes are enabled, to disable them set `withStaticClasses` to `false`:

### [withGlobalClasses](#withglobalclasses)

`withGlobalClasses` determines whether global classes should be added with `<style />` tag. Global classes are required for `hiddenFrom`/`visibleFrom` and `lightHidden`/`darkHidden` props to work. By default, global classes are enabled, to disable them set `withGlobalClasses` to `false`. Note that disabling global classes may break styles of some components.

[HeadlessMantineProvider](#headlessmantineprovider)
---------------------------------------------------

`HeadlessMantineProvider` is an alternative to [MantineProvider](https://mantine.dev/theming/mantine-provider/) that should be used when you want to use Mantine as a headless UI library. It removes all features that are related to Mantine styles:

*   Mantine classes are not applied to components
*   Inline CSS variables are not added with `style` attribute
*   All color scheme related features are removed
*   Global styles are not generated

Limitations of `HeadlessMantineProvider`:

*   [Color scheme switching](https://mantine.dev/theming/color-schemes/) will not work. If your application has a dark mode, you will need to implement it on your side.
*   Props that are related to styles in all components (`color`, `radius`, `size`, etc.) will have no effect.
*   Some components that rely on styles will become unusable ([Grid](https://mantine.dev/core/grid/), [SimpleGrid](https://mantine.dev/core/simple-grid/), [Container](https://mantine.dev/core/container/), etc.).
*   `lightHidden`/`darkHidden`, `visibleFrom`/`hiddenFrom` props will not work.
*   [Style props](https://mantine.dev/styles/style-props/) will work only with explicit values, for example `mt="xs"` will not work, but `mt={5}` will.

To use `HeadlessMantineProvider`, follow the [getting started guide](https://mantine.dev/getting-started/) and replace `MantineProvider` with `HeadlessMantineProvider`. Note that you do not need to use [ColorSchemeScript](https://mantine.dev/theming/color-schemes/#colorschemescript) in your application, it will not have any effect, you can ignore this part of the guide.

[Sparkline trendColors](#sparkline-trendcolors)
-----------------------------------------------

[Sparkline](https://mantine.dev/charts/sparkline/) now supports `trendColors` prop to change chart color depending on the trend. The prop accepts an object with `positive`, `negative` and `neutral` properties:

*   `positive` - color for positive trend (first value is less than the last value in `data` array)
*   `negative` - color for negative trend (first value is greater than the last value in `data` array)
*   `neutral` - color for neutral trend (first and last values are equal)

`neutral` is optional, if not provided, the color will be the same as `positive`.

Positive trend:

Negative trend:

Neutral trend:

[RichTextEditor tasks extension](#richtexteditor-tasks-extension)
-----------------------------------------------------------------

[RichTextEditor](https://mantine.dev/x/tiptap/#tasks) now supports tasks [tiptap extension](https://tiptap.dev/docs/editor/api/nodes/task-list):

[renderOption prop](#renderoption-prop)
---------------------------------------

[Select](https://mantine.dev/core/select/), [MultiSelect](https://mantine.dev/core/multi-select/), [TagsInput](https://mantine.dev/inputs/tags-input/) and [Autocomplete](https://mantine.dev/inputs/autocomplete/) components now support `renderOption` prop that allows to customize option rendering:

  

[Styles improvements](#styles-improvements)
-------------------------------------------

All Mantine components have been migrated to [logical CSS properties](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_logical_properties_and_values) (as a replacement for rtl styles) and [:where](https://developer.mozilla.org/en-US/docs/Web/CSS/:where) pseudo-class (as a replacement for [private CSS variables](https://help.mantine.dev/q/private-css-variables)). These changes should not impact the usage of Mantine components, but now Mantine CSS files have smaller size. For example, `@mantine/core/styles.css` now has ~ 8% smaller size (192kb -> 177kb).

[Pass props to inner recharts components](#pass-props-to-inner-recharts-components)
-----------------------------------------------------------------------------------

You can now pass props down to recharts [Bar](https://recharts.org/en-US/api/Bar), [Area](https://recharts.org/en-US/api/Area) and [Line](https://recharts.org/en-US/api/Line) components with `barProps`, `areaProps` and `lineProps` props on [BarChart](https://mantine.dev/charts/bar-chart/), [AreaChart](https://mantine.dev/charts/area-chart/) and [LineChart](https://mantine.dev/charts/line-chart/) components.

All props accept either an object with props or a function that receives series data as an argument and returns an object with props.

[PieChart percent labels](#piechart-percent-labels)
---------------------------------------------------

[PieChart](https://mantine.dev/charts/pie-chart/) now supports `percent` labels:

[Documentation updates](#documentation-updates)
-----------------------------------------------

*   [Responsive styles guide](https://mantine.dev/styles/responsive/) now includes new sections about responsive props and container queries
*   New [HeadlessMantineProvider section](https://mantine.dev/styles/unstyled/#headlessmantineprovider) in the unstyled guide
*   [ActionIcon](https://mantine.dev/core/action-icon/) now includes additional documentation section on how to make the button the same size as Mantine inputs
*   [AreaChart](https://mantine.dev/charts/area-chart/) now includes an example of how to rotate x-axis labels
*   [Redwood guide](https://mantine.dev/guides/redwood/) has been updated to the latest redwood version with Vite

[Help center updates](#help-center-updates)
-------------------------------------------

New articles added to the [help center](https://help.mantine.dev/):

*   [Browser zooms in when input is focused. What should I do?](https://help.mantine.dev/q/browser-zooms-on-focus)
*   [It is not possible to pinch to zoom when Modal is opened. What should I do?](https://help.mantine.dev/q/pinch-to-zoom-modal)
*   [How can I lock scroll in my application?](https://help.mantine.dev/q/how-to-lock-scroll)
*   [Where can I find the roadmap?](https://help.mantine.dev/q/roadmap)
*   [How can I change Tabs border color?](https://help.mantine.dev/q/tabs-border-color)
*   [How can I change inputs focus styles?](https://help.mantine.dev/q/input-focus-styles)
*   [Can I use Mantine with Emotion/styled-components/tailwindcss?](https://help.mantine.dev/q/third-party-styles)
*   [Is there a way to add mask to Mantine input?](https://help.mantine.dev/q/input-mask)
*   [How to align input with a button in a flex container?](https://help.mantine.dev/q/align-input-button)
*   [How can I change component color prop value depending on the color scheme?](https://help.mantine.dev/q/color-scheme-color)

[Other changes](#other-changes)
-------------------------------

*   [use-list-state](https://mantine.dev/hooks/use-list-state/) hook now supports `swap` handler
*   `form.setFieldValue` now supports callback function as an argument
*   `px`, `py`, `mx` and `my` [style props](https://mantine.dev/styles/style-props/) now use logical CSS properties `padding-inline`, `padding-block`, `margin-inline` and `margin-block` instead of `padding-left`, `padding-right`, etc.
*   All components now support `me`, `ms`, `ps`, `pe` [style props](https://mantine.dev/styles/style-props/) to set `margin-inline-end`, `margin-inline-start`, `padding-inline-start` and `padding-inline-end` CSS properties
*   [Tooltip](https://mantine.dev/core/tooltip/), [Popover](https://mantine.dev/core/popover/) and other components based on `Popover` now support `floatingStrategy` prop to control [Floating UI strategy](https://floating-ui.com/docs/usefloating#strategy)
*   All `@mantine/charts` components now support `children` prop, which passes children to the root recharts component
*   [use-resize-observer](https://mantine.dev/hooks/use-resize-observer/) and [use-element-size](https://mantine.dev/hooks/use-element-size/) hooks now support [ResizeObserver options](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/observe#parameters) as hook argument
*   [Select](https://mantine.dev/core/select/), [MultiSelect](https://mantine.dev/core/multi-select/) and [TagsInput](https://mantine.dev/inputs/tags-input/) now support `onClear` prop, the function is called when clear button is clicked
*   [MultiSelect](https://mantine.dev/core/multi-select/) and [TagsInput](https://mantine.dev/inputs/tags-input/) now support `onRemove` prop, the function is called with removed item value when one of the items is deselected
*   [Redwood template](https://github.com/mantinedev/redwood-template) has been updated to the latest redwood version with Vite</content>
</page>

<page>
  <title>Version v7.5.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-5-0</url>
  <content>[DonutChart component](#donutchart-component)
---------------------------------------------

New [DonutChart](https://mantine.dev/charts/donut-chart/) component:

[PieChart component](#piechart-component)
-----------------------------------------

New [PieChart](https://mantine.dev/charts/pie-chart/) component:

[@mantine/dates value formatter](#mantinedates-value-formatter)
---------------------------------------------------------------

[DatePickerInput](https://mantine.dev/dates/date-picker-input/), [MonthPickerInput](https://mantine.dev/dates/month-picker-input/) and [YearPickerInput](https://mantine.dev/dates/year-picker-input/) now support `valueFormatter` prop.

`valueFormatter` is a more powerful alternative to `valueFormat` prop. It allows formatting value label with a custom function. The function is the same for all component types (`default`, `multiple` and `range`) – you need to perform additional checks inside the function to handle different types.

Example of using a custom formatter function with `type="multiple"`:

[@mantine/dates consistent weeks](#mantinedates-consistent-weeks)
-----------------------------------------------------------------

You can now force each month to have 6 weeks by setting `consistentWeeks: true` on [DatesProvider](https://mantine.dev/dates/getting-started/). This is useful if you want to avoid layout shifts when month changes.

[Charts series label](#charts-series-label)
-------------------------------------------

It is now possible to change series labels with `label` property in `series` object. This feature is supported in [AreaChart](https://mantine.dev/charts/area-chart/), [BarChart](https://mantine.dev/charts/bar-chart/) and [LineChart](https://mantine.dev/charts/line-chart/) components.

[Charts value formatter](#charts-value-formatter)
-------------------------------------------------

All `@mantine/charts` components now support `valueFormatter` prop, which allows formatting value that is displayed on the y axis and inside the tooltip.

[Headings text wrap](#headings-text-wrap)
-----------------------------------------

New [Title](https://mantine.dev/core/title/) `textWrap` prop sets [text-wrap](https://developer.mozilla.org/en-US/docs/Web/CSS/text-wrap) CSS property. It controls how text inside an element is wrapped.

### Lorem, ipsum dolor sit amet consectetur adipisicing elit. Quasi voluptatibus inventore iusto cum dolore molestiae perspiciatis! Totam repudiandae impedit maxime!

You can also set `textWrap` on [theme](https://mantine.dev/theming/theme-object/):

If set on theme, `textWrap` is also applied to headings in [TypographyStylesProvider](https://mantine.dev/core/typography-styles-provider/)

[mod prop](#mod-prop)
---------------------

All components now support `mod` prop, which allows adding data attributes to the root element:

[Documentation updates](#documentation-updates)
-----------------------------------------------

*   New [testing with Vitest guide](https://mantine.dev/guides/vitest/)
*   [NativeSelect](https://mantine.dev/core/native-select/#with-dividers) with dividers demo
*   [Popover](https://mantine.dev/core/popover/#middlewares) `shift` and `flip` middlewares documentation
*   [Combobox](https://mantine.dev/core/combobox/#popover-props) props related to [Popover](https://mantine.dev/core/popover/) documentation
*   [Loading styles from CDN guide](https://mantine.dev/styles/mantine-styles/#loading-styles-from-cdn)
*   [Anchor](https://mantine.dev/core/anchor/#text-props) now includes additional documentation on how to use [Text](https://mantine.dev/core/text/) props
*   [Pagination](https://mantine.dev/core/pagination/) now includes props tables for all compound components
*   A more detailed breakdown of [browser support](https://mantine.dev/about/#browser-support) has been added to the about page

[Help center updates](#help-center-updates)
-------------------------------------------

New articles added to the [help center](https://help.mantine.dev/):

*   [Can I use Mantine with Astro?](https://help.mantine.dev/q/can-i-use-mantine-with-astro)
*   [How can I contribute to the library?](https://help.mantine.dev/q/how-can-i-contribute)
*   [How can I add dynamic CSS styles?](https://help.mantine.dev/q/dynamic-css-styles)
*   [How can I load fonts in Next.js?](https://help.mantine.dev/q/next-load-fonts)
*   [How can I load fonts in Vite?](https://help.mantine.dev/q/vite-load-fonts)
*   [Is there a floating action button component?](https://help.mantine.dev/q/floating-action-button)
*   [How to change inputs placeholder color?](https://help.mantine.dev/q/inputs-placeholder-color)
*   [I do not have styles in my dates components...](https://help.mantine.dev/q/dates-missing-styles)

[Other changes](#other-changes)
-------------------------------

*   [Checkbox.Group](https://mantine.dev/core/checkbox/), [Radio.Group](https://mantine.dev/core/radio/) and [Switch.Group](https://mantine.dev/core/switch/) now support `readOnly` prop
*   [ActionIcon](https://mantine.dev/core/action-icon/) now has `loading` state animation
*   [SegmentedControl](https://mantine.dev/core/segmented-control/) now supports `withItemsBorder` prop which allows removing border between items
*   [Progress](https://mantine.dev/core/progress/) now supports `transitionDuration` prop which controls section width animation duration
*   [Textarea](https://mantine.dev/core/textarea/) and [JsonInput](https://mantine.dev/core/json-input/) components now support `resize` prop, which allows setting `resize` CSS property on the input
*   `@mantine/hooks` package now exports [readLocalStorageValue and readSessionStorageValue](https://mantine.dev/hooks/use-local-storage/#read-storage-value) function to get value from storage outside of React components</content>
</page>

<page>
  <title>Version v7.4.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-4-0</url>
  <content>[@mantine/charts](#mantinecharts)
---------------------------------

New [@mantine/charts](https://mantine.dev/charts/getting-started/) package provides a set of components to build charts and graphs. All components are based on [recharts](https://recharts.org/en-US/). Currently, the package provides [AreaChart](https://mantine.dev/charts/area-chart/), [BarChart](https://mantine.dev/charts/bar-chart/), [LineChart](https://mantine.dev/charts/line-chart/) and [Sparkline](https://mantine.dev/charts/sparkline/) components. More components will be added in the next minor releases.

[AreaChart component](#areachart-component)
-------------------------------------------

New [AreaChart](https://mantine.dev/charts/area-chart/) component:

[LineChart component](#linechart-component)
-------------------------------------------

New [LineChart](https://mantine.dev/charts/line-chart/) component:

[BarChart component](#barchart-component)
-----------------------------------------

New [BarChart](https://mantine.dev/charts/bar-chart/) component:

[Sparkline component](#sparkline-component)
-------------------------------------------

New [Sparkline](https://mantine.dev/charts/sparkline/) component:

[OKLCH colors support](#oklch-colors-support)
---------------------------------------------

You can now use [OKLCH](https://oklch.com/) colors in `theme.colors`. OKLCH color model has [88.18% browser support](https://caniuse.com/mdn-css_types_color_oklch), it is supported in all modern browsers. OKLCH model provides 30% more colors than HSL model and has [several other advantages](https://evilmartians.com/chronicles/oklch-in-css-why-quit-rgb-hsl).

Example of adding OKLCH color to the theme:

[autoContrast](#autocontrast)
-----------------------------

New `theme.autoContrast` property controls whether text color should be changed based on the given `color` prop in the following components:

*   [ActionIcon](https://mantine.dev/core/action-icon/) with `variant="filled"` only
*   [Alert](https://mantine.dev/core/alert/) with `variant="filled"` only
*   [Avatar](https://mantine.dev/core/avatar/) with `variant="filled"` only
*   [Badge](https://mantine.dev/core/badge/) with `variant="filled"` only
*   [Button](https://mantine.dev/core/button/) with `variant="filled"` only
*   [Chip](https://mantine.dev/core/chip/) with `variant="filled"` only
*   [NavLink](https://mantine.dev/core/nav-link/) with `variant="filled"` only
*   [ThemeIcon](https://mantine.dev/core/theme-icon/) with `variant="filled"` only
*   [Checkbox](https://mantine.dev/core/checkbox/) with `variant="filled"` only
*   [Radio](https://mantine.dev/core/radio/) with `variant="filled"` only
*   [Tabs](https://mantine.dev/core/tabs/) with `variant="pills"` only
*   [SegmentedControl](https://mantine.dev/core/segmented-control/)
*   [Stepper](https://mantine.dev/core/stepper/)
*   [Pagination](https://mantine.dev/core/pagination/)
*   [Progress](https://mantine.dev/core/progress/)
*   [Indicator](https://mantine.dev/core/indicator/)
*   [Timeline](https://mantine.dev/core/timeline/)
*   [Spotlight](https://mantine.dev/x/spotlight/)
*   All [@mantine/dates](https://mantine.dev/dates/getting-started/) components that are based on [Calendar](https://mantine.dev/dates/calendar/) component

`autoContrast` can be set globally on the theme level or individually for each component via `autoContrast` prop, except for [Spotlight](https://mantine.dev/x/spotlight/) and [@mantine/dates](https://mantine.dev/dates/getting-started/) components, which only support global theme setting.

`autoContrast: true`

`autoContrast: false`

`autoContrast` checks whether the given color luminosity is above or below the `luminanceThreshold` value and changes text color to either `theme.white` or `theme.black` accordingly:

[Color functions improvements](#color-functions-improvements)
-------------------------------------------------------------

`alpha`, `lighten` and `darken` functions now support CSS variables (with [color-mix](https://caniuse.com/mdn-css_types_color_color-mix)) and OKLCH colors. All functions are available both in `@mantine/core` (`.ts`/`.js` files) and [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/) (`.css` files, requires version 1.12.0 or higher).

In `.css` files:

Will be transformed to:

In `.ts`/`.js` files:

Note that `alpha` function is a replacement for `rgba`. It was renamed to have a more clear meaning, as it can now be used with CSS variables and OKLCH colors. `rgba` function is still available as an alias for `alpha` function.

[enhanceGetInputProps](#enhancegetinputprops)
---------------------------------------------

`@mantine/form` now supports [enhanceGetInputProps](https://mantine.dev/form/get-input-props/#enhancegetinputprops). `enhanceGetInputProps` is a function that can be used to add additional props to the object returned by `form.getInputProps`. You can define it in `useForm` hook options. Its argument is an object with the following properties:

*   `inputProps` – object returned by `form.getInputProps` by default
*   `field` – field path, first argument of `form.getInputProps`, for example `name`, `user.email`, `users.0.name`
*   `options` – second argument of `form.getInputProps`, for example `{ type: 'checkbox' }`, can be used to pass additional options to `enhanceGetInputProps` function
*   `form` – form instance

Example of using `enhanceGetInputProps` to disable input based on field path:

Example of using `enhanceGetInputProps` to add additional props to the input based on option passed to `form.getInputProps`:

Your name

Your personal information is stored securely. (Just kidding!)

[form.initialize](#forminitialize)
----------------------------------

`@mantine/form` now supports `form.initialize` handler.

When called `form.initialize` handler sets `initialValues` and `values` to the same value and marks form as initialized. It can be used only once, next `form.initialize` calls are ignored.

`form.initialize` is useful when you want to sync form values with backend API response:

Example with [TanStack Query](https://tanstack.com/query/latest) (react-query):

Note that `form.initialize` will erase all values that were set before it was called. It is usually a good idea to set `readOnly` or `disabled` on all form fields before `form.initialize` is called to prevent data loss. You can implement this with [enhanceGetInputProps](https://mantine.dev/form/get-input-props/#enhancegetinputprops):

[valibot form resolver](#valibot-form-resolver)
-----------------------------------------------

`@mantine/form` now supports [validbot schema resolver](https://www.npmjs.com/package/mantine-form-valibot-resolver):

Basic fields validation:

Nested fields validation

List fields validation:

[ScrollArea scrollbars prop](#scrollarea-scrollbars-prop)
---------------------------------------------------------

[ScrollArea](https://mantine.dev/core/scroll-area/) now supports `scrollbars` prop, which allows controlling directions at which scrollbars should be rendered. Supported values are `x`, `y` and `xy`. If `scrollbars="y"` is set, only the vertical scrollbar will be rendered, and it will not be possible to scroll horizontally:

[Title lineClamp prop](#title-lineclamp-prop)
---------------------------------------------

[Title](https://mantine.dev/core/title/) component now supports `lineClamp` prop, which allows truncating text after a specified number of lines:

Lorem ipsum dolor sit amet consectetur adipisicing elit. Iure doloremque quas dolorum. Quo amet earum alias consequuntur quam accusamus a quae beatae, odio, quod provident consectetur non repudiandae enim adipisci?
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

[Primary color CSS variables](#primary-color-css-variables)
-----------------------------------------------------------

CSS variables for primary color are now available, you can use the following variables in your styles:

[Help center](#help-center)
---------------------------

[Help center](https://help.mantine.dev/) is a new website with guides, tutorials and frequently asked questions. Currently, it has 14 questions, more FAQs will be added in the next releases.

*   [Is there DataGrid component that I can use with Mantine?](https://help.mantine.dev/q/data-grid-i-need)
*   [MantineProvider was not found in component tree. What should I do?](https://help.mantine.dev/q/mantine-provider-missing)
*   [Can I use Mantine components as server components?](https://help.mantine.dev/q/server-components)
*   [Can I use Mantine with Create React App (CRA)?](https://help.mantine.dev/q/can-i-use-mantine-with-cra)
*   [How can I lint CSS files?](https://help.mantine.dev/q/how-to-setup-stylelint)
*   [How to update Mantine dependencies?](https://help.mantine.dev/q/how-to-update-dependencies)
*   [How can I add hover styles to an element?](https://help.mantine.dev/q/how-to-add-hover-styles)
*   [How can I get current color scheme value in JavaScript?](https://help.mantine.dev/q/how-to-get-color-scheme-value-in-js)
*   [Can I use private CSS variables to style components?](https://help.mantine.dev/q/private-css-variables)
*   [How can I disable all inputs/inputs group inside form?](https://help.mantine.dev/q/disable-all-inputs-in-form)
*   [How to use Dropzone with @mantine/form?](https://help.mantine.dev/q/how-to-use-dropzone-with-form)
*   [How to call a function when Modal/Drawer closes and animation completes?](https://help.mantine.dev/q/how-to-call-function-when-modal-closes)
*   [How to prevent Modal from closing?](https://help.mantine.dev/q/how-to-prevent-modal-from-closing)
*   [What is the difference between searchable Select and Autocomplete?](https://help.mantine.dev/q/select-autocomplete-difference)

[Documentation updates](#documentation-updates)
-----------------------------------------------

*   [form.getInputProps](https://mantine.dev/form/get-input-props/) guide now has a separate page. It describes `form.getInputProps`, `enhanceGetInputProps` and how to integrate `form.getInputProps` with custom inputs.
*   [assignRef](https://mantine.dev/hooks/use-merged-ref/#assignref-function) function documentation has been added.
*   [clampUseMovePosition](https://mantine.dev/hooks/use-move/#clampusemoveposition) function documentation has been added.
*   Additional documentation about hook arguments and types has been added to [use-hotkeys](https://mantine.dev/hooks/use-hotkeys/).
*   [UseListStateHandlers type](https://mantine.dev/hooks/use-list-state/#useliststatehandlers-type) documentation has been added.
*   [Functions reference](https://mantine.dev/guides/functions-reference/) page has been added. Currently, it contains all functions that are exported from `@mantine/hooks` package. It is planned to document functions from other packages in next releases.
*   Examples on how to change the close icon have been added to [Drawer](https://mantine.dev/core/drawer/#change-close-icon) and [Modal](https://mantine.dev/core/modal/#change-close-icon) components.
*   `variantColorsResolver` demos have been added to [ActionIcon](https://mantine.dev/core/action-icon/), [ThemeIcon](https://mantine.dev/core/theme-icon/) and [Badge](https://mantine.dev/core/badge/) components.

[Other changes](#other-changes)
-------------------------------

*   [RichTextEditor](https://mantine.dev/x/tiptap/) no longer depends on `@tabler/icons` package. It is no longer required to install `@tabler/icons` package to use `RichTextEditor` component. Icons used in the editor are now a part of the `@mantine/tiptap` package. This change improves bundling performance in several cases (mostly when using `RichTextEditor` in Next.js apps).
*   [Badge](https://mantine.dev/core/badge/) component now supports `circle` prop which makes the badge round.
*   You can now reference theme values in `ff` [style prop](https://mantine.dev/styles/style-props/) with `mono`, `text` and `heading` values: `<Box ff="mono" />`.
*   [RichTextEditor](https://mantine.dev/x/tiptap/) now has `RichTextEditor.Undo` and `RichTextEditor.Redo` controls.
*   A new `luminance` [color function](https://mantine.dev/styles/color-functions/) was added. It returns color luminance as a number between 0 and 1.
*   All components now support new `flex` [style prop](https://mantine.dev/styles/style-props/) which allows setting `flex` CSS property on the root element.
*   [Collapse](https://mantine.dev/core/collapse/) markup was reduced to single element, it can now be used in contexts that were previously not supported, for example, table rows.
*   `stepHoldDelay` and `stepHoldInterval` props have been added to [NumberInput](https://mantine.dev/core/number-input/).
*   [mantine-form-zod-resolver](https://github.com/mantinedev/mantine-form-zod-resolver) now supports `errorPriority` configuration which allows controlling the order of errors specified in the schema. This feature requires updating `mantine-form-zod-resolver` to version 1.1.0 or higher.
*   [CloseButton](https://mantine.dev/core/close-button/) now supports `icon` prop, which allows overriding default icon. It is useful when it is not possible to replace `CloseButton`, for example, in [Drawer](https://mantine.dev/core/drawer/) component.
*   [Select](https://mantine.dev/core/select/#onchange-handler) component now calls `onChange` with an additional argument – option object. It contains `label`, `value` and optional `disabled` properties.
*   It is now possible to define CSS variables in `styles` prop of all components.
*   New [use-in-viewport](https://mantine.dev/hooks/use-in-viewport/) hook
*   All Vite templates have been updated to Vite 5.0 and Vitest 1.0</content>
</page>

<page>
  <title>Version v7.3.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-3-0</url>
  <content>[smaller-than and larger-than mixins](#smaller-than-and-larger-than-mixins)
---------------------------------------------------------------------------

`smaller-than` and `larger-than` mixins can be used to create styles that will be applied only when the screen is smaller or larger than specified breakpoint. Note that to use these mixins, you need to update [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/) to version `1.11.0` or higher.

Will be transformed to:

You can also use `smaller-than` and `larger-than` mixins with [mantine breakpoints](https://mantine.dev/styles/responsive/#breakpoints-variables-in-css-modules):

[Form schema resolvers packages](#form-schema-resolvers-packages)
-----------------------------------------------------------------

`@mantine/form` schema validation resolver packages are now available as [separate packages](https://mantine.dev/form/schema-validation/). Moving resolvers to separate packages allows making them type-safe and fully tested. Old resolvers are still exported from `@mantine/form` package – you will be able to use them without any changes until 8.0.0 release.

The new packages are drop-in replacements for old resolvers, they have the same API and can be used in the same way.

Example of zod resolver:

[rem/em functions improvements](#remem-functions-improvements)
--------------------------------------------------------------

[rem and em](https://mantine.dev/styles/rem/) function now support space-separated values. This feature is available both in `rem` function exported from `@mantine/core` package and [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/). Note that you need to update [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/) to `1.11.0` to use this feature.

All components props that are converted to `rem` units now support space-separated values as well. For example, space-separated values can be used in `radius` prop of [Modal](https://mantine.dev/core/modal/) component:

[component and renderRoot props for non-polymorphic components](#component-and-renderroot-props-for-non-polymorphic-components)
-------------------------------------------------------------------------------------------------------------------------------

All Mantine components now support `component` and `renderRoot` props event if they are not [polymorphic](https://mantine.dev/guides/polymorphic/). The difference between polymorphic and non-polymorphic components is that polymorphic components include the full set of props of the component passed to the `component` prop, while non-polymorphic components only include props that are specific to the original component. It is done this way to improve TypeScript performance.

[Outline Checkbox and Radio variant](#outline-checkbox-and-radio-variant)
-------------------------------------------------------------------------

[Checkbox](https://mantine.dev/core/checkbox/) and [Radio](https://mantine.dev/core/radio/) components now support `outline` variant:

Outline indeterminate Checkbox

[HueSlider and AlphaSlider components](#hueslider-and-alphaslider-components)
-----------------------------------------------------------------------------

[HueSlider and AlphaSlider](https://mantine.dev/core/color-picker/) components were added back:

  

[Button loading state animation](#button-loading-state-animation)
-----------------------------------------------------------------

[Button](https://mantine.dev/core/button/) component now has loading state animation:

[Drawer offset](#drawer-offset)
-------------------------------

[Drawer](https://mantine.dev/core/drawer/) now supports `offset` prop. It changes drawer offset from the edge of the viewport:

[z-index CSS variables](#z-index-css-variables)
-----------------------------------------------

You can now use Mantine z-index CSS variables:

*   `--mantine-z-index-app` – value `100`
*   `--mantine-z-index-modal` – value `200`
*   `--mantine-z-index-popover` – value `300`
*   `--mantine-z-index-overlay` – value `400`
*   `--mantine-z-index-max` – value `9999`

Example of using `--mantine-z-index-modal` variable:

[Improved dark color scheme colors](#improved-dark-color-scheme-colors)
-----------------------------------------------------------------------

`theme.colors.dark` colors were slightly changed to improve contrast and make it easier to read text. You can preview new colors on [this page](https://mantine.dev/theming/colors/#default-colors). New colors values are:

If you prefer old colors, change theme settings on `MantineProvider`:

[Documentation updates](#documentation-updates)
-----------------------------------------------

*   Schema-based validation with `@mantine/form` now has a [dedicated page](https://mantine.dev/form/schema-validation/). It includes more examples for basic, nested and list fields validation for each resolver.
*   [Autocomplete](https://mantine.dev/core/autocomplete/), [Select](https://mantine.dev/core/select/), [MultiSelect](https://mantine.dev/core/multi-select/) and [TagsInput](https://mantine.dev/core/tags-input/) now include new demos that show how to customize dropdown behavior and styles.
*   Example of using Mantine with disabled JavaScript was added to the [color schemes guide](https://mantine.dev/theming/color-schemes/#with-disabled-javascript).
*   [Pagination](https://mantine.dev/core/pagination/) now includes an additional example with chunked content handling.
*   A new section about dayjs localization with Next.js app router and server components has been added to the [dates getting started page](https://mantine.dev/dates/getting-started/#localization-and-server-components)
*   [Modals manager](https://mantine.dev/x/modals/#modal-props) now includes a guide on how to pass props down to the underlying [Modal](https://mantine.dev/core/modal/) component.
*   [Slider](https://mantine.dev/core/slider/) now has sections about decimal values and `minRange` prop.
*   You can now view all 200+ releases with release dates on the [all releases page](https://mantine.dev/changelog/all-releases/).

[Other changes](#other-changes)
-------------------------------

*   [use-hash](https://mantine.dev/hooks/use-hash/) hook now supports `getInitialValueInEffect: false` option to get initial value during state initialization.
*   New `useMantineColorScheme({ keepTransitions: true })` option allows keeping transitions when color scheme changes. Note that it is `false` by default.
*   All templates were migrated to [yarn v4](https://yarnpkg.com/blog/release/4.0) – this change significantly improves installation speed.
*   [TypographyStylesProvider](https://mantine.dev/core/typography-styles-provider/) now has styles for `<kbd />` element.
*   [MultiSelect](https://mantine.dev/core/multi-select/) and [TagsInput](https://mantine.dev/core/tags-input/) components now support `hiddenValuesDivider` prop. It allows customizing divider character between values in `value` prop of the hidden input.
*   [Grid](https://mantine.dev/core/grid/) component now supports `overflow` prop, which allows controlling `overflow` CSS property on the root element. It is `hidden` by default.
*   [Modal](https://mantine.dev/core/modal/) and [Drawer](https://mantine.dev/core/drawer/) components now support `removeScrollProps` prop. It allows configuring [react-remove-scroll](https://github.com/theKashey/react-remove-scroll).
*   [AppShell](https://mantine.dev/core/app-shell/) now supports `offsetScrollbars` prop. It determines whether scrollbars should be offset, it is `true` by default. The logic of scrollbars offset is controlled by [react-remove-scroll](https://github.com/theKashey/react-remove-scroll).
*   [Menu](https://mantine.dev/core/menu/) now supports `trigger="click-hover"` prop, to open menu both on click and on hover.
*   It is now possible to set `keepMounted` prop on [Tabs.Panel](https://mantine.dev/core/tabs/) components individually, not only on `Tabs` component.
*   [mantine-flagpack](https://mantinedev.github.io/mantine-flagpack/) has been migrated to support `7.x` versions of `@mantine/core`. To use it, update `mantine-flagpack` to `4.0.0`.
*   [vite-template](https://github.com/mantinedev/vite-template) was migrated from Jest to [Vitest](https://vitest.dev/).
*   The main [Mantine repository](https://github.com/mantinedev/mantine) was migrated to [yarn v4](https://yarnpkg.com/blog/release/4.0). The process of getting started locally [was changed](https://mantine.dev/contribute/#get-started-with-mantine-locally)
*   `@mantine/ds` package has been deprecated. You can use `@mantinex/mantine-logo` package to use `MantineLogo` component in your project.</content>
</page>

<page>
  <title>Version v7.2.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-2-0</url>
  <content>[Community templates](#community-templates)
-------------------------------------------

You are welcome to share your GitHub templates with the community. Community templates are featured on the [getting started](https://mantine.dev/getting-started/) page. You can find a guide on how to create and submit a template [here](https://help.mantine.dev/q/submit-template).

Examples of templates that you can submit:

*   Next.js pages router + MDX + Mantine blog template
*   Next.js app router + Mantine + styled-components template
*   Vite + Mantine + Emotion template

[NumberFormatter component](#numberformatter-component)
-------------------------------------------------------

New [NumberFormatter](https://mantine.dev/core/number-formatter/) component allows to format numbers with thousands separators, decimal separators, and custom number of decimal places. It supports the same formatting related props as [NumberInput](https://mantine.dev/core/number-input/) component.

[Form actions](#form-actions)
-----------------------------

`@mantine/form` package now exports `createFormActions` function that can be used to [change form state](https://mantine.dev/form/actions/) from anywhere in your application. The mechanism of form actions is similar to [notifications system](https://mantine.dev/x/notifications/), [modals manager](https://mantine.dev/x/modals/) and other similar packages.

To use form actions, set `name` property in [use-form](https://mantine.dev/form/use-form/) settings:

Then call `createFormActions` function with the same form name as specified in `useForm` settings:

After that, you can use `demoFormActions` to change form state from anywhere in your application. For example, after a fetch request or after a user interaction with a component that does not have access to the form state:

[Table data prop](#table-data-prop)
-----------------------------------

[Table](https://mantine.dev/core/table/) component now supports `data` prop which can be used to generate table rows from given data:

Some elements from periodic table
| Element position | Atomic mass | Symbol | Element name |
| --- | --- | --- | --- |
| 6 | 12.011 | C | Carbon |
| 7 | 14.007 | N | Nitrogen |
| 39 | 88.906 | Y | Yttrium |
| 56 | 137.33 | Ba | Barium |
| 58 | 140.12 | Ce | Cerium |

[Table sticky header](#table-sticky-header)
-------------------------------------------

[Table](https://mantine.dev/core/table/) component now supports `stickyHeader` prop, which can be used to make the table header stick to the top of the table:

| Element position | Element name | Symbol | Atomic mass |
| --- | --- | --- | --- |
| 6 | Carbon | C | 12.011 |
| 7 | Nitrogen | N | 14.007 |
| 39 | Yttrium | Y | 88.906 |
| 56 | Barium | Ba | 137.33 |
| 58 | Cerium | Ce | 140.12 |Scroll page to see sticky thead

[Usage with Sass](#usage-with-sass)
-----------------------------------

It is now possible to use Mantine with [Sass](https://sass-lang.com/). You can find documentation on [this page](https://mantine.dev/styles/sass/). Note that it is still required to set up [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/) in order for all functions to work properly. Sass can be used as a replacement for [CSS modules](https://mantine.dev/styles/css-modules/) – it supports all features that CSS modules support.

You can find examples of Mantine + Sass usage in separate branches of templates:

*   [Next.js app router + Sass example](https://github.com/mantinedev/next-app-template/tree/sass)
*   [Vite + Sass example](https://github.com/mantinedev/vite-template/tree/sass)

[Inline loaders](#inline-loaders)
---------------------------------

[Loader](https://mantine.dev/core/loader/) component now supports `children` prop. The prop allows overriding the default loader with any React node. It is useful in components that support `loaderProps` ([Button](https://mantine.dev/core/button/), [LoadingOverlay](https://mantine.dev/core/loading-overlay/), [Dropzone](https://mantine.dev/x/dropzone/), etc.) – with `loaderProps.children` you can now display any React node instead of the loader.

[lightHidden and darkHidden props](#lighthidden-and-darkhidden-props)
---------------------------------------------------------------------

All Mantine components now support `lightHidden` and `darkHidden` props that can be used to hide components in a specific color scheme:

[light-root and dark-root mixins](#light-root-and-dark-root-mixins)
-------------------------------------------------------------------

New `light-root` and `dark-root` mixins were added to [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/). These mixins can be used to add color scheme specific styles to the `:root`/`html` element. Note that to use these mixins, you need to update `postcss-preset-mantine` to `1.9.0` or higher.

[Documentation updates](#documentation-updates)
-----------------------------------------------

*   New [Styles overview](https://mantine.dev/styles/styles-overview/) guide
*   New [Usage with Sass](https://mantine.dev/styles/sass/) guide
*   [Storybook guide](https://mantine.dev/guides/storybook/) was updated to use new [@storybook/addon-styling-webpack](https://storybook.js.org/addons/@storybook/addon-styling-webpack) with separate instructions for Vite and other frameworks
*   [CSS modules](https://mantine.dev/styles/css-modules/) guide now includes new section about global class names reference with `:global` selector
*   [Getting started](https://mantine.dev/getting-started/#set-up-vs-code) guide now includes new section about setting up VS Code with [PostCSS Language Support](https://marketplace.visualstudio.com/items?itemName=csstools.postcss) and [CSS Variable Autocomplete](https://marketplace.visualstudio.com/items?itemName=vunguyentuan.vscode-css-variables) extensions
*   [Popover](https://mantine.dev/core/popover/#nested-popovers) documentation now includes a guide on how to use nested popovers
*   [AspectRatio](https://mantine.dev/core/aspect-ratio/) documentation now includes a guide on how to use it in flexbox containers
*   Additional [AppShell.Section](https://mantine.dev/core/app-shell/) documentation was added
*   8 new [Checkbox](https://mantine.dev/core/checkbox/) examples and demos were added

[Other changes](#other-changes)
-------------------------------

*   [Dropzone](https://mantine.dev/x/dropzone/) now supports `loaderProps` prop to pass props down to the [Loader](https://mantine.dev/core/loader/) component
*   [theme.variantColorResolver](https://mantine.dev/theming/colors/#colors-variant-resolver) now supports `hoverColor` prop, which allows controlling `color` property when the component is hovered. New property is supported in [Button](https://mantine.dev/core/button/) and [ActionIcon](https://mantine.dev/core/action-icon/) components.
*   [Flex](https://mantine.dev/core/flex/) is now a [polymorphic](https://mantine.dev/guides/polymorphic/) component – it accepts `renderRoot` and `component` props
*   [Checkbox](https://mantine.dev/core/checkbox/) root element now has `data-checked` attribute when the checkbox is checked
*   [Checkbox](https://mantine.dev/core/checkbox/) and [Radio](https://mantine.dev/core/radio/) components now support changing icon color with `iconColor` prop
*   [use-form](https://mantine.dev/form/use-form/) now supports `onValuesChange` option which can be used to sync form values with external state</content>
</page>

<page>
  <title>Version v7.1.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-1-0</url>
  <content>[CSS layers](#css-layers)
-------------------------

Starting from 7.1.0 it is possible to import all `@mantine/*` packages styles with rules defined in `mantine` [CSS layer](https://developer.mozilla.org/en-US/docs/Web/CSS/@layer). CSS rules within a layer are grouped together and applied before rules without a layer. This means that even if you do not have control over styles import order, you can still override Mantine styles with regular styles.

You can import styles within a layer by importing `@mantine/*/styles.layer.css` files. Note that these files are a full replacement for `@mantine/*/styles.css` files – you should not import both of them.

CSS layers are also useful if you want to combine Mantine components with other libraries which also provide styles. You can use `@layer` directive to control the order of styles:

In this example, Mantine styles will take precedence over other library `base` styles, but other library `components` styles will take precedence over Mantine component styles.

As of September 2023, CSS layers are supported in all modern browsers and have [90% browser support](https://caniuse.com/css-cascade-layers).

[renderRoot prop](#renderroot-prop)
-----------------------------------

All [polymorphic](https://mantine.dev/guides/polymorphic/) components now support `renderRoot` prop, which is an alternative to `component` prop. `renderRoot` prop allows changing the root element to any other component or HTML tag with a callback function. It can be used in cases when `component` prop is not flexible enough:

*   Target component props are incompatible with Mantine component. For example, [Button](https://mantine.dev/core/button/) component expects `className` to be a string, but [react-router-dom NavLink](https://reactrouter.com/en/6.16.0/components/nav-link) expects `className` to be a function.
*   Target component is a generic – it either accepts type as a parameter or its type changes depending on its props. Examples: [typed Next.js Link](https://nextjs.org/docs/app/building-your-application/configuring/typescript#statically-typed-links), [TanStack router Link](https://tanstack.com/router/v1)

`renderRoot` example with [react-router-dom NavLink](https://reactrouter.com/en/6.16.0/components/nav-link):

`renderRoot` example with [typed Next.js Link](https://nextjs.org/docs/app/building-your-application/configuring/typescript#statically-typed-links):

[Improved ESM support](#improved-esm-support)
---------------------------------------------

All `@mantine/*` packages now have improved ESM support:

*   Files in `esm` folder now have `.mjs` extension
*   You can use `@mantine/*` packages with `type: module` in `package.json` without any additional configuration
*   Tree shaking was improved for some bundlers

[CSS variables in style prop](#css-variables-in-style-prop)
-----------------------------------------------------------

It is now possible to define CSS variables in `style` prop in all Mantine components – [style](https://mantine.dev/styles/style/) prop is no longer restricted by `React.CSSProperties` type:

[form.setInitialValues](#formsetinitialvalues)
----------------------------------------------

[@mantine/form](https://mantine.dev/form/values/#setinitialvalues-handler) now supports `form.setInitialValues` method which allows updating initial values after the form was initialized. This method is useful when you want to update values that are used in `form.reset` and to compare values for dirty fields state:</content>
</page>

<page>
  <title>AppShell | Mantine</title>
  <url>https://mantine.dev/core/app-shell/</url>
  <content>[Examples](#examples)
---------------------

This page includes only documentation. Since all associated `AppShell` components have fixed position, it is not possible to include demos on this page.

[Open AppShell examples page](https://mantine.dev/app-shell?e=BasicAppShell)

[Usage](#usage)
---------------

`AppShell` is a layout component. It can be used to implement a common Header – Navbar – Footer – Aside layout pattern. All `AppShell` components have `position: fixed` style – they are not scrolled with the page.

[Basic AppShell example](https://mantine.dev/app-shell/?e=BasicAppShell) with header and navbar. Navbar is hidden on mobile by default and toggled with the burger button.

[AppShell components](#appshell-components)
-------------------------------------------

*   `AppShell` – root component, it is required to wrap all other components, used to configure layout properties
*   `AppShell.Header` – header section rendered at the top of the page, has fixed position, its height and collapsed state are controlled by the AppShell `header` prop
*   `AppShell.Navbar` – navbar section rendered at the left side of the page, has fixed position, its width and collapsed state are controlled by the AppShell `navbar` prop
*   `AppShell.Aside` – aside section rendered at the right side of the page, has fixed position, its width and collapsed state are controlled by the AppShell `aside` prop
*   `AppShell.Footer` – footer section rendered at the bottom of the page, has fixed position, its height and collapsed state are controlled by the AppShell `footer` prop
*   `AppShell.Main` – main section rendered at the center of the page, has static position, all other sections are offset by its padding
*   `AppShell.Section` – utility component that can be used to render group of content inside `AppShell.Navbar` and `AppShell.Aside`, can be used to create areas with custom scrollbars

[Configuration](#configuration)
-------------------------------

`AppShell` component accepts, `header`, `footer`, `navbar` and `aside` props to configure corresponding sections. It is required to set these props if you want to use corresponding components. For example, if you want to use `AppShell.Header` component, you need to set `header` prop on the `AppShell` component.

`header` and `footer` configuration objects are the same and have the following properties:

`navbar` and `aside` configuration objects are the same as well and have the following properties:

[layout prop](#layout-prop)
---------------------------

`layout` prop controls how `AppShell.Header`/`AppShell.Footer` and `AppShell.Navbar`/`AppShell.Aside` are positioned relative to each other. It accepts `alt` and `default` values:

*   `alt` – `AppShell.Navbar`/`AppShell.Aside` height is equal to viewport height, `AppShell.Header`/`AppShell.Footer` width is equal to viewport width - `AppShell.Navbar` and `AppShell.Aside` width ([example](https://mantine.dev/app-shell/?e=AltLayout))
*   `default` – `AppShell.Navbar`/`AppShell.Aside` height is equal to viewport height - `AppShell.Header`/`AppShell.Footer` height, `AppShell.Header`/`AppShell.Footer` width is equal to viewport width ([example](https://mantine.dev/app-shell/?e=FullLayout))

[Height configuration](#height-configuration)
---------------------------------------------

`height` property in `header` and `footer` configuration objects works the following way:

*   If you pass a number, the value will be converted to [rem](https://mantine.dev/styles/rem/) and used as height at all viewport sizes.
*   To change height based on viewport width, use object with breakpoints as keys and height as values. It works the same way as [style props](https://mantine.dev/styles/style-props/#responsive-styles).

Examples:

[Width configuration](#width-configuration)
-------------------------------------------

`width` property in `navbar` and `aside` configuration objects works the following way:

*   If you pass a number, the value will be converted to [rem](https://mantine.dev/styles/rem/) and used as width when the viewport is larger than `breakpoint`.
*   To change width based on viewport width, use object with breakpoints as keys and width as values. It works the same way as [style props](https://mantine.dev/styles/style-props/#responsive-styles). Note that width is always 100% when the viewport is smaller than `breakpoint`.

Examples:

[padding prop](#padding-prop)
-----------------------------

`padding` prop controls the padding of the `AppShell.Main` component. It is important to use it instead of setting padding on the `AppShell.Main` directly because padding of the `AppShell.Main` is also used to offset `AppShell.Header`, `AppShell.Navbar`, `AppShell.Aside` and `AppShell.Footer` components.

`padding` prop works the same way as [style props](https://mantine.dev/styles/style-props/#responsive-styles) and accepts numbers, strings and objects with breakpoints as keys and padding as values. You can reference `theme.spacing` values or use any valid CSS values.

[Header offset configuration](#header-offset-configuration)
-----------------------------------------------------------

`header` prop has `offset` property which allows removing `AppShell.Header` offset from `AppShell.Main` component. It is useful when you want to collapse `AppShell.Header` based on the scroll position. For example, you can use [use-headroom](https://mantine.dev/hooks/use-headroom/) hook to collapse header when user scrolls down and expand it when user scrolls up ([example](https://mantine.dev/app-shell/?e=Headroom)).

[Collapsed navbar/aside configuration](#collapsed-navbaraside-configuration)
----------------------------------------------------------------------------

`navbar` and `aside` props have `collapsed` property. The property accepts an object `{ mobile: boolean; desktop: boolean }` which allows to configure collapsed state depending on the viewport width.

[Example](https://mantine.dev/app-shell/?e=CollapseDesktop) with separate collapsed state for mobile and desktop:

[withBorder prop](#withborder-prop)
-----------------------------------

`withBorder` prop is available on `AppShell` and associated sections: `AppShell.Header`, `AppShell.Navbar`, `AppShell.Aside` and `AppShell.Footer`. By default, `withBorder` prop is `true` – all components have a border on the side that is adjacent to the `AppShell.Main` component. For example, `AppShell.Header` is located at the top of the page – it has a border on the bottom side, `AppShell.Navbar` is located on the left side of the page – it has a border on the right side.

To remove the border from all components, set `withBorder={false}` on the `AppShell`:

To remove the border from a specific component, set `withBorder={false}` on that component:

[zIndex prop](#zindex-prop)
---------------------------

`zIndex` prop is available on `AppShell` and associated sections: `AppShell.Header`, `AppShell.Navbar`, `AppShell.Aside` and `AppShell.Footer`. By default, all sections `z-index` is `100`.

To change `z-index` of all sections, set `zIndex` prop on the `AppShell`:

To change `z-index` of a specific section, set `zIndex` prop on that section:

[Control transitions](#control-transitions)
-------------------------------------------

Set `transitionDuration` and `transitionTimingFunction` props on the `AppShell` to control transitions:

[disabled prop](#disabled-prop)
-------------------------------

Set `disabled` prop on the `AppShell` to prevent all sections except `AppShell.Main` from rendering. It is useful when you want to hide the shell on some pages of your application.

[AppShell.Section component](#appshellsection-component)
--------------------------------------------------------

`AppShell.Section` component can be used to create scrollable areas inside `AppShell.Navbar` and `AppShell.Aside`. Root elements of `AppShell.Navbar` and `AppShell.Aside` are flexbox containers with `flex-direction: column`, `AppShell.Section` with `grow` attribute will take all available space and will be scrollable if `component={ScrollArea}` is set.

In the following example:

*   First and last sections (header and footer) will take as much space as they need to render `children`
*   Second section will take all available space and will be scrollable if content height exceeds available space

[Semantic elements](#semantic-elements)
---------------------------------------

*   `AppShell.Header` root element is `header`
*   `AppShell.Navbar` root element is `nav`
*   `AppShell.Aside` root element is `aside`
*   `AppShell.Footer` root element is `footer`
*   `AppShell.Main` root element is `main` – **!important:** do not use `main` element inside `AppShell.Main` component

[CSS variables](#css-variables)
-------------------------------

You can use the following CSS variables in all components used inside `AppShell`:

*   `--app-shell-navbar-width` – width of the `AppShell.Navbar`
*   `--app-shell-navbar-offset` – offset of the `AppShell.Navbar`
*   `--app-shell-aside-width` – width of the `AppShell.Aside`
*   `--app-shell-aside-offset` – offset of the `AppShell.Aside`
*   `--app-shell-header-height` – height of the `AppShell.Header`
*   `--app-shell-header-offset` – offset of the `AppShell.Header`
*   `--app-shell-footer-height` – height of the `AppShell.Footer`
*   `--app-shell-footer-offset` – offset of the `AppShell.Footer`

Example of using CSS variables in styles:</content>
</page>

<page>
  <title>Version v7.0.0 | Mantine</title>
  <url>https://mantine.dev/changelog/7-0-0</url>
  <content>[Migration to native CSS](#migration-to-native-css)
---------------------------------------------------

Mantine no longer depends on [Emotion](https://emotion.sh/) for styles generation. All `@mantine/*` packages are now shipped with native CSS files which can be imported from `@mantine/{package}/styles.css`, for example:

This change improves performance, reduces bundle size of the library and allows using Mantine in environments where CSS-in-JS is not supported (or supported with limitations), for example, Next.js app directory.

Important breaking changes:

*   `createStyles` function is no longer available, use [CSS modules](https://mantine.dev/styles/css-modules/) or any other styling solution of your choice instead
*   Components no longer support `sx` prop. You can use `className` or `style` props instead.
*   `styles` prop no longer supports nested selectors

It is now recommended to use [CSS modules](https://mantine.dev/styles/css-modules/) to style Mantine components. To update your project to [CSS modules](https://mantine.dev/styles/css-modules/), follow the [6.x → 7.x migration guide](https://mantine.dev/guides/6x-to-7x/).

[Vanilla extract integration](#vanilla-extract-integration)
-----------------------------------------------------------

If you prefer CSS-in-JS syntax for styling, you can use [Vanilla extract](https://mantine.dev/styles/vanilla-extract/) as a TypeScript CSS preprocessor. You will be able to use most of Mantine styling features with [Vanilla extract](https://mantine.dev/styles/vanilla-extract/).

[System color scheme support](#system-color-scheme-support)
-----------------------------------------------------------

All components now support system color scheme – when `colorScheme` value is `auto`, components will use `prefers-color-scheme` media query to determine if the user prefers light or dark color scheme.

Note that `auto` is not the default value. You need to set it manually to enable system color scheme support both on [MantineProvider](https://mantine.dev/theming/mantine-provider/) and in [ColorSchemeScript](https://mantine.dev/theming/color-schemes/#colorschemescript):

[Built-in color scheme manager](#built-in-color-scheme-manager)
---------------------------------------------------------------

[MantineProvider](https://mantine.dev/theming/mantine-provider/) now comes with a built-in color scheme manager. It is no longer required to use any other components to set up color scheme logic. Color scheme can be changed with [useMantineColorScheme hook](https://mantine.dev/theming/color-schemes/#use-mantine-color-scheme-hook):

[CSS modules and PostCSS preset](#css-modules-and-postcss-preset)
-----------------------------------------------------------------

[CSS modules](https://mantine.dev/styles/css-modules/) is now the recommended way to style Mantine components, although it is not required – you can choose any other styling solution of your choice.

It is also recommended to use [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/). It includes mixins and functions to simplify styling of Mantine components. [postcss-preset-mantine](https://mantine.dev/styles/postcss-preset/) is included in all templates.

[Global styles](#global-styles)
-------------------------------

Mantine no longer includes normalize.css. Instead, it uses a bare minimum set of [global styles](https://mantine.dev/styles/global-styles/). These styles are part of the `@mantine/core` package and are applied automatically when you import `@mantine/core/styles.css` in your application. Note that these styles cannot be decoupled from the rest of the library.

[Mantine as a headless UI library](#mantine-as-a-headless-ui-library)
---------------------------------------------------------------------

You can now use Mantine as a [headless](https://mantine.dev/styles/unstyled/) library. To achieve that, just do not import `@mantine/*/styles.css` in your application. Then you will be able to apply styles with [Styles API](https://mantine.dev/styles/styles-api/).

[createTheme function](#createtheme-function)
---------------------------------------------

`createTheme` function is a replacement for `MantineThemeOverride` type. Use it to create a theme override, it will give you autocomplete for all theme properties:

[Components extend functions](#components-extend-functions)
-----------------------------------------------------------

All components that support [default props](https://mantine.dev/theming/default-props/) or [Styles API](https://mantine.dev/styles/styles-api/) now have a static `extend` function which allows getting autocomplete when customizing [defaultProps](https://mantine.dev/theming/default-props/), [classNames and styles](https://mantine.dev/styles/styles-api/) of the component on [theme](https://mantine.dev/theming/theme-object/):

[classNames based on component props](#classnames-based-on-component-props)
---------------------------------------------------------------------------

You can now get component props in [classNames and styles](https://mantine.dev/styles/styles-api/) to conditionally apply styles. This feature is a more powerful replacement for styles params.

[Components CSS variables](#components-css-variables)
-----------------------------------------------------

You can now customize components [CSS variables](https://mantine.dev/styles/styles-api/) to change component styles based on its props. For example, it can be used to add new [sizes](https://mantine.dev/styles/variants-sizes/):

[New variants system](#new-variants-system)
-------------------------------------------

All components now have `data-variant` attribute on the root element, even if the component does not have any predefined variants. You can use it to apply styles to all components of the same type on [theme](https://mantine.dev/theming/theme-object/):

[New sizes system](#new-sizes-system)
-------------------------------------

There are multiple ways to customize component sizes:

*   With `data-size` attribute
*   With component [CSS variables](https://mantine.dev/styles/styles-api/)
*   With [static CSS variables](https://mantine.dev/styles/variants-sizes/#sizes-with-static-css-variables)

Example of customizing [Button](https://mantine.dev/core/button/) size with `data-size` attribute:

[theme.variantColorResolver](#themevariantcolorresolver)
--------------------------------------------------------

[Button](https://mantine.dev/core/button/), [Badge](https://mantine.dev/core/badge/), [ActionIcon](https://mantine.dev/core/action-icon/), [ThemeIcon](https://mantine.dev/core/theme-icon/) and other components now support custom variants with [variantColorResolver](https://mantine.dev/theming/colors/#colors-variant-resolver) – it supports both changing colors of existing variants and adding new variants.

[rem units scaling](#rem-units-scaling)
---------------------------------------

It is now possible to scale [rem](https://mantine.dev/styles/rem/#rem-units-scaling) units. It is useful when you want to change font-size of `html`/`:root` element and preserve Mantine components sizes. For example, if you would like to set `html` font-size to `10px` and scale Mantine components accordingly, you need to set `scale` to `1 / (10 / 16)` (16 – default font-size) = `1 / 0.625` = `1.6`:

[color prop improvements](#color-prop-improvements)
---------------------------------------------------

All components that support `color` prop now support the following color values:

*   Key of `theme.colors`, for example, `blue`
*   `theme.colors` index reference, for example, `blue.5`
*   Any valid CSS color value, for example, `#fff`, `rgba(0, 0, 0, 0.5)`, `hsl(0, 0%, 100%)`

Filled variant

Light variant

Outline variant

[Components classes](#components-classes)
-----------------------------------------

Classes of each component are now available in `Component.classes` object. For example, you can find [Button](https://mantine.dev/core/button/) classes in `Button.classes`:

You can use these classes to create components with the same styles as Mantine components:

[Theme object changes](#theme-object-changes)
---------------------------------------------

*   `theme.lineHeight` is now `theme.lineHeights` – it is now possible to specify multiple line heights. `theme.lineHeights` values are used in the [Text](https://mantine.dev/core/text/) component.
*   `theme.colorScheme` is no longer available, use [useMantineColorScheme](https://mantine.dev/theming/color-schemes/#use-mantine-color-scheme-hook) to get color scheme value
*   `theme.dir` is no longer needed, direction is now managed by [DirectionProvider](https://mantine.dev/styles/rtl/)
*   `theme.loader` was removed, you can now configure default loader with [default props](https://mantine.dev/theming/default-props/) of [Loader](https://mantine.dev/core/loader/) component
*   `theme.transitionTimingFunction` was removed
*   `theme.focusRingStyles` was replaced with `theme.focusClassName`
*   `theme.activeStyles` was replaced with `theme.activeClassName`
*   `theme.globalStyles` was removed
*   `theme.fn` functions were removed, some of the functions are available as [standalone utilities](https://mantine.dev/styles/color-functions/)
*   New [theme.scale](https://mantine.dev/styles/rem/#rem-units-scaling) property controls rem units scaling
*   New `theme.fontSmoothing` property determines whether font smoothing styles should be applied to the body element
*   New [theme.variantColorResolver](https://mantine.dev/theming/colors/#colors-variant-resolver) property allows customizing component colors per variant

[Colors generator](#colors-generator)
-------------------------------------

New [@mantine/colors-generator](https://mantine.dev/theming/colors/#colors-generation) package is now available to generate color palettes based on single color value. It is also available as [online tool](https://mantine.dev/colors-generator/). Note that it is usually better to generate colors in advance to avoid contrast issues.

[New setup for RTL](#new-setup-for-rtl)
---------------------------------------

`@mantine/core` package now exports [DirectionProvider](https://mantine.dev/styles/rtl/) component, which should be used to configure the direction of the application. `useDirection` hook can be used to toggle direction. All components now include RTL styles by default, it is no longer required to set up additional plugins. See [RTL documentation](https://mantine.dev/styles/rtl/) to learn more.

[React 18+ only](#react-18-only)
--------------------------------

Starting from version 7.0 Mantine no longer supports older React versions. The minimum supported version is now React 18. It is required because Mantine components now use [useId](https://react.dev/reference/react/useId) and [useSyncExternalStore](https://react.dev/reference/react/useSyncExternalStore) hooks, which are available only in React 18.

[left and right section](#left-and-right-section)
-------------------------------------------------

Components that previously had `rightSection` and `icon` props, now use `leftSection` instead of `icon`. Example of [Button](https://mantine.dev/core/button/) sections:

[NumberInput changes](#numberinput-changes)
-------------------------------------------

[NumberInput](https://mantine.dev/core/number-input/) was migrated to [react-number-format](https://s-yadav.github.io/react-number-format/). It now supports more features and has improvements in cursor position management. Due to migration, some of the props were renamed – follow the [documentation](https://mantine.dev/core/number-input/) to learn about the changes.

[Loader changes](#loader-changes)
---------------------------------

[Loader](https://mantine.dev/core/loader/) component is now built with CSS only. This change improves performance and reduces HTML output of the component.

[Theme](https://mantine.dev/theming/theme-object/) object no longer supports `theme.loader` property – it is also now possible to add custom loaders on [theme](https://mantine.dev/theming/theme-object/) with [default props](https://mantine.dev/theming/default-props/). Specified [Loader](https://mantine.dev/core/loader/) will be used in all components that use it under the hood ([LoadingOverlay](https://mantine.dev/core/loading-overlay/), [Button](https://mantine.dev/core/button/), [ActionIcon](https://mantine.dev/core/action-icon/), [Stepper](https://mantine.dev/core/stepper/), etc.).

[Progress changes](#progress-changes)
-------------------------------------

[Progress](https://mantine.dev/core/progress/) component now supports compound components pattern. Advanced features that were previously implemented in [Progress](https://mantine.dev/core/progress/) are now supposed to be implemented with compound components instead.

[Table changes](#table-changes)
-------------------------------

[Table](https://mantine.dev/core/table/) component changes:

*   [Styles API](https://mantine.dev/styles/styles-api/) support
*   It is now required to use compound components instead of elements: `Table.Tr`, `Table.Td`, etc.
*   It is now easier to override styles – all styles are added with classes instead of deeply nested selectors on root element
*   New props: `borderColor`, `withRowBorders`, `stripedColor`, `highlightOnHoverColor`
*   `withBorder` prop was renamed to `withTableBorder`
*   `fontSize` prop was removed, use `fz` [style prop](https://mantine.dev/styles/style-props/) instead
*   New `Table.ScrollContainer` component to create scrollable table

| Element position | Element name | Symbol | Atomic mass |
| --- | --- | --- | --- |
| 6 | Carbon | C | 12.011 |
| 7 | Nitrogen | N | 14.007 |
| 39 | Yttrium | Y | 88.906 |
| 56 | Barium | Ba | 137.33 |
| 58 | Cerium | Ce | 140.12 |

[Group changes](#group-changes)
-------------------------------

[Group](https://mantine.dev/core/group/) component changes:

*   `position` prop was renamed to `justify` – it now supports all `justify-content` values
*   `noWrap` prop was replaced with `wrap="nowrap"`, `wrap` prop now supports all `flex-wrap` values
*   `spacing` prop was replaced with `gap`
*   `Group` now supports new `preventGrowOverflow` prop which allows customizing how group items will behave when they grow larger than their dedicated space

[Tabs changes](#tabs-changes)
-----------------------------

*   Styles API selector `tabsList` renamed to `list`
*   `TabProps` type was renamed to `TabsTabProps`
*   `onTabChange` prop was renamed to `onChange`
*   `Tabs.List` `position` prop was renamed to `justify`, it now supports all `justify-content` values

[Button changes](#button-changes)
---------------------------------

*   `compact` prop was removed, use `size="compact-XXX"` instead
*   `leftIcon` and `rightIcon` props were renamed to `leftSection` and `rightSection`
*   `uppercase` prop was removed, use `tt` [style prop](https://mantine.dev/styles/style-props/) instead
*   `loaderPosition` prop was removed, [Loader](https://mantine.dev/core/loader/) is now always rendered in the center to prevent layout shifts
*   Styles API selectors were changed, see [Button Styles API](https://mantine.dev/core/button/?t=styles-api) documentation for more details

[AppShell changes](#appshell-changes)
-------------------------------------

[AppShell](https://mantine.dev/core/app-shell/) component was completely rewritten, it now supports more features:

*   `AppShell` now uses compound components pattern: `Navbar`, `Aside`, `Header` and `Footer` are no longer exported from `@mantine/core` package. Instead, use `AppShell.Navbar`, `AppShell.Aside`, etc.
*   `AppShell` now supports animations when navbar/aside are opened/closed
*   Navbar/aside can now be collapsed on desktop – state is handled separately for mobile and desktop
*   Header/footer can now be collapsed the same way as navbar/aside. For example, the header can be collapsed based on scroll position or direction.
*   `AppShell` no longer supports `fixed` prop – all components have `position: fixed` styles, static positioning is no longer supported
*   The documentation was updated, it now includes [10+ examples on a separate page](https://mantine.dev/app-shell/?e=BasicAppShell)

[SimpleGrid changes](#simplegrid-changes)
-----------------------------------------

[SimpleGrid](https://mantine.dev/core/simple-grid/) now uses object format to define grid breakpoints and spacing, it works the same way as [style props](https://mantine.dev/styles/style-props/).

[Grid changes](#grid-changes)
-----------------------------

[Grid](https://mantine.dev/core/grid/) now uses object format in `gutter`, `offset`, `span` and order props, all props now work the same way as [style props](https://mantine.dev/styles/style-props/).

[Image changes](#image-changes)
-------------------------------

[Image](https://mantine.dev/core/image/) component changes:

*   `Image` component no longer includes `figure` and other associated elements
*   `caption` prop is no longer available
*   `width` and `height` props are replaced with `w` and `h` [style props](https://mantine.dev/styles/style-props/)
*   Placeholder functionality was replaced with fallback image

[Spotlight changes](#spotlight-changes)
---------------------------------------

[Spotlight](https://mantine.dev/x/spotlight/) changes:

*   The logic is no longer based on React context
*   `SpotlightProvider` was renamed to `Spotlight`
*   `useSpotlight` hook was removed, use `spotlight` object instead
*   `actions` prop now uses a different data format
*   It is now possible to have multiple spotlights in the same app
*   `Spotlight` component now uses compound components pattern for advanced customization

[Carousel changes](#carousel-changes)
-------------------------------------

[Carousel](https://mantine.dev/x/carousel/) now uses object format for responsive values in `slideSize` and `slideGap` props instead of `breakpoints` prop:

[@mantine/prism deprecation](#mantineprism-deprecation)
-------------------------------------------------------

`@mantine/prism` package was deprecated in favor of `@mantine/code-highlight` package. [The new package](https://mantine.dev/x/code-highlight/) uses [highlight.js](https://highlightjs.org/) instead of [Prism](https://prismjs.com/).

[Fieldset component](#fieldset-component)
-----------------------------------------

New [Fieldset](https://mantine.dev/core/fieldset/) component:

[Combobox component](#combobox-component)
-----------------------------------------

The new [Combobox](https://mantine.dev/core/combobox/) component allows building custom select, autocomplete, tags input, multiselect and other similar components. It is used as a base for updated [Autocomplete](https://mantine.dev/core/autocomplete/), [Select](https://mantine.dev/core/select/), [TagsInput](https://mantine.dev/core/tags-input/) and [MultiSelect](https://mantine.dev/core/multi-select/) components.

[Combobox](https://mantine.dev/core/combobox/) is very flexible and allows you to have full control over the component rendering and logic. Advanced features that were previously implemented in [Autocomplete](https://mantine.dev/core/autocomplete/), [Select](https://mantine.dev/core/select/) and [MultiSelect](https://mantine.dev/core/multi-select/) are now supposed to be implemented with [Combobox](https://mantine.dev/core/combobox/) instead.

You can find 50+ `Combobox` examples on [this page](https://mantine.dev/combobox/).

[TagsInput component](#tagsinput-component)
-------------------------------------------

New [TagsInput](https://mantine.dev/core/tags-input/) component based on [Combobox](https://mantine.dev/core/combobox/) component. The component is similar to [MultiSelect](https://mantine.dev/core/multi-select/) but allows entering custom values.

[withErrorStyles prop](#witherrorstyles-prop)
---------------------------------------------

All inputs now support `withErrorStyles` prop, which allows removing error styles from the input. It can be used to apply custom error styles without override, or use other techniques to indicate error state. For example, it can be used to render an icon in the right section:

Error as react node

Something went wrong

Without error styles on input

Something went wrong

[hiddenFrom and visibleFrom props](#hiddenfrom-and-visiblefrom-props)
---------------------------------------------------------------------

All Mantine components now support `hiddenFrom` and `visibleFrom` props. These props accept breakpoint (`xs`, `sm`, `md`, `lg`, `xl`) and hide the component when viewport width is less than or greater than the specified breakpoint:

[Other changes](#other-changes)
-------------------------------

*   New [VisuallyHidden](https://mantine.dev/core/visually-hidden/) component
*   New [ActionIcon.Group](https://mantine.dev/core/action-icon/#actionicongroup) component
*   All transitions are now disabled during color scheme change
*   `theme.respectReducedMotion` is now set to `false` by default – it caused a lot of confusion for users who did not know about it
*   [Notifications system](https://mantine.dev/x/notifications/) now exports `notifications.updateState` function to update notifications state with a given callback
*   [Blockquote](https://mantine.dev/core/blockquote/) component has new design
*   [Breadcrumbs](https://mantine.dev/core/breadcrumbs/) component now supports `separatorMargin` prop
*   [Tooltip](https://mantine.dev/core/tooltip/) component now supports `mainAxis` and `crossAxis` offset configuration
*   [Slider and RangeSlider](https://mantine.dev/core/slider/) components `radius` prop now affects thumb as well as track
*   [NativeSelect](https://mantine.dev/core/native-select/) component now supports setting options as `children` and options groups
*   [Anchor](https://mantine.dev/core/anchor/) component now supports `underline` prop which lets you configure how link will be underlined: `hover` (default), `always` or `never`
*   [Affix](https://mantine.dev/core/affix/) component no longer supports `target` prop, use `portalProps` instead
*   [Drawer](https://mantine.dev/core/drawer/) component no longer supports `target` prop, use `portalProps` instead: `portalProps={{ target: '.your-selector' }}`
*   [Container](https://mantine.dev/core/container/) component no longer supports `sizes` prop, use [CSS variables](https://mantine.dev/styles/styles-api/) to customize sizes on [theme](https://mantine.dev/theming/theme-object/) instead
*   `useComponentDefaultProps` hook was renamed to [useProps](https://mantine.dev/theming/default-props/#useprops-hook)
*   `withinPortal` prop is now true by default in all overlay components ([Popover](https://mantine.dev/core/popover/), [HoverCard](https://mantine.dev/core/hover-card/), [Tooltip](https://mantine.dev/core/tooltip/), etc.)
*   `AlphaSlider` and `HueSlider` components are no longer available, they can be used only as a part of [ColorPicker](https://mantine.dev/core/color-picker/)
*   [Text](https://mantine.dev/core/text/) default root element is now `<p />`
*   [Title](https://mantine.dev/core/title/) no longer supports all [Text](https://mantine.dev/core/text/) props, only [style props](https://mantine.dev/styles/style-props/) are available
*   `MediaQuery` component was removed – use [CSS modules](https://mantine.dev/styles/css-modules/) to apply responsive styles
*   [Highlight](https://mantine.dev/core/highlight/) component prop `highlightColor` was renamed to `color`
*   [Tooltip and Tooltip.Floating](https://mantine.dev/core/tooltip/) components no longer support `width` prop, use `w` [style prop](https://mantine.dev/styles/style-props/) instead
*   [Stack](https://mantine.dev/core/stack/) component `spacing` prop was renamed to `gap`
*   [Input](https://mantine.dev/core/input/) and other `Input` based components `icon` prop was renamed to `leftSection`
*   [Loader](https://mantine.dev/core/loader/) component `variant` prop was renamed to `type`
*   `@mantine/core` package no longer depends on [Radix UI ScrollArea](https://www.radix-ui.com/docs/primitives/components/scroll-area#scroll-area), [ScrollArea](https://mantine.dev/core/scroll-area/) component is now a native Mantine component – it reduces bundle size, allows setting CSP for styles and improves performance (all styles are now applied with classes instead of inline `<style />` tags)
*   [Overlay](https://mantine.dev/core/overlay/) `opacity` prop was renamed to `backgroundOpacity` to avoid collision with `opacity` [style prop](https://mantine.dev/styles/style-props/)
*   [Badge](https://mantine.dev/core/badge/) Styles API selectors were changed, see [Badge Styles API](https://mantine.dev/core/badge/?t=styles-api) documentation for more details
*   [Slider](https://mantine.dev/core/slider/) Styles API selectors were changed, see [Slider Styles API](https://mantine.dev/core/slider/?t=styles-api) documentation for more details
*   [Text](https://mantine.dev/core/text/) component no longer supports `underline`, `color`, `strikethrough`, `italic`, `transform`, `align` and `weight` prop – use [style props](https://mantine.dev/styles/style-props/) instead
*   [Portal](https://mantine.dev/core/portal/) component `innerRef` prop was renamed to `ref`
*   [ScrollArea](https://mantine.dev/core/scroll-area/) now supports `x` and `y` values in `offsetScrollbars` prop
*   `TransferList` component is no longer available as a part of `@mantine/core` package, instead you can implement it with [Combobox](https://mantine.dev/core/combobox/) component ([example](https://mantine.dev/combobox/?e=TransferList))
*   [Chip](https://mantine.dev/core/chip/) component now supports custom check icon
*   [PasswordInput](https://mantine.dev/core/password-input/) no longer supports `visibilityToggleLabel` and `toggleTabIndex` props, use `visibilityToggleButtonProps` prop instead
*   [Stepper](https://mantine.dev/core/stepper/) no longer supports `breakpoint` prop, you can apply responsive styles with Styles API
*   [ColorInput](https://mantine.dev/core/color-input/) no longer supports `dropdownZIndex`, `transitionProps`, `withinPortal`, `portalProps` and `shadow` props, you can now pass these props with `popoverProps` prop
*   [LoadingOverlay](https://mantine.dev/core/loading-overlay/) props are now grouped by the component they are passed down to: `overlayProps`, `loaderProps` and `transitionProps` now replace props that were previously passed to `LoadingOverlay` directly
*   [Dropzone](https://mantine.dev/x/dropzone/) component no longer supports `padding` prop, use `p` style prop instead
*   [Dialog](https://mantine.dev/core/dialog/) component now supports all [Paper](https://mantine.dev/core/paper/) and [Affix](https://mantine.dev/core/affix/) props, `transitionDuration`, `transition` and other transition related props were replaced with `transitionProps`
*   [Checkbox](https://mantine.dev/core/checkbox/), [Radio](https://mantine.dev/core/radio/), [Chip](https://mantine.dev/core/chip/) and [Switch](https://mantine.dev/core/switch/) components now support `rootRef` prop which allows using them with [Tooltip](https://mantine.dev/core/tooltip/) and other similar components
*   [Grid](https://mantine.dev/core/grid/) no longer has `overflow: hidden` styles by default, you can enable it by setting `overflow` prop to `hidden`</content>
</page>

<page>
  <title>Center | Mantine</title>
  <url>https://mantine.dev/core/center/</url>
  <content>[Usage](#usage)
---------------

All elements inside Center are centered

[Inline](#inline)
-----------------

To use `Center` with inline elements set `inline` prop. For example, you can center link icon and label:

[Polymorphic component](#polymorphic-component)
-----------------------------------------------

`Center` is a [polymorphic component](https://mantine.dev/guides/polymorphic/) – its default root element is `div`, but it can be changed to any other element or component with `component` prop:

> **Polymorphic components with TypeScript**
> 
> Note that polymorphic components props types are different from regular components – they do not extend HTML element props of the default element. For example, `CenterProps` does not extend `React.ComponentPropsWithoutRef'<'div'>'` although `div` is the default element.
> 
> If you want to create a wrapper for a polymorphic component that is not polymorphic (does not support `component` prop), then your component props interface should extend HTML element props, for example:
> 
> If you want your component to remain polymorphic after wrapping, use `createPolymorphicComponent` function described in [this guide](https://mantine.dev/guides/polymorphic/).</content>
</page>

<page>
  <title>Container | Mantine</title>
  <url>https://mantine.dev/core/container/</url>
  <content>[Usage](#usage)
---------------

`Container` centers content and limits its `max-width` to the value specified in `size` prop. Note that the `size` prop does not make `max-width` responsive, for example, when it set to `lg` it will always be `lg` regardless of screen size.

Default Container

xs Container

480px Container without padding

[Fluid](#fluid)
---------------

Set `fluid` prop to make container fluid, it will take 100% of available width, it is the same as setting `size="100%"`.

Fluid container has 100% max-width

[Customize sizes](#customize-sizes)
-----------------------------------

You can customize existing `Container` sizes and add new ones with [CSS variables](https://mantine.dev/styles/styles-api/) on [theme](https://mantine.dev/theming/theme-object/):

Container with custom size

[Responsive max-width](#responsive-max-width)
---------------------------------------------

To make `Container` `max-width` responsive, use [Styles API](https://mantine.dev/styles/styles-api/) to set `classNames`. For example, you can add `responsive` size that will make `Container` `max-width` different depending on screen size:

Container with responsive size</content>
</page>

<page>
  <title>Flex | Mantine</title>
  <url>https://mantine.dev/core/flex/</url>
  <content>[Usage](#usage)
---------------

[Supported props](#supported-props)
-----------------------------------

[Responsive props](#responsive-props)
-------------------------------------

`Flex` component props can have responsive values the same way as other [style props](https://mantine.dev/styles/style-props/):

[Difference from Group and Stack](#difference-from-group-and-stack)
-------------------------------------------------------------------

`Flex` component is an alternative to [Group](https://mantine.dev/core/group/) and [Stack](https://mantine.dev/core/stack/). `Flex` is more flexible, it allows creating both horizontal and vertical flexbox layouts, but requires more configuration. Unlike [Group](https://mantine.dev/core/group/) and [Stack](https://mantine.dev/core/stack/) `Flex` is [polymorphic](https://mantine.dev/guides/polymorphic/) and supports responsive props.

[Browser support](#browser-support)
-----------------------------------

`Flex` uses [flexbox gap](https://caniuse.com/flexbox-gap) to add spacing between children. In older browsers, `Flex` children may not have spacing. You can install PostCSS [flex-gap-polyfill](https://github.com/gavinmcfarland/flex-gap-polyfill) to add support for older browsers.</content>
</page>

<page>
  <title>Grid | Mantine</title>
  <url>https://mantine.dev/core/grid/</url>
  <content>[Usage](#usage)
---------------

[Columns span](#columns-span)
-----------------------------

`Grid.Col` `span` prop controls the ratio of column width to the total width of the row. By default, grid uses 12 columns layout, so `span` prop can be any number from 1 to 12.

Examples:

*   `<Grid.Col span={3} />` – 3 / 12 = 25% of row width
*   `<Grid.Col span={4} />` – 4 / 12 = 33% of row width
*   `<Grid.Col span={6} />` – 6 / 12 = 50% of row width
*   `<Grid.Col span={12} />` – 12 / 12 = 100% of row width

`span` prop also supports object syntax to change column width based on viewport width, it accepts `xs`, `sm`, `md`, `lg` and `xl` keys and values from 1 to 12. The syntax is the same as in [style props](https://mantine.dev/styles/style-props/).

In the following example `span={{ base: 12, md: 6, lg: 3 }}`:

*   `base` – 12 / 12 = 100% of row width when viewport width is less than `md` breakpoint
*   `md` – 6 / 12 = 50% of row width when viewport width is between `md` and `lg` breakpoints
*   `lg` – 3 / 12 = 25% of row width when viewport width is greater than `lg` breakpoint

[Gutter](#gutter)
-----------------

Set `gutter` prop to control spacing between columns. The prop works the same way as [style props](https://mantine.dev/styles/style-props/) – you can reference `theme.spacing` values with `xs`, `sm`, `md`, `lg` and `xl` strings and use object syntax to change gutter based on viewport width:

[Grow](#grow)
-------------

If `grow` prop is set, column will grow to fill the remaining space in the row:

[Column offset](#column-offset)
-------------------------------

Set `offset` prop on `Grid.Col` component to add gaps to the grid. `offset` prop supports the same syntax as `span` prop: a number from 1 to 12 or an object with `xs`, `sm`, `md`, `lg` and `xl` keys and values from 1 to 12.

[Order](#order)
---------------

Set the `order` prop on `Grid.Col` component to change the order of columns. `order` prop supports the same syntax as `span` prop: a number from 1 to 12 or an object with `xs`, `sm`, `md`, `lg` and `xl` keys and values from 1 to 12.

[Multiple rows](#multiple-rows)
-------------------------------

Once columns `span` and `offset` sum exceeds `columns` prop (12 by default), columns are moved to the next row:

[Justify and align](#justify-and-align)
---------------------------------------

You can control `justify-content` and `align-items` CSS properties with `justify` and `align` props on `Grid` component:

[Auto sized columns](#auto-sized-columns)
-----------------------------------------

All columns in a row with `span="auto"` grow as much as they can to fill the row. In the following example, the second column takes up 50% of the row while the other two columns automatically resize to fill the remaining space:

[Fit column content](#fit-column-content)
-----------------------------------------

If you set `span="content"`, the column's size will automatically adjust to match the width of its content:

[Change columns count](#change-columns-count)
---------------------------------------------

By default, grid uses 12 columns layout, you can change it by setting `columns` prop on `Grid` component. Note that in this case, columns span and offset will be calculated relative to this value.

In the following example, first column takes 50% with 12 span (12/24), second and third take 25% (6/24):

[Container queries](#container-queries)
---------------------------------------

To use [container queries](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment/Container_queries) instead of media queries, set `type="container"`. With container queries, all responsive values are adjusted based on the container width, not the viewport width.

Note that, when using container queries, it is also required to set `breakpoints` prop to the exact container width values.

To see how the grid changes, resize the root element of the demo with the resize handle located at the bottom right corner of the demo:

[overflow: hidden](#overflow-hidden)
------------------------------------

By default, `Grid` has `overflow: visible` style on the root element. In some cases you might want to change it to `overflow: hidden` to prevent negative margins from overflowing the grid container. For example, if you use `Grid` without parent container which has padding.</content>
</page>

<page>
  <title>Group | Mantine</title>
  <url>https://mantine.dev/core/group/</url>
  <content>[Usage](#usage)
---------------

`Group` is a horizontal flex container. If you need a vertical flex container, use [Stack](https://mantine.dev/core/stack/) component instead. If you need to have full control over flex container properties, use [Flex](https://mantine.dev/core/flex/) component.

[preventGrowOverflow](#preventgrowoverflow)
-------------------------------------------

`preventGrowOverflow` prop allows you to control how `Group` children should behave when there is not enough space to fit them all on one line. By default, children are not allowed to take more space than `(1 / children.length) * 100%` of parent width (`preventGrowOverflow` is set to `true`). To change this behavior, set `preventGrowOverflow` to `false` and children will be allowed to grow and take as much space as they need.

preventGrowOverflow: true – each child width is always limited to 33% of parent width (since there are 3 children)

preventGrowOverflow: false – children will grow based on their content, they can take more than 33% of parent width

[Group children](#group-children)
---------------------------------

**!important** `Group` works correctly only with React elements. Strings, numbers, fragments may have incorrect styles if `grow` prop is set:

[Browser support](#browser-support)
-----------------------------------

`Group` uses [flexbox gap](https://caniuse.com/flexbox-gap) to add spacing between children. In older browsers, `Group` children may not have spacing. You can install PostCSS [flex-gap-polyfill](https://github.com/gavinmcfarland/flex-gap-polyfill) to add support for older browsers.</content>
</page>

<page>
  <title>SimpleGrid | Mantine</title>
  <url>https://mantine.dev/core/simple-grid/</url>
  <content>[Usage](#usage)
---------------

`SimpleGrid` is a responsive grid system with equal-width columns. It uses CSS grid layout. If you need to set different widths for columns, use [Grid](https://mantine.dev/core/grid/) component instead.

[spacing and verticalSpacing props](#spacing-and-verticalspacing-props)
-----------------------------------------------------------------------

`spacing` prop is used both for horizontal and vertical spacing if `verticalSpacing` is not set:

[Responsive props](#responsive-props)
-------------------------------------

`cols`, `spacing` and `verticalSpacing` props support object notation for responsive values, it works the same way as [style props](https://mantine.dev/styles/style-props/): the object may have `base`, `xs`, `sm`, `md`, `lg` and `xl` key, and values from those keys will be applied according to current viewport width.

In the following example, `cols={{ base: 1, sm: 2, lg: 5 }}` means:

*   1 column if viewport width is less than `sm` breakpoint
*   2 columns if viewport width is between `sm` and `lg` breakpoints
*   5 columns if viewport width is greater than `lg` breakpoint

Same logic applies to `spacing` and `verticalSpacing` props.

[Container queries](#container-queries)
---------------------------------------

To use [container queries](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment/Container_queries) instead of media queries, set `type="container"`. With container queries, grid columns and spacing will be adjusted based on the container width, not the viewport width.

Note that, when using container queries, `cols`, `spacing` and `verticalSpacing` props cannot reference `theme.breakpoints` values in keys. It is required to use exact px or em values.

To see how the grid changes, resize the root element of the demo with the resize handle located at the bottom right corner of the demo:

[Browser support](#browser-support)
-----------------------------------

`SimpleGrid` uses [CSS Grid Layout](https://caniuse.com/css-grid), it is supported in all modern browsers. If you need to support older browsers, use [Grid](https://mantine.dev/core/grid/) (flexbox based) component instead.

When `type="container"` is set, `SimpleGrid` uses [container queries](https://caniuse.com/css-container-queries). Since February 2023, container queries are supported in all modern browsers. If you need to support older browsers, do not use container queries option.</content>
</page>

<page>
  <title>Space | Mantine</title>
  <url>https://mantine.dev/core/space/</url>
  <content>[Usage](#usage)
---------------

Use `Space` component to add horizontal or vertical spacing between elements:

    import { Text, Space } from '@mantine/core';
    
    function Demo() {
      return (
        <>
          <Text>First line</Text>
          <Space h="md" />
          <Text>Second line</Text>
        </>
      );
    }

  

    import { Text, Space } from '@mantine/core';
    
    function Demo() {
      return (
        <div style={{ display: 'flex' }}>
          <Text>First line</Text>
          <Space w="md" />
          <Text>Second line</Text>
        </div>
      );
    }

[Where to use](#where-to-use)
-----------------------------

In most cases, you would want to use margin props instead of `Space` when working with Mantine components:

    import { Space, Text } from '@mantine/core';
    
    // Space is not required as the same can be achieved with `mt` prop
    function Demo() {
      return (
        <>
          <Text>First line</Text>
          <Text mt="md">Second line</Text>
        </>
      );
    }

But when you work with regular HTML elements you do not have access to `theme.spacing` and you may want to use `Space` component to skip direct theme subscription:

    import { Space } from '@mantine/core';
    
    // Margin props are not available on div,
    // use Space to add spacing from theme
    function Demo() {
      return (
        <>
          <div>First line</div>
          <Space h="md" />
          <div>Second line</div>
        </>
      );
    }</content>
</page>

<page>
  <title>AspectRatio | Mantine</title>
  <url>https://mantine.dev/core/aspect-ratio/</url>
  <content>[Usage](#usage)
---------------

`AspectRatio` allows maintaining a consistent width/height ratio. It can be used to display images, maps, videos and other media.

    import { AspectRatio } from '@mantine/core';
    
    function Demo() {
      return (
        <AspectRatio ratio={1080 / 720} maw={300} mx="auto">
          <img
            src="https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/images/bg-5.png"
            alt="Panda"
          />
        </AspectRatio>
      );
    }

[Map embed](#map-embed)
-----------------------

    import { AspectRatio } from '@mantine/core';
    
    function Demo() {
      return (
        <AspectRatio ratio={16 / 9}>
          <iframe
            src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3025.3063874233135!2d-74.04668908358428!3d40.68924937933441!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x89c25090129c363d%3A0x40c6a5770d25022b!2sStatue%20of%20Liberty%20National%20Monument!5e0!3m2!1sen!2sru!4v1644262070010!5m2!1sen!2sru"
            title="Google map"
            style={{ border: 0 }}
          />
        </AspectRatio>
      );
    }

[Video embed](#video-embed)
---------------------------

    import { AspectRatio } from '@mantine/core';
    
    function Demo() {
      return (
        <AspectRatio ratio={16 / 9}>
          <iframe
            src="https://www.youtube.com/embed/mzJ4vCjSt28"
            title="YouTube video player"
            style={{ border: 0 }}
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowFullScreen
          />
        </AspectRatio>
      );
    }

[Inside flex container](#inside-flex-container)
-----------------------------------------------

By default, `AspectRatio` does not have fixed width and height, it will take as much space as possible in a regular container. To make it work inside flex container, you need to set `width` or `flex` property.

    import { AspectRatio, Image } from '@mantine/core';
    
    function Demo() {
      return (
        <div style={{ display: 'flex' }}>
          <AspectRatio ratio={1} flex="0 0 100px">
            <Image
              src="https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-6.png"
              alt="Avatar"
            />
          </AspectRatio>
        </div>
      );
    }</content>
</page>

<page>
  <title>Stack | Mantine</title>
  <url>https://mantine.dev/core/stack/</url>
  <content>[Usage](#usage)
---------------

`Stack` is a vertical flex container. If you need a horizontal flex container, use [Group](https://mantine.dev/core/group/) component instead. If you need to have full control over flex container properties, use [Flex](https://mantine.dev/core/flex/) component.

    import { Stack, Button } from '@mantine/core';
    function Demo() {
      return (
        <Stack
          h={300}
          bg="var(--mantine-color-body)"
          align="stretch"
          justify="center"
          gap="md"
        >
          <Button variant="default">1</Button>
          <Button variant="default">2</Button>
          <Button variant="default">3</Button>
        </Stack>
      );
    }

[Browser support](#browser-support)
-----------------------------------

`Stack` uses [flexbox gap](https://caniuse.com/flexbox-gap) to add spacing between children. In older browsers, `Stack` children may not have spacing. You can install PostCSS [flex-gap-polyfill](https://github.com/gavinmcfarland/flex-gap-polyfill) to add support for older browsers.</content>
</page>

<page>
  <title>AngleSlider | Mantine</title>
  <url>https://mantine.dev/core/angle-slider/</url>
  <content>[Usage](#usage)
---------------

Use `AngleSlider` component to pick angle value between 0 and 360:

[Controlled](#controlled)
-------------------------

[formatLabel](#formatlabel)
---------------------------

To change angle label format use `formatLabel` prop. It accepts function that takes the angle value and returns React node:

[Marks](#marks)
---------------

Set `marks` prop to display marks on the slider. In mark object `value` is required, `label` is optional. To restrict selection to marks only, set `restrictToMarks` prop:

[onChangeEnd](#onchangeend)
---------------------------

`onChangeEnd` callback is called when user the slider is stopped from being dragged or value is changed with keyboard. You can use it as a debounced callback to avoid too frequent updates.

Current value: 0

End value: 0

[Accessibility](#accessibility)
-------------------------------

`AngleSlider` is fully accessible and supports keyboard interactions:

*   `ArrowLeft`/`ArrowDown` and `ArrowRight`/`Arrowup` decrease/increase value by `step`
*   `Home` to set value to 0
*   `End` to set value to 359

To make the component visible to screen readers, set `aria-label` prop:</content>
</page>

<page>
  <title>Checkbox | Mantine</title>
  <url>https://mantine.dev/core/checkbox/</url>
  <content>[Usage](#usage)
---------------

I agree to sell my privacy

[Controlled](#controlled)
-------------------------

[States](#states)
-----------------

Outline indeterminate checkbox

Disabled checked checkbox

Disabled indeterminate checkbox

[Change icons](#change-icons)
-----------------------------

Custom icon: indeterminate

[Change icon color](#change-icon-color)
---------------------------------------

Use `iconColor` prop to change icon color. You can reference colors from `theme.colors` or use any valid CSS color:

[Indeterminate state](#indeterminate-state)
-------------------------------------------

`Checkbox` supports indeterminate state. When `indeterminate` prop is set, `checked` prop is ignored (checkbox always has checked styles):

Receive all notifications

Receive email notifications

Receive sms notifications

Receive push notifications

[Label with link](#label-with-link)
-----------------------------------

[Checkbox with tooltip](#checkbox-with-tooltip)
-----------------------------------------------

You can change target element to which tooltip is attached with `refProp`:

*   If `refProp` is not set, the tooltip is attached to the checkbox input
*   If `refProp="rootRef"` is set, the tooltip is attached to the root element (contains label, input and other elements)

Tooltip the entire element

[Pointer cursor](#pointer-cursor)
---------------------------------

By default, checkbox input and label have `cursor: default` (same as native `input[type="checkbox"]`). To change cursor to pointer, set `cursorType` on [theme](https://mantine.dev/theming/theme-object/):

[Add custom sizes](#add-custom-sizes)
-------------------------------------

You can add any number of custom sizes with [data-size](https://mantine.dev/styles/data-attributes/) attribute:

[Add props to the root element](#browser-support)
-------------------------------------------------

All props passed to the component are forwarded to the input element. If you need to add props to the root element, use `wrapperProps`. In the following example:

*   `data-testid="wrapper"` is added to the root element
*   `data-testid="input"` is added to the input element

[Checkbox.Group](#checkboxgroup)
--------------------------------

Select your favorite frameworks/libraries

This is anonymous

[Controlled Checkbox.Group](#controlled-checkboxgroup)
------------------------------------------------------

[Checkbox.Indicator](#checkboxindicator)
----------------------------------------

`Checkbox.Indicator` looks exactly the same as `Checkbox` component, but it does not have any semantic meaning, it's just a visual representation of checkbox state. You can use it in any place where you need to display checkbox state without any interaction related to the indicator. For example, it is useful in cards based on buttons, trees, etc.

Note that `Checkbox.Indicator` cannot be focused or selected with keyboard. It is not accessible and should not be used as a replacement for `Checkbox` component.

[Checkbox.Card component](#checkboxcard-component)
--------------------------------------------------

`Checkbox.Card` component can be used as a replacement for `Checkbox` to build custom cards/buttons/other things that work as checkboxes. The root element of the component has `role="checkbox"` attribute, it is accessible by default and supports the same keyboard interactions as `input[type="checkbox"]`.

You can use `Checkbox.Card` with `Checkbox.Group` the same way as `Checkbox` component:

Pick packages to install

Choose all packages that you will need in your application

CurrentValue: –

[Get element ref](#get-element-ref)
-----------------------------------

[Styles API](#styles-api)
-------------------------

`Checkbox` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Checkbox

Checkbox description

Checkbox error

Component Styles API

Hover over selectors to highlight corresponding elements

[Example: Table with row selection](#example-table-with-row-selection)
----------------------------------------------------------------------

|  | Element position | Element name | Symbol | Atomic mass |
| --- | --- | --- | --- | --- |
|  | 6 | Carbon | C | 12.011 |
|  | 7 | Nitrogen | N | 14.007 |
|  | 39 | Yttrium | Y | 88.906 |
|  | 56 | Barium | Ba | 137.33 |
|  | 58 | Cerium | Ce | 140.12 |

[Example: Customize with Styles API](#example-customize-with-styles-api)
------------------------------------------------------------------------

[Accessibility](#accessibility)
-------------------------------

Set `aria-label` or `label` prop to make the checkbox accessible:</content>
</page>

<page>
  <title>Chip | Mantine</title>
  <url>https://mantine.dev/core/chip/</url>
  <content>[Usage](#usage)
---------------

[Controlled](#controlled)
-------------------------

[Change checked icon](#change-checked-icon)
-------------------------------------------

[States](#states)
-----------------

Outline default

Outline checked

Outline checked disabled

Light default

Light checked

Light checked disabled

Filled default

Filled checked

Filled checked disabled

[Chip with tooltip](#chip-with-tooltip)
---------------------------------------

To use `Chip` with [Tooltip](https://mantine.dev/core/tooltip/) and other similar components, set `refProp="rootRef"` on the Tooltip component:

[Add props to the root element](#browser-support)
-------------------------------------------------

All props passed to the component are forwarded to the input element. If you need to add props to the root element, use `wrapperProps`. In the following example:

*   `data-testid="wrapper"` is added to the root element
*   `data-testid="input"` is added to the input element

[Chip.Group](#chipgroup)
------------------------

`Chip.Group` component manages state of child Chip components, set `multiple` prop to allow multiple chips to be selected at a time:

Single chip

Can be selected

At a time

Multiple chips

Can be selected

At a time

[Controlled Chip.Group](#controlled-chipgroup)
----------------------------------------------

[Deselect radio chip](#deselect-radio-chip)
-------------------------------------------

[Accessibility](#accessibility)
-------------------------------

`Chip` and `Chip.Group` components are accessible by default – they are built with native radio/checkbox inputs, all keyboard events work the same as with native controls.</content>
</page>

<page>
  <title>ColorInput | Mantine</title>
  <url>https://mantine.dev/core/color-input/</url>
  <content>[Usage](#usage)
---------------

`ColorInput` component supports [Input](https://mantine.dev/core/input/) and [Input.Wrapper](https://mantine.dev/core/input/) components features and all `input` element props. `ColorInput` documentation does not include all features supported by the component – see [Input](https://mantine.dev/core/input/) documentation to learn about all available features.

Input label

Input description

[Controlled](#controlled)
-------------------------

[Formats](#formats)
-------------------

Component supports hex, hexa, rgb, rgba, hsl and hsla color formats. Slider to change opacity is displayed only for hexa, rgba and hsla formats:

[Preserve invalid input](#preserve-invalid-input)
-------------------------------------------------

By default, `ColorInput` will revert the value on blur to the last known valid value. To change this behavior and keep invalid value, set `fixOnBlur={false}`:

Value is not fixed on blur

[onChangeEnd](#onchangeend)
---------------------------

`onChangeEnd` is called when user stops dragging slider or changes input value. It is useful when you need to update color only when user finished interaction with the component:

Change end value: **#FFFFFF**

[Disable free input](#disable-free-input)
-----------------------------------------

To disable free input set `disallowInput` prop:

[With swatches](#with-swatches)
-------------------------------

You can add any amount of predefined color swatches:

By default, there will be 7 swatches per row, you can change this with `swatchesPerRow` prop, like in [ColorPicker](https://mantine.dev/core/color-picker/) component:

If you need to restrict color picking to certain colors – disable color picker and disallow free input:

[Close dropdown on color swatch click](#close-dropdown-on-color-swatch-click)
-----------------------------------------------------------------------------

To close the dropdown when one of the color swatches is clicked, set `closeOnColorSwatchClick` prop:

Dropdown is closed when color swatch is clicked

[Hide dropdown](#hide-dropdown)
-------------------------------

To hide dropdown, set `withPicker={false}`:

[Eye dropper](#eye-dropper)
---------------------------

By default, if [EyeDropper API](https://developer.mozilla.org/en-US/docs/Web/API/EyeDropper_API) is available, eye dropper icon will be displayed at the right section of the input. To disable it, set `withEyeDropper={false}`:

[Change eye dropper icon](#change-eye-dropper-icon)
---------------------------------------------------

You can replace eye dropper icon with any React node using `eyeDropperIcon` prop:

With custom eye dropper icon

[Left and right sections](#left-and-right-sections)
---------------------------------------------------

`ColorInput` supports `leftSection` and `rightSection` props. These sections are rendered with absolute position inside the input wrapper. You can use them to display icons, input controls or any other elements.

You can use the following props to control sections styles and content:

*   `rightSection`/`leftSection` – React node to render on the corresponding side of input
*   `rightSectionWidth`/`leftSectionWidth` – controls width of the right section and padding on the corresponding side of the input. By default, it is controlled by component `size` prop.
*   `rightSectionPointerEvents`/`leftSectionPointerEvents` – controls `pointer-events` property of the section. If you want to render a non-interactive element, set it to `none` to pass clicks through to the input.

Note that by default, `ColorPicker` has color preview in the left section and eye dropper button in the right section. You can replace these elements with any React node using `leftSection` and `rightSection` props:

With custom right section

[Error state](#error-state)
---------------------------

With error message

Invalid name

[Disabled state](#disabled-state)
---------------------------------

[Read only](#read-only)
-----------------------

[Styles API](#styles-api)
-------------------------

`ColorInput` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Component Styles API

Hover over selectors to highlight corresponding elements

[Get element ref](#get-element-ref)
-----------------------------------

[Accessibility](#accessibility)
-------------------------------

If `ColorInput` is used without `label` prop, it will not be announced properly by screen reader:

Set `aria-label` to make the input accessible. In this case label will not be visible, but screen reader will announce it:

If `label` prop is set, input will be accessible it is not required to set `aria-label`:</content>
</page>

<page>
  <title>ColorPicker | Mantine</title>
  <url>https://mantine.dev/core/color-picker/</url>
  <content>[Usage](#usage)
---------------

[Color format](#color-format)
-----------------------------

`ColorPicker` supports hex, hexa, rgb, rgba, hsl and hsla color formats. Slider to change opacity and color preview are displayed only for hexa, rgba and hsla formats:

[With swatches](#with-swatches)
-------------------------------

You can add predefined color swatches with `swatches` prop:

By default, `ColorPicker` will display 7 swatches per row, you can configure it with `swatchesPerRow` prop:

To display swatches without picker set `withPicker={false}` and `fullWidth` props:

[Size](#size)
-------------

`ColorPicker` has 5 predefined sizes: `xs`, `sm`, `md`, `lg` and `xl`:

[fullWidth](#fullwidth)
-----------------------

Set `fullWidth` prop to stretch component to 100% of parent width. In this case the picker will not have fixed width, but you can still use `size` prop to control sizes of sliders.

[Styles API](#styles-api)
-------------------------

`ColorPicker` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Component Styles API

Hover over selectors to highlight corresponding elements

[HueSlider component](#hueslider-component)
-------------------------------------------

[AlphaSlider component](#alphaslider-component)
-----------------------------------------------

[Accessibility](#accessibility)
-------------------------------

ColorPicker component is accessible by default:

*   Saturation, hue and alpha sliders are focusable
*   When moused is used to interact with the slider, focus is moved to the slider
*   All values can be changed with arrows

To make component accessible for screen readers, set `saturationLabel`, `hueLabel` and `alphaLabel`:</content>
</page>

<page>
  <title>Fieldset | Mantine</title>
  <url>https://mantine.dev/core/fieldset/</url>
  <content>[Usage](#usage)
---------------

    import { Fieldset, TextInput } from '@mantine/core';
    
    function Demo() {
      return (
        <Fieldset legend="Personal information">
          <TextInput label="Your name" placeholder="Your name" />
          <TextInput label="Email" placeholder="Email" mt="md" />
        </Fieldset>
      );
    }

[Disabled](#disabled)
---------------------

Set `disabled` prop to disable all inputs and buttons inside the fieldset:

    import { Fieldset, TextInput, Button, Group } from '@mantine/core';
    
    function Demo() {
      return (
        <Fieldset legend="Personal information" disabled>
          <TextInput label="Your name" placeholder="Your name" />
          <TextInput label="Email" placeholder="Email" mt="md" />
    
          <Group justify="flex-end" mt="md">
            <Button>Submit</Button>
          </Group>
        </Fieldset>
      );
    }</content>
</page>

<page>
  <title>FileInput | Mantine</title>
  <url>https://mantine.dev/core/file-input/</url>
  <content>[Usage](#usage)
---------------

`FileInput` component supports [Input](https://mantine.dev/core/input/) and [Input.Wrapper](https://mantine.dev/core/input/) components features and all `input` element props. `FileInput` documentation does not include all features supported by the component – see [Input](https://mantine.dev/core/input/) documentation to learn about all available features.

Input label

Input description

[Controlled](#controlled)
-------------------------

When `multiple` is `false`:

When `multiple` is `true`:

[Multiple](#multiple)
---------------------

Set `multiple` to allow user to pick more than one file:

[Accept](#accept)
-----------------

Set `accept` prop to restrict files selection to specific mime types:

[Clearable](#clearable)
-----------------------

Set `clearable` prop to display clear button in the right section of the input when file is selected. Note that if you define custom right section, clear button will not be rendered.

[Custom value component](#custom-value-component)
-------------------------------------------------

[Error state](#error-state)
---------------------------

With error message

Invalid name

[Disabled state](#disabled-state)
---------------------------------

[Left and right sections](#left-and-right-sections)
---------------------------------------------------

`FileInput` supports `leftSection` and `rightSection` props. These sections are rendered with absolute position inside the input wrapper. You can use them to display icons, input controls or any other elements.

You can use the following props to control sections styles and content:

*   `rightSection`/`leftSection` – React node to render on the corresponding side of input
*   `rightSectionWidth`/`leftSectionWidth` – controls width of the right section and padding on the corresponding side of the input. By default, it is controlled by component `size` prop.
*   `rightSectionPointerEvents`/`leftSectionPointerEvents` – controls `pointer-events` property of the section. If you want to render a non-interactive element, set it to `none` to pass clicks through to the input.

[Styles API](#styles-api)
-------------------------

`FileInput` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Component Styles API

Hover over selectors to highlight corresponding elements

[Get element ref](#get-element-ref)
-----------------------------------

[Accessibility](#accessibility)
-------------------------------

If `FileInput` is used without `label` prop, it will not be announced properly by screen reader:

Set `aria-label` to make the input accessible. In this case label will not be visible, but screen reader will announce it:

If `label` prop is set, input will be accessible it is not required to set `aria-label`:

[FileInputProps type](#fileinputprops-type)
-------------------------------------------

`FileInputProps` type is a generic interface which accepts a single type argument: `multiple` value.</content>
</page>

<page>
  <title>Input | Mantine</title>
  <url>https://mantine.dev/core/input/</url>
  <content>[Disclaimer](#disclaimer)
-------------------------

**!important:** In most cases, you should not use `Input` in your application. `Input` is a base for other inputs and was not designed to be used directly. Use `Input` to create custom inputs, for other cases prefer [TextInput](https://mantine.dev/core/text-input/) or other component.

[Usage](#usage)
---------------

`Input` component is used as base for some other inputs ([NativeSelect](https://mantine.dev/core/native-select/), [TextInput](https://mantine.dev/core/text-input/), [Textarea](https://mantine.dev/core/textarea/), etc.). The purpose of the `Input` is to provide shared styles and features to other inputs.

[Left and right sections](#left-and-right-sections)
---------------------------------------------------

`Input` supports `leftSection` and `rightSection` props. These sections are rendered with absolute position inside the input wrapper. You can use them to display icons, input controls or any other elements.

You can use the following props to control sections styles and content:

*   `rightSection`/`leftSection` – React node to render on the corresponding side of input
*   `rightSectionWidth`/`leftSectionWidth` – controls width of the right section and padding on the corresponding side of the input. By default, it is controlled by component `size` prop.
*   `rightSectionPointerEvents`/`leftSectionPointerEvents` – controls `pointer-events` property of the section. If you want to render a non-interactive element, set it to `none` to pass clicks through to the input.

[Change input element](#change-input-element)
---------------------------------------------

Input is a [polymorphic component](https://mantine.dev/guides/polymorphic/), the default root element is `input`, but it can be changed to any other element or component.

Example of using `Input` as `button` and `select`:

Example of using [react-imask](https://github.com/uNmAnNeR/imaskjs/tree/master/packages/react-imask) with `Input`:

[Input.Wrapper component](#inputwrapper-component)
--------------------------------------------------

`Input.Wrapper` component is used in all other inputs ([TextInput](https://mantine.dev/core/text-input/), [NativeSelect](https://mantine.dev/core/native-select/), [Textarea](https://mantine.dev/core/textarea/), etc.) under the hood, you _do not need to wrap your inputs with it, as it is already included in all of them_. Use `Input.Wrapper` only when you want to create custom inputs.

Input label

Input description

Input error

[inputWrapperOrder](#inputwrapperorder)
---------------------------------------

`inputWrapperOrder` allows configuring the order of `Input.Wrapper` parts. It accepts an array of four elements: `label`, `input`, `error` and `description`. Note that it is not required to include all of them, you can use only those that you need – parts that are not included will not be rendered.

Custom layout

Description below the input

Custom layout

Error and description are

both below the input

[inputContainer](#inputcontainer)
---------------------------------

With `inputContainer` prop, you can enhance inputs that use `Input.Wrapper` under the hood, for example, you can add [Tooltip](https://mantine.dev/core/tooltip/) to the [TextInput](https://mantine.dev/core/text-input/) when the input is focused:

TextInput with tooltip

Tooltip will be relative to the input

[required and withAsterisk props](#required-and-withasterisk-props)
-------------------------------------------------------------------

All components that are based on `Input.Wrapper` support `required` and `withAsterisk` props. When set to true, both of these props will add a red asterisk to the end of the label. The only difference is whether input element will have `required` attribute, example with [TextInput](https://mantine.dev/core/text-input/) component:

[error prop](#error-prop)
-------------------------

All inputs that use `Input.Wrapper` under the hood support `error` prop. When set to `true`, it will add a red border to the input. You can also pass a React node to display an error message below the input. To only display error message without a red border, set `error` prop to React node and `withErrorStyles={false}`:

Error as react node

Something went wrong

Without error styles on input

Something went wrong

[Input.Label, Input.Description and Input.Error components](#inputlabel-inputdescription-and-inputerror-components)
-------------------------------------------------------------------------------------------------------------------

`Input.Label`, `Input.Error` and `Input.Description` components can be used to create custom form layouts if the default `Input.Wrapper` layout does not meet your requirements.

Input label

Input description

Input error

[Input.Placeholder component](#inputplaceholder-component)
----------------------------------------------------------

`Input.Placeholder` component can be used to add placeholder to `Input` and `InputBase` components that are based on `button` element or do not support placeholder property natively:

[Input.ClearButton component](#inputclearbutton-component)
----------------------------------------------------------

Use `Input.ClearButton` component to add clear button to custom inputs based on `Input` component. `size` of the clear button is automatically inherited from the input:

[Default props on theme](#default-props-on-theme)
-------------------------------------------------

You can add [default props](https://mantine.dev/theming/default-props/) on [theme](https://mantine.dev/theming/theme-object/) to `Input` and `Input.Wrapper` components. These default props will be inherited by all inputs that use `Input` and `Input.Wrapper` under the hood ([TextInput](https://mantine.dev/core/text-input/), [NativeSelect](https://mantine.dev/core/native-select/), [Textarea](https://mantine.dev/core/textarea/), etc.):

Text input

Description below the input

Native select

Description below the input

[Styles on theme](#styles-on-theme)
-----------------------------------

Same as with default props, you can use `Input` and `Input.Wrapper` [Styles API](https://mantine.dev/styles/styles-api/) on [theme](https://mantine.dev/theming/theme-object/) to add styles to all inputs:

[Change focus styles](#change-focus-styles)
-------------------------------------------

Use `&:focus-within` selector to change inputs focus styles. You can apply these styles to one component with `classNames` prop or to all inputs with [Styles API](https://mantine.dev/styles/styles-api/) on [theme](https://mantine.dev/theming/theme-object/).

[InputBase component](#inputbase-component)
-------------------------------------------

`InputBase` component combines `Input` and `Input.Wrapper` components and supports `component` prop:

[Styles API](#styles-api)
-------------------------

`Input` and `Input.Wrapper` components support [Styles API](https://mantine.dev/styles/styles-api/) – you can customize styles of any inner element with `classNames` and `styles` props.

`Input` Styles API selectors:

Component Styles API

Hover over selectors to highlight corresponding elements

`Input.Wrapper` Styles API selectors:

Input label

Input description

Input error

Component Styles API

Hover over selectors to highlight corresponding elements

[Get element ref](#get-element-ref)
-----------------------------------

[Accessibility](#accessibility)
-------------------------------

If you use `Input` component without associated label element, set `aria-label`:

When you use `Input` with `Input.Wrapper` it is required to set `id` on both components to connect label and other elements with the input:

You can use [use-id](https://mantine.dev/hooks/use-id/) to generate unique ids:</content>
</page>

<page>
  <title>JsonInput | Mantine</title>
  <url>https://mantine.dev/core/json-input/</url>
  <content>[Usage](#usage)
---------------

`JsonInput` is based on [Textarea](https://mantine.dev/core/textarea/) component, it includes json validation logic and option to format input value on blur:

[Controlled](#controlled)
-------------------------

[Input props](#input-props)
---------------------------

`JsonInput` component supports [Input](https://mantine.dev/core/input/) and [Input.Wrapper](https://mantine.dev/core/input/) components features and all `textarea` element props. `JsonInput` documentation does not include all features supported by the component – see [Input](https://mantine.dev/core/input/) documentation to learn about all available features.

Input label

Input description

[Disabled state](#disabled-state)
---------------------------------

[Styles API](#styles-api)
-------------------------

`JsonInput` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Component Styles API

Hover over selectors to highlight corresponding elements

[Get element ref](#get-element-ref)
-----------------------------------

[Accessibility](#accessibility)
-------------------------------

If `JsonInput` is used without `label` prop, it will not be announced properly by screen reader:

Set `aria-label` to make the input accessible. In this case label will not be visible, but screen reader will announce it:

If `label` prop is set, input will be accessible it is not required to set `aria-label`:</content>
</page>

<page>
  <title>NativeSelect | Mantine</title>
  <url>https://mantine.dev/core/native-select/</url>
  <content>[Usage](#usage)
---------------

`NativeSelect` component supports [Input](https://mantine.dev/core/input/) and [Input.Wrapper](https://mantine.dev/core/input/) components features and all `select` element props. `NativeSelect` documentation does not include all features supported by the component – see [Input](https://mantine.dev/core/input/) documentation to learn about all available features.

Input label

Input description

[Controlled](#controlled)
-------------------------

[Adding options](#adding-options)
---------------------------------

`NativeSelect` allows passing options in two ways:

*   `data` prop array
*   `children` prop with `option` components

Note that if `children` is used, `data` will be ignored.

### [data prop](#data-prop)

`data` prop accepts values in one of the following formats:

1.  Array of strings:

2.  Array of objects with `label`, `value` and `disabled` keys:

3.  Array of grouped options (string format):

4.  Array of grouped options (object format):

Example of `data` prop with array of grouped options:

### [children options](#children-options)

To add options with `children` prop, use `option` elements to add options and `optgroup` elements to group them:

[With dividers](#with-dividers)
-------------------------------

Use `hr` tags to add dividers between options:

[Left and right sections](#left-and-right-sections)
---------------------------------------------------

`NativeSelect` supports `leftSection` and `rightSection` props. These sections are rendered with absolute position inside the input wrapper. You can use them to display icons, input controls or any other elements.

You can use the following props to control sections styles and content:

*   `rightSection`/`leftSection` – React node to render on the corresponding side of input
*   `rightSectionWidth`/`leftSectionWidth` – controls width of the right section and padding on the corresponding side of the input. By default, it is controlled by component `size` prop.
*   `rightSectionPointerEvents`/`leftSectionPointerEvents` – controls `pointer-events` property of the section. If you want to render a non-interactive element, set it to `none` to pass clicks through to the input.

[Disabled state](#disabled-state)
---------------------------------

[Error state](#error-state)
---------------------------

React node error

Error message

[Styles API](#styles-api)
-------------------------

`NativeSelect` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

NativeSelect label

NativeSelect description

NativeSelect error

Component Styles API

Hover over selectors to highlight corresponding elements

[Accessibility](#accessibility)
-------------------------------

If `NativeSelect` is used without `label` prop, it will not be announced properly by screen reader:

Set `aria-label` to make the input accessible. In this case label will not be visible, but screen reader will announce it:

If `label` prop is set, input will be accessible it is not required to set `aria-label`:</content>
</page>

<page>
  <title>NumberInput | Mantine</title>
  <url>https://mantine.dev/core/number-input/</url>
  <content>[Usage](#usage)
---------------

`NumberInput` is based on [react-number-format](https://www.npmjs.com/package/react-number-format). It supports most of the props from the `NumericFormat` component in the original package.

`NumberInput` component supports [Input](https://mantine.dev/core/input/) and [Input.Wrapper](https://mantine.dev/core/input/) components features and all `input` element props. `NumberInput` documentation does not include all features supported by the component – see [Input](https://mantine.dev/core/input/) documentation to learn about all available features.

Input label

Input description

[Controlled](#controlled)
-------------------------

[Value type](#value-type)
-------------------------

`value`, `defaultValue` and `onChange` props can be either string or number. In all cases when `NumberInput` value can be represented as a number, `onChange` function is called with a number (for example `55`, `1.28`, `-100`, etc.). But there are several cases when it is not possible to represent value as a number:

*   Empty state is represented as an empty string – `''`
*   Numbers that are larger than `Number.MAX_SAFE_INTEGER` or smaller than `Number.MIN_SAFE_INTEGER` are represented as strings – `'90071992547409910'`
*   Numbers that consist of only multiple zeros are represented as strings – `0.`, `0.0`, `-0.00`, etc.

[min and max](#min-and-max)
---------------------------

Set `min` and `max` props to limit the input value:

Enter value between 10 and 20

[Clamp behavior](#clamp-behavior)
---------------------------------

By default, the value is clamped when the input is blurred. If you set `clampBehavior="strict"`, it will not be possible to enter value outside of min/max range. Note that this option may cause issues if you have tight `min` and `max`, for example `min={10}` and `max={20}`. If you need to disable value clamping entirely, set `clampBehavior="none"`.

You cannot enter number less than 0 or greater than 100

[Prefix and suffix](#prefix-and-suffix)
---------------------------------------

Set `prefix` and `suffix` props to add given string to the start or end of the input value:

[Negative numbers](#negative-numbers)
-------------------------------------

By default, negative numbers are allowed. Set `allowNegative={false}` to allow only positive numbers.

Negative number are not allowed

[Decimal numbers](#decimal-numbers)
-----------------------------------

By default, decimal numbers are allowed. Set `allowDecimal={false}` to allow only integers.

[Decimal scale](#decimal-scale)
-------------------------------

`decimalScale` controls how many decimal places are allowed:

You can enter only 2 digits after decimal point

[Fixed decimal scale](#fixed-decimal-scale)
-------------------------------------------

Set `fixedDecimalScale` to always display fixed number of decimal places:

Always show 2 digits after decimal point

[Decimal separator](#decimal-separator)
---------------------------------------

Set `decimalSeparator` to change decimal separator character:

[Thousand separator](#thousand-separator)
-----------------------------------------

Set `thousandSeparator` prop to separate thousands with a character. You can control grouping logic with `thousandsGroupStyle`, it accepts: `thousand`, `lakh`, `wan`, `none` values.

Thousands are separated with a coma

Thousands are separated with a space

[Left and right sections](#left-and-right-sections)
---------------------------------------------------

`NumberInput` supports `leftSection` and `rightSection` props. These sections are rendered with absolute position inside the input wrapper. You can use them to display icons, input controls or any other elements.

You can use the following props to control sections styles and content:

*   `rightSection`/`leftSection` – React node to render on the corresponding side of input
*   `rightSectionWidth`/`leftSectionWidth` – controls width of the right section and padding on the corresponding side of the input. By default, it is controlled by component `size` prop.
*   `rightSectionPointerEvents`/`leftSectionPointerEvents` – controls `pointer-events` property of the section. If you want to render a non-interactive element, set it to `none` to pass clicks through to the input.

[Increment/decrement controls](#incrementdecrement-controls)
------------------------------------------------------------

By default, the right section is occupied by increment and decrement buttons. To hide them, set `hideControls` prop. You can also use `rightSection` prop to render anything in the right section to replace the default controls.

[Increment/decrement on hold](#incrementdecrement-on-hold)
----------------------------------------------------------

Set `stepHoldDelay` and `stepHoldInterval` props to define behavior when increment/decrement controls are clicked and hold:

Step on hold

Step value when clicking and holding increment/decrement buttons

Step the value with interval function

Step value will increase incrementally when control is hold

[Custom increment and decrement controls](#custom-increment-and-decrement-controls)
-----------------------------------------------------------------------------------

You can get a ref with `increment` and `decrement` functions to create custom controls:

Click buttons to change value

[Error state](#error-state)
---------------------------

With error message

Invalid name

[Disabled state](#disabled-state)
---------------------------------

[Styles API](#styles-api)
-------------------------

`NumberInput` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Component Styles API

Hover over selectors to highlight corresponding elements

[Get element ref](#get-element-ref)
-----------------------------------

[Accessibility](#accessibility)
-------------------------------

If `NumberInput` is used without `label` prop, it will not be announced properly by screen reader:

Set `aria-label` to make the input accessible. In this case label will not be visible, but screen reader will announce it:

If `label` prop is set, input will be accessible it is not required to set `aria-label`:</content>
</page>

<page>
  <title>PasswordInput | Mantine</title>
  <url>https://mantine.dev/core/password-input/</url>
  <content>[Usage](#usage)
---------------

`PasswordInput` component supports [Input](https://mantine.dev/core/input/) and [Input.Wrapper](https://mantine.dev/core/input/) components features and all `input` element props. `PasswordInput` documentation does not include all features supported by the component – see [Input](https://mantine.dev/core/input/) documentation to learn about all available features.

Input label

Input description

[Controlled](#controlled)
-------------------------

[Controlled visibility toggle](#controlled-visibility-toggle)
-------------------------------------------------------------

Control visibility state with `visible` and `onVisibilityChange` props, for example, the props can be used to sync visibility state between two inputs:

[Change visibility toggle icon](#change-visibility-toggle-icon)
---------------------------------------------------------------

To change visibility toggle icon, pass a React component that accepts `reveal` prop to `visibilityToggleIcon`:

Change visibility toggle icon

[Strength meter example](#strength-meter-example)
-------------------------------------------------

Password strength meter example with [Progress](https://mantine.dev/core/progress/) and [Popover](https://mantine.dev/core/popover/) components:

[Usage without visibility toggle](#usage-without-visibility-toggle)
-------------------------------------------------------------------

If you do not need visibility toggle button, use [TextInput](https://mantine.dev/core/text-input/) component instead:

[Left and right sections](#left-and-right-sections)
---------------------------------------------------

`PasswordInput` supports `leftSection` and `rightSection` props. These sections are rendered with absolute position inside the input wrapper. You can use them to display icons, input controls or any other elements.

You can use the following props to control sections styles and content:

*   `rightSection`/`leftSection` – React node to render on the corresponding side of input
*   `rightSectionWidth`/`leftSectionWidth` – controls width of the right section and padding on the corresponding side of the input. By default, it is controlled by component `size` prop.
*   `rightSectionPointerEvents`/`leftSectionPointerEvents` – controls `pointer-events` property of the section. If you want to render a non-interactive element, set it to `none` to pass clicks through to the input.

Note that when `rightSection` prop is used, visibility toggle button is not rendered.

[Error state](#error-state)
---------------------------

With error message

Invalid name

[Disabled](#disabled)
---------------------

When `disabled` prop is set, visibility toggle button is hidden:

[Styles API](#styles-api)
-------------------------

`PasswordInput` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Component Styles API

Hover over selectors to highlight corresponding elements

[Get element ref](#get-element-ref)
-----------------------------------

[Accessibility](#accessibility)
-------------------------------

If `PasswordInput` is used without `label` prop, it will not be announced properly by screen reader:

Set `aria-label` to make the input accessible. In this case label will not be visible, but screen reader will announce it:

If `label` prop is set, input will be accessible it is not required to set `aria-label`:

To set `aria-label` on the visibility toggle button, use `visibilityToggleButtonProps` prop:</content>
</page>

<page>
  <title>PinInput | Mantine</title>
  <url>https://mantine.dev/core/pin-input/</url>
  <content>[Usage](#usage)
---------------

[Regex type](#regex-type)
-------------------------

You can use regular expression to validate user input. Characters that do not match given expression will be disregarded. For example, to create a `PinInput` that will accept only numbers from `0` to `3`, set `type={/^[0-3]+/}`:

[One time code](#one-time-code)
-------------------------------

Some operating systems expose the last received SMS code to be used by applications like your keyboard. If the current form input asks for this code, your keyboard adapts and proposes the code as keyboard-suggestion. Prop `oneTimeCode` makes your input setting `autocomplete="one-time-code"` which allows using that feature.

[Styles API](#styles-api)
-------------------------

`PinInput` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Component Styles API

Hover over selectors to highlight corresponding elements

[Accessibility](#accessibility)
-------------------------------

Inputs do not have associated labels, set `aria-label` to make component visible to the screen reader:</content>
</page>

<page>
  <title>Radio | Mantine</title>
  <url>https://mantine.dev/core/radio/</url>
  <content>[Usage](#usage)
---------------

[Controlled](#controlled)
-------------------------

[States](#states)
-----------------

[Change icon](#change-icon)
---------------------------

[Change icon color](#change-icon-color)
---------------------------------------

[Disabled state](#disabled-state)
---------------------------------

[Pointer cursor](#pointer-cursor)
---------------------------------

By default, radio input and label have `cursor: default` (same as native `input[type="radio"]`). To change cursor to pointer, set `cursorType` on [theme](https://mantine.dev/theming/theme-object/):

[Radio with tooltip](#radio-with-tooltip)
-----------------------------------------

You can change target element to which tooltip is attached with `refProp`:

*   If `refProp` is not set, the tooltip is attached to the checkbox input
*   If `refProp="rootRef"` is set, the tooltip is attached to the root element (contains label, input and other elements)

Tooltip the entire element

[Add props to the root element](#browser-support)
-------------------------------------------------

All props passed to the component are forwarded to the input element. If you need to add props to the root element, use `wrapperProps`. In the following example:

*   `data-testid="wrapper"` is added to the root element
*   `data-testid="input"` is added to the input element

[Radio.Group component](#radiogroup-component)
----------------------------------------------

Select your favorite framework/library

This is anonymous

[Controlled Radio.Group](#controlled-radiogroup)
------------------------------------------------

[Radio.Indicator](#radioindicator)
----------------------------------

`Radio.Indicator` looks exactly the same as `Radio` component, but it does not have any semantic meaning, it's just a visual representation of radio state. You can use it in any place where you need to display radio state without any interaction related to the indicator. For example, it is useful in cards based on buttons, trees, etc.

Note that `Radio.Indicator` cannot be focused or selected with keyboard. It is not accessible and should not be used as a replacement for `Radio` component.

[Radio.Card component](#radiocard-component)
--------------------------------------------

`Radio.Card` component can be used as a replacement for `Radio` to build custom cards/buttons/other things that work as radios. The root element of the component has `role="radio"` attribute, it is accessible by default and supports the same keyboard interactions as `input[type="radio"]`.

You can use `Radio.Card` with `Radio.Group` the same way as `Radio` component:

Pick one package to install

Choose a package that you will need in your application

CurrentValue: –

[Get element ref](#get-element-ref)
-----------------------------------

[Styles API](#styles-api)
-------------------------

`Radio` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Radio

Radio description

Radio error

Component Styles API

Hover over selectors to highlight corresponding elements

[Accessibility](#accessibility)
-------------------------------

Set `aria-label` or `label` prop to make the radio accessible:</content>
</page>

<page>
  <title>Rating | Mantine</title>
  <url>https://mantine.dev/core/rating/</url>
  <content>    import { Rating } from '@mantine/core';
    import {
      IconMoodCry,
      IconMoodSad,
      IconMoodSmile,
      IconMoodHappy,
      IconMoodCrazyHappy,
    } from '@tabler/icons-react';
    
    const getIconStyle = (color?: string) => ({
      width: 24,
      height: 24,
      color: color ? `var(--mantine-color-${color}-7)` : undefined,
    });
    
    const getEmptyIcon = (value: number) => {
      const iconStyle = getIconStyle();
    
      switch (value) {
        case 1:
          return <IconMoodCry style={iconStyle} />;
        case 2:
          return <IconMoodSad style={iconStyle} />;
        case 3:
          return <IconMoodSmile style={iconStyle} />;
        case 4:
          return <IconMoodHappy style={iconStyle} />;
        case 5:
          return <IconMoodCrazyHappy style={iconStyle} />;
        default:
          return null;
      }
    };
    
    const getFullIcon = (value: number) => {
      switch (value) {
        case 1:
          return <IconMoodCry style={getIconStyle('red')} />;
        case 2:
          return <IconMoodSad style={getIconStyle('orange')} />;
        case 3:
          return <IconMoodSmile style={getIconStyle('yellow')} />;
        case 4:
          return <IconMoodHappy style={getIconStyle('lime')} />;
        case 5:
          return <IconMoodCrazyHappy style={getIconStyle('green')} />;
        default:
          return null;
      }
    };
    
    function Demo() {
      return <Rating emptySymbol={getEmptyIcon} fullSymbol={getFullIcon} highlightSelectedOnly />;
    }</content>
</page>

<page>
  <title>SegmentedControl | Mantine</title>
  <url>https://mantine.dev/core/segmented-control/</url>
  <content>[Usage](#usage)
---------------

Full width

With items borders

[Controlled](#controlled)
-------------------------

[Data prop](#data-prop)
-----------------------

`SegmentedControl` support two different data formats:

1.  An array of strings – used when `value` and `label` are the same
2.  An array of objects – used when `value` and `label` are different

[Disabled](#disabled)
---------------------

To disable `SegmentedControl` item, use array of objects `data` format and set `disabled: true` on the item that you want to disable. To disable the entire component, use `disabled` prop.

[React node as label](#react-node-as-label)
-------------------------------------------

You can use any React node as label:

[Color](#color)
---------------

By default, `SegmentedControl` uses `theme.white` with shadow in light color scheme and `var(--mantine-color-dark-6)` background color for indicator. Set `color` prop to change indicator `background-color`:

[Transitions](#transitions)
---------------------------

Change transition properties with:

*   `transitionDuration` – all transitions duration in ms, `200` by default
*   `transitionTimingFunction` – all transitions timing function, `ease` by default

No transitions

500ms linear transition

[readOnly](#readonly)
---------------------

Set `readOnly` prop to prevent value from being changed:

[Styles API](#styles-api)
-------------------------

`SegmentedControl` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Component Styles API

Hover over selectors to highlight corresponding elements

[Accessibility and usability](#accessibility-and-usability)
-----------------------------------------------------------

`SegmentedControl` uses radio inputs under the hood, it is accessible by default with no extra steps required if you have text in labels. Component support the same keyboard events as a regular radio group.

In case you do not have text in labels (for example, when you want to use `SegmentedControl` with icons only), use [VisuallyHidden](https://mantine.dev/core/visually-hidden/) to make component accessible:</content>
</page>

<page>
  <title>Slider | Mantine</title>
  <url>https://mantine.dev/core/slider/</url>
  <content>[Slider component](#slider-component)
-------------------------------------

Show label on hover

Label always on

[RangeSlider component](#rangeslider-component)
-----------------------------------------------

Show label on hover

Label always on

[Controlled](#controlled)
-------------------------

Controlled `Slider`:

Controlled `RangeSlider`:

[Disabled](#disabled)
---------------------

[onChangeEnd](#onchangeend)
---------------------------

`onChangeEnd` callback is called when user the slider is stopped from being dragged or value is changed with keyboard. You can use it as a debounced callback to avoid too frequent updates.

onChange value: **50**

onChangeEnd value: **50**

[Control label](#control-label)
-------------------------------

To change label behavior and appearance, set the following props:

*   `label` – formatter function, accepts value as an argument, set null to disable label, defaults to `f => f`
*   `labelAlwaysOn` – if true – label will always be displayed, by default label is visible only when user is dragging
*   `labelTransitionProps` – props passed down to the [Transition](https://mantine.dev/core/transition/) component, can be used to customize label animation

No label

Formatted label

Label always visible

Custom label transition

[Min, max and step](#min-max-and-step)
--------------------------------------

Decimal step

Step matched with marks

[Domain](#domain)
-----------------

By default, `min` and `max` values define the possible range of values. `domain` prop allows setting the possible range of values independently of the `min` and `max` values:

[Decimal values](#decimal-values)
---------------------------------

To use `Slider` with decimal values, set `min`, `max` and `step` props:

[minRange](#minrange)
---------------------

Use `minRange` prop to control minimum range between `from` and `to` values in `RangeSlider`. The default value is `10`. The example below shows how to use `minRange` prop to capture decimal values from the user:

[pushOnOverlap](#pushonoverlap)
-------------------------------

`pushOnOverlap` prop controls whether the thumbs should push each other when they overlap. By default, `pushOnOverlap` is `true`, if you want to disable this behavior, set it to `false`.

Example of `pushOnOverlap={false}`:

[Marks](#marks)
---------------

Add any number of marks to slider by setting `marks` prop to an array of objects:

Note that mark value is relative to slider value, not width:

[Restrict selection to marks](#restrict-selection-to-marks)
-----------------------------------------------------------

Set `restrictToMarks` prop to restrict slider value to marks only. Note that in this case `step` prop is ignored:

[Thumb size](#thumb-size)
-------------------------

[Thumb children](#thumb-children)
---------------------------------

[Scale](#scale)
---------------

You can use the `scale` prop to represent the value on a different scale.

In the following demo, the value `x` represents the value `2^x`. Increasing `x` by one increases the represented value by 2 to the power of `x`.

[Inverted](#inverted)
---------------------

You can invert the track with the `inverted` prop:

[Styles API](#styles-api)
-------------------------

`Slider` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Component Styles API

Hover over selectors to highlight corresponding elements

Example of using [Styles API](https://mantine.dev/styles/styles-api/) to change `Slider` styles:

[Vertical slider](#vertical-slider)
-----------------------------------

`Slider` and `RangeSlider` do not provide vertical orientation as it is very rarely used. If you need this feature you can build it yourself with [use-move](https://mantine.dev/hooks/use-move/) hook.

[Build custom slider](#build-custom-slider)
-------------------------------------------

If `Slider` component does not meet your requirements, you can build a custom slider with [use-move](https://mantine.dev/hooks/use-move/) hook:

[Accessibility](#accessibility)
-------------------------------

`Slider` and `RangeSlider` components are accessible by default:

*   Thumbs are focusable
*   When the user uses mouse to interact with the slider, focus is moved to the slider track, when the user presses arrows focus is moved to the thumb
*   Value can be changed with arrows with step increment/decrement

To label component for screen readers, add labels to thumbs:

[Keyboard interactions](#keyboard-interactions)
-----------------------------------------------</content>
</page>

<page>
  <title>Textarea | Mantine</title>
  <url>https://mantine.dev/core/textarea/</url>
  <content>[Usage](#usage)
---------------

`Textarea` component supports [Input](https://mantine.dev/core/input/) and [Input.Wrapper](https://mantine.dev/core/input/) components features and all `textarea` element props. `Textarea` documentation does not include all features supported by the component – see [Input](https://mantine.dev/core/input/) documentation to learn about all available features.

Input label

Input description

[Controlled](#controlled)
-------------------------

[Autosize](#autosize)
---------------------

Autosize textarea uses [react-textarea-autosize](https://www.npmjs.com/package/react-textarea-autosize) package. Textarea height will grow until maxRows are reached or indefinitely if maxRows not set.

Autosize with no rows limit

[Enable resize](#enable-resize)
-------------------------------

By default, [resize](https://developer.mozilla.org/en-US/docs/Web/CSS/resize) is `none`, to enable it set `resize` prop to `vertical` or `both`:

[Error state](#error-state)
---------------------------

With error message

Invalid name

[Disabled state](#disabled-state)
---------------------------------

[Styles API](#styles-api)
-------------------------

`Textarea` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Component Styles API

Hover over selectors to highlight corresponding elements

[Get element ref](#get-element-ref)
-----------------------------------

[Accessibility](#accessibility)
-------------------------------

If `Textarea` is used without `label` prop, it will not be announced properly by screen reader:

Set `aria-label` to make the input accessible. In this case label will not be visible, but screen reader will announce it:

If `label` prop is set, input will be accessible it is not required to set `aria-label`:</content>
</page>

<page>
  <title>Switch | Mantine</title>
  <url>https://mantine.dev/core/switch/</url>
  <content>[Usage](#usage)
---------------

I agree to sell my privacy

With thumb indicator

Disabled

[Controlled](#controlled)
-------------------------

[Inner Labels](#inner-labels)
-----------------------------

[Icon labels](#icon-labels)
---------------------------

[Thumb icon](#thumb-icon)
-------------------------

[With tooltip](#with-tooltip)
-----------------------------

Set `refProp="rootRef"` on [Tooltip](https://mantine.dev/core/tooltip/) and other similar components to make them work with `Switch`:

[Pointer cursor](#pointer-cursor)
---------------------------------

By default, switch input and label have `cursor: default` (same as native `input[type="checkbox"]`). To change cursor to pointer, set `cursorType` on [theme](https://mantine.dev/theming/theme-object/):

[Add props to the root element](#browser-support)
-------------------------------------------------

All props passed to the component are forwarded to the input element. If you need to add props to the root element, use `wrapperProps`. In the following example:

*   `data-testid="wrapper"` is added to the root element
*   `data-testid="input"` is added to the input element

[Switch.Group](#switchgroup)
----------------------------

Select your favorite framework/library

This is anonymous

[Controlled Switch.Group](#controlled-switchgroup)
--------------------------------------------------

[Change styles based on checked state](#change-styles-based-on-checked-state)
-----------------------------------------------------------------------------

[Styles API](#styles-api)
-------------------------

`Switch` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Switch component

Switch description

Switch error

Component Styles API

Hover over selectors to highlight corresponding elements

[Get input ref](#get-input-ref)
-------------------------------

[Accessibility](#accessibility)
-------------------------------

`Switch` is a regular `input[type="checkbox"]`. Set `aria-label` if the `Switch` is used without `label` prop:</content>
</page>

<page>
  <title>TextInput | Mantine</title>
  <url>https://mantine.dev/core/text-input/</url>
  <content>[Usage](#usage)
---------------

`TextInput` component supports [Input](https://mantine.dev/core/input/) and [Input.Wrapper](https://mantine.dev/core/input/) components features and all `input` element props. `TextInput` documentation does not include all features supported by the component – see [Input](https://mantine.dev/core/input/) documentation to learn about all available features.

Input label

Input description

[Controlled](#controlled)
-------------------------

[Left and right sections](#left-and-right-sections)
---------------------------------------------------

`TextInput` supports `leftSection` and `rightSection` props. These sections are rendered with absolute position inside the input wrapper. You can use them to display icons, input controls or any other elements.

You can use the following props to control sections styles and content:

*   `rightSection`/`leftSection` – React node to render on the corresponding side of input
*   `rightSectionWidth`/`leftSectionWidth` – controls width of the right section and padding on the corresponding side of the input. By default, it is controlled by component `size` prop.
*   `rightSectionPointerEvents`/`leftSectionPointerEvents` – controls `pointer-events` property of the section. If you want to render a non-interactive element, set it to `none` to pass clicks through to the input.

[Error state](#error-state)
---------------------------

With error message

Invalid name

[Disabled state](#disabled-state)
---------------------------------

[Styles API](#styles-api)
-------------------------

`TextInput` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Component Styles API

Hover over selectors to highlight corresponding elements

[Get element ref](#get-element-ref)
-----------------------------------

[Accessibility](#accessibility)
-------------------------------

If `TextInput` is used without `label` prop, it will not be announced properly by screen reader:

Set `aria-label` to make the input accessible. In this case label will not be visible, but screen reader will announce it:

If `label` prop is set, input will be accessible it is not required to set `aria-label`:</content>
</page>

<page>
  <title>Autocomplete | Mantine</title>
  <url>https://mantine.dev/core/autocomplete/</url>
  <content>[Made with Combobox](#combobox)
-------------------------------

`Autocomplete` is an **opinionated** component built on top of [Combobox](https://mantine.dev/core/combobox/) component. It has a limited set of features to cover only the basic use cases. If you need more advanced features, you can build your own component with [Combobox](https://mantine.dev/core/combobox/). You can find examples of custom autocomplete components on [the examples page](https://mantine.dev/combobox/?e=BasicSelect).

[Usage](#usage)
---------------

`Autocomplete` provides user a list of suggestions based on the input, however user is not limited to suggestions and can type anything.

[Controlled](#controlled)
-------------------------

`Autocomplete` value must be a string, other types are not supported. `onChange` function is called with a string value as a single argument.

[Data formats](#data-formats)
-----------------------------

`Autocomplete` `data` prop accepts data in one of the following formats:

Array of strings:

Array of groups with string options:

[Options filtering](#options-filtering)
---------------------------------------

By default, `Autocomplete` filters options by checking if the option label contains input value. You can change this behavior with `filter` prop.`filter` function receives an object with the following properties as a single argument:

*   `options` – array of options or options groups, all options are in `{ value: string; label: string; disabled?: boolean }` format
*   `search` – current search query
*   `limit` – value of `limit` prop passed to `Autocomplete`

Example of a custom filter function that matches options by words instead of letters sequence:

[Sort options](#sort-options)
-----------------------------

By default, options are sorted by their position in the data array. You can change this behavior with `filter` function:

[Large data sets](#large-data-sets)
-----------------------------------

The best strategy for large data sets is to limit the number of options that are rendered at the same time. You can do it with `limit` prop. Note that if you use a custom `filter` function, you need to implement your own logic to limit the number of options in `filter`

Example of `Autocomplete` with 100 000 options, 5 options are rendered at the same time:

100 000 options autocomplete

[renderOption](#renderoption)
-----------------------------

`renderOption` callback allows you to customize option rendering. It is called with option object. The function must return a React node.

[Scrollable dropdown](#scrollable-dropdown)
-------------------------------------------

By default, the options list is wrapped with [ScrollArea.Autosize](https://mantine.dev/core/scroll-area/). You can control dropdown max-height with `maxDropdownHeight` prop if you do not change the default settings.

If you want to use native scrollbars, set `withScrollArea={false}`. Note that in this case, you will need to change dropdown styles with [Styles API](https://mantine.dev/styles/styles-api/).

With scroll area (default)

[Group options](#group-options)
-------------------------------

[Disabled options](#disabled-options)
-------------------------------------

When option is disabled, it cannot be selected and is ignored in keyboard navigation.

[Combobox props](#combobox-props)
---------------------------------

You can override [Combobox](https://mantine.dev/core/combobox/) props with `comboboxProps`. It is useful when you need to change some of the props that are not exposed by `Autocomplete`, for example `withinPortal`:

[Change dropdown z-index](#change-z-index)
------------------------------------------

[Inside Popover](#inside-popover)
---------------------------------

To use `Autocomplete` inside popover, you need to set `withinPortal: false`:

[Clearable](#clearable)
-----------------------

Set `clearable` prop to display the clear button in the right section. The button is not displayed when:

*   The component does not have a value
*   The component is disabled
*   The component is read only

[Control dropdown opened state](#control-dropdown-opened-state)
---------------------------------------------------------------

You can control dropdown opened state with `dropdownOpened` prop. Additionally, you can use `onDropdownClose` and `onDropdownOpen` to listen to dropdown opened state changes.

[Dropdown position](#dropdown-position)
---------------------------------------

By default, the dropdown is displayed below the input if there is enough space; otherwise it is displayed above the input. You can change this behavior by setting `position` and `middlewares` props, which are passed down to the underlying [Popover](https://mantine.dev/core/popover/) component.

Example of dropdown that is always displayed above the input:

[Dropdown animation](#dropdown-animation)
-----------------------------------------

By default, dropdown animations are disabled. To enable them, you can set `transitionProps`, which will be passed down to the underlying [Transition](https://mantine.dev/core/transition/) component.

[Dropdown padding](#dropdown-padding)
-------------------------------------

[Dropdown shadow](#dropdown-shadow)
-----------------------------------

[Left and right sections](#left-and-right-sections)
---------------------------------------------------

`Autocomplete` supports `leftSection` and `rightSection` props. These sections are rendered with absolute position inside the input wrapper. You can use them to display icons, input controls or any other elements.

You can use the following props to control sections styles and content:

*   `rightSection`/`leftSection` – React node to render on the corresponding side of input
*   `rightSectionWidth`/`leftSectionWidth` – controls width of the right section and padding on the corresponding side of the input. By default, it is controlled by component `size` prop.
*   `rightSectionPointerEvents`/`leftSectionPointerEvents` – controls `pointer-events` property of the section. If you want to render a non-interactive element, set it to `none` to pass clicks through to the input.

[Input props](#input-props)
---------------------------

`Autocomplete` component supports [Input](https://mantine.dev/core/input/) and [Input.Wrapper](https://mantine.dev/core/input/) components features and all `input` element props. `Autocomplete` documentation does not include all features supported by the component – see [Input](https://mantine.dev/core/input/) documentation to learn about all available features.

Input label

Input description

[Read only](#read-only)
-----------------------

Set `readOnly` to make the input read only. When `readOnly` is set, `Autocomplete` will not show suggestions and will not call `onChange` function.

[Disabled](#disabled)
---------------------

Set `disabled` to disable the input. When `disabled` is set, user cannot interact with the input and `Autocomplete` will not show suggestions.

[Error state](#error-state)
---------------------------

With error message

Invalid name

[Styles API](#styles-api)
-------------------------

`Autocomplete` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Component Styles API

Hover over selectors to highlight corresponding elements

[Get element ref](#get-element-ref)
-----------------------------------

[Accessibility](#accessibility)
-------------------------------

If `Autocomplete` is used without `label` prop, it will not be announced properly by screen reader:

Set `aria-label` to make the input accessible. In this case label will not be visible, but screen reader will announce it:

If `label` prop is set, input will be accessible it is not required to set `aria-label`:</content>
</page>

<page>
  <title>Combobox | Mantine</title>
  <url>https://mantine.dev/core/combobox/</url>
  <content>[Examples](#examples)
---------------------

This page contains only a small set of examples, as the full code of the demos is long. You can find all 50+ examples on a [separate page](https://mantine.dev/combobox/?e=BasicSelect).

[Open Combobox examples page](https://mantine.dev/combobox?e=BasicSelect)

[Usage](#usage)
---------------

`Combobox` provides a set of components and hooks to custom select, multiselect or autocomplete components. The component is very flexible – you have full control of the rendering and logic.

[useCombobox hook](#usecombobox-hook)
-------------------------------------

`useCombobox` hook provides combobox store. The store contains the current state of the component and handlers to update it. Created store must be passed to the `store` prop of `Combobox`:

[useCombobox options](#usecombobox-options)
-------------------------------------------

`useCombobox` hooks accepts an options object with the following properties:

You can import `UseComboboxOptions` type from `@mantine/core` package:

[Combobox store](#combobox-store)
---------------------------------

Combobox store is an object with the following properties:

You can import `ComboboxStore` type from `@mantine/core` package:

[useCombobox handlers](#usecombobox-handlers)
---------------------------------------------

Combobox store handlers can be used to control `Combobox` state. For example, to open the dropdown, call `openDropdown` handler:

You can use store handlers in `useCombobox` options. For example, you can call `selectFirstOption` when the dropdown is opened and `resetSelectedOption` when it is closed:

[Combobox.Target](#comboboxtarget)
----------------------------------

`Combobox.Target` should be used as a wrapper for the target element or component. `Combobox.Target` marks its child as a target for dropdown and sets `aria-*` attributes and adds keyboard event listeners to it.

`Combobox.Target` requires a single child element or component. The child component must accept `ref` and `...others` props. You can use any Mantine component as a target without any additional configuration, for example, [Button](https://mantine.dev/core/button/), [TextInput](https://mantine.dev/core/text-input/) or [InputBase](https://mantine.dev/core/input/#inputbase-component).

Example of using `Combobox.Target` with [TextInput](https://mantine.dev/core/text-input/) component:

Pick value or type anything

Example of using `Combobox.Target` with [Button](https://mantine.dev/core/button/) component:

Selected item: Nothing selected

[Split events and dropdown targets](#split-events-and-dropdown-targets)
-----------------------------------------------------------------------

In some cases, you might need to use different elements as an events target and as a dropdown. Use `Combobox.EventsTarget` to add `aria-*` attributes and keyboard event handlers, and `Combobox.DropdownTarget` to position the dropdown relative to the target.

You can have as many `Combobox.EventsTarget` as you need, but only one `Combobox.DropdownTarget` per `Combobox`.

Example of using `Combobox.EventsTarget` and `Combobox.DropdownTarget` with [PillsInput](https://mantine.dev/core/pills-input/) component to create a searchable multiselect component:

[Update selected option index](#update-selected-option-index)
-------------------------------------------------------------

`updateSelectedOptionIndex` handler is required to be called when options list changes. Usually, the options list changes when options are filtered based on the search query. In this case, you need to call `updateSelectedOptionIndex` in `onChange` handler of the search input.

Example of using `updateSelectedOptionIndex` handler in searchable select component:

[Search input](#search-input)
-----------------------------

If you prefer search input inside the dropdown, use `Combobox.Search` component. To focus the search input, call `combobox.focusSearchInput`, usually it is done when the dropdown is opened. To prevent focus loss after the dropdown is closed, call `combobox.focusTarget`:

Selected item: Nothing selected

[Select first option](#select-first-option)
-------------------------------------------

Use `combobox.selectFirstOption` function to select the first option. It is useful if you want to select the first option when user searching for options in the list. If there are no options available, it will do nothing.

Pick value or type anything

[Active option](#active-option)
-------------------------------

Set `active` prop on `Combobox.Option` component to mark it as active. By default, an active option does not have any styles, you can use `data-combobox-active` [data attribute](https://mantine.dev/styles/data-attributes/) to style it.

`combobox.selectActiveOption` function selects active option. Usually, it is called when the dropdown is opened:

[Options groups](#options-groups)
---------------------------------

Render `Combobox.Option` components inside `Combobox.Group` to create options group. `Combobox.Group` label will be automatically hidden if the group does not have any children.

[Scrollable list](#scrollable-list)
-----------------------------------

Set `max-height` style on either `Combobox.Dropdown` or `Combobox.Options` to make the options list scrollable. You can use `mah` [style prop](https://mantine.dev/styles/style-props/) to set `max-height`.

[Scrollable list with ScrollArea](#scrollable-list-with-scrollarea)
-------------------------------------------------------------------

You can also use [ScrollArea or ScrollArea.Autosize](https://mantine.dev/core/scroll-area/) components instead of native scrollbars:

[Hide dropdown](#hide-dropdown)
-------------------------------

Set `hidden` prop on `Combobox.Dropdown` to hide the dropdown. For example, it can be useful when you want to show the dropdown only when there is at least one option available:

Pick value or type anything

[Control dropdown opened state](#control-dropdown-opened-state)
---------------------------------------------------------------

To control the dropdown opened state, pass `opened` to `useCombobox` hook:

Autocomplete

Dropdown is opened/closed when button is clicked

[Popover props](#popover-props)
-------------------------------

`Combobox` supports most of [Popover](https://mantine.dev/core/popover/) props. For example, you can control dropdown position with `position` prop and disable Floating UI middlewares with `middlewares` prop:

[Without dropdown](#without-dropdown)
-------------------------------------

You can use `Combobox` without dropdown. To do so, use `Combobox.EventsTarget` instead of `Combobox.Target`:

[Styles API](#styles-api)
-------------------------

`Combobox` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Component Styles API

Hover over selectors to highlight corresponding elements</content>
</page>

<page>
  <title>MultiSelect | Mantine</title>
  <url>https://mantine.dev/core/multi-select/</url>
  <content>[Made with Combobox](#combobox)
-------------------------------

`MultiSelect` is an **opinionated** component built on top of [Combobox](https://mantine.dev/core/combobox/) component. It has a limited set of features to cover only the basic use cases. If you need more advanced features, you can build your own component with [Combobox](https://mantine.dev/core/combobox/). You can find examples of custom multi select components on [the examples page](https://mantine.dev/combobox/?e=BasicSelect).

[Usage](#usage)
---------------

`MultiSelect` provides a way to enter multiple values. `MultiSelect` is similar to [TagsInput](https://mantine.dev/core/tags-input/), but it does not allow entering custom values.

[Controlled](#controlled)
-------------------------

`MultiSelect` value must be an array of strings, other types are not supported. `onChange` function is called with an array of strings as a single argument.

[Clearable](#clearable)
-----------------------

Set `clearable` prop to display the clear button in the right section. The button is not displayed when:

*   The component does not have a value
*   The component is disabled
*   The component is read only

[Searchable](#searchable)
-------------------------

Set `searchable` prop to allow filtering options by user input:

[Controlled search value](#controlled-search-value)
---------------------------------------------------

You can control search value with `searchValue` and `onSearchChange` props:

[Nothing found](#nothing-found)
-------------------------------

Set the `nothingFoundMessage` prop to display a given message when no options match the search query or there is no data available. If the `nothingFoundMessage` prop is not set, the `MultiSelect` dropdown will be hidden.

[Checked option icon](#checked-option-icon)
-------------------------------------------

Set `checkIconPosition` prop to `left` or `right` to control position of check icon in active option. To remove the check icon, set `withCheckIcon={false}`.

[Max selected values](#max-selected-values)
-------------------------------------------

You can limit the number of selected values with `maxValues` prop. This will not allow adding more values once the limit is reached.

[Hide selected options](#hide-selected-options)
-----------------------------------------------

To remove selected options from the list of available options, set `hidePickedOptions` prop:

[Data formats](#data-formats)
-----------------------------

`MultiSelect` `data` prop accepts data in one of the following formats:

Array of strings:

Array of object with `value`, `label` and optional `disabled` keys:

Array of groups with string options:

Array of groups with object options:

[Options filtering](#options-filtering)
---------------------------------------

By default, `MultiSelect` filters options by checking if the option label contains input value. You can change this behavior with `filter` prop.`filter` function receives an object with the following properties as a single argument:

*   `options` – array of options or options groups, all options are in `{ value: string; label: string; disabled?: boolean }` format
*   `search` – current search query
*   `limit` – value of `limit` prop passed to `MultiSelect`

Example of a custom filter function that matches options by words instead of letters sequence:

What countries have you visited?

[Sort options](#sort-options)
-----------------------------

By default, options are sorted by their position in the data array. You can change this behavior with `filter` function:

[Large data sets](#large-data-sets)
-----------------------------------

The best strategy for large data sets is to limit the number of options that are rendered at the same time. You can do it with `limit` prop. Note that if you use a custom `filter` function, you need to implement your own logic to limit the number of options in `filter`

Example of `MultiSelect` with 100 000 options, 5 options are rendered at the same time:

100 000 options autocomplete

[renderOption](#renderoption)
-----------------------------

`renderOption` callback allows you to customize option rendering. It is called with option object and checked state. The function must return a React node.

[Scrollable dropdown](#scrollable-dropdown)
-------------------------------------------

By default, the options list is wrapped with [ScrollArea.Autosize](https://mantine.dev/core/scroll-area/). You can control dropdown max-height with `maxDropdownHeight` prop if you do not change the default settings.

If you want to use native scrollbars, set `withScrollArea={false}`. Note that in this case, you will need to change dropdown styles with [Styles API](https://mantine.dev/styles/styles-api/).

With scroll area (default)

[Group options](#group-options)
-------------------------------

[Disabled options](#disabled-options)
-------------------------------------

When option is disabled, it cannot be selected and is ignored in keyboard navigation. Note that user can still enter disabled option as a value. If you want to prohibit certain values, use controlled component and filter them out in `onChange` function.

[Combobox props](#combobox-props)
---------------------------------

You can override [Combobox](https://mantine.dev/core/combobox/) props with `comboboxProps`. It is useful when you need to change some of the props that are not exposed by `MultiSelect`, for example `withinPortal`:

[Change dropdown z-index](#change-z-index)
------------------------------------------

[Inside Popover](#inside-popover)
---------------------------------

To use `MultiSelect` inside popover, you need to set `withinPortal: false`:

[Control dropdown opened state](#control-dropdown-opened-state)
---------------------------------------------------------------

You can control dropdown opened state with `dropdownOpened` prop. Additionally, you can use `onDropdownClose` and `onDropdownOpen` to listen to dropdown opened state changes.

[Dropdown position](#dropdown-position)
---------------------------------------

By default, the dropdown is displayed below the input if there is enough space; otherwise it is displayed above the input. You can change this behavior by setting `position` and `middlewares` props, which are passed down to the underlying [Popover](https://mantine.dev/core/popover/) component.

Example of dropdown that is always displayed above the input:

[Dropdown width](#dropdown-width)
---------------------------------

To change dropdown width, set `width` prop in `comboboxProps`. By default, dropdown width is equal to the input width.

[Dropdown offset](#dropdown-offset)
-----------------------------------

To change dropdown offset, set `offset` prop in `comboboxProps`:

[Dropdown animation](#dropdown-animation)
-----------------------------------------

By default, dropdown animations are disabled. To enable them, you can set `transitionProps`, which will be passed down to the underlying [Transition](https://mantine.dev/core/transition/) component.

[Dropdown padding](#dropdown-padding)
-------------------------------------

[Dropdown shadow](#dropdown-shadow)
-----------------------------------

[Left and right sections](#left-and-right-sections)
---------------------------------------------------

`MultiSelect` supports `leftSection` and `rightSection` props. These sections are rendered with absolute position inside the input wrapper. You can use them to display icons, input controls or any other elements.

You can use the following props to control sections styles and content:

*   `rightSection`/`leftSection` – React node to render on the corresponding side of input
*   `rightSectionWidth`/`leftSectionWidth` – controls width of the right section and padding on the corresponding side of the input. By default, it is controlled by component `size` prop.
*   `rightSectionPointerEvents`/`leftSectionPointerEvents` – controls `pointer-events` property of the section. If you want to render a non-interactive element, set it to `none` to pass clicks through to the input.

[Input props](#input-props)
---------------------------

`MultiSelect` component supports [Input](https://mantine.dev/core/input/) and [Input.Wrapper](https://mantine.dev/core/input/) components features and all `input` element props. `MultiSelect` documentation does not include all features supported by the component – see [Input](https://mantine.dev/core/input/) documentation to learn about all available features.

Input label

Input description

[Read only](#read-only)
-----------------------

Set `readOnly` to make the input read only. When `readOnly` is set, `MultiSelect` will not show suggestions and will not call `onChange` function.

[Disabled](#disabled)
---------------------

Set `disabled` to disable the input. When `disabled` is set, user cannot interact with the input and `MultiSelect` will not show suggestions.

[Error state](#error-state)
---------------------------

With error message

Invalid name

[Styles API](#styles-api)
-------------------------

`MultiSelect` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Component Styles API

Hover over selectors to highlight corresponding elements

[Get element ref](#get-element-ref)
-----------------------------------

[Accessibility](#accessibility)
-------------------------------

If `MultiSelect` is used without `label` prop, it will not be announced properly by screen reader:

Set `aria-label` to make the input accessible. In this case label will not be visible, but screen reader will announce it:

If `label` prop is set, input will be accessible it is not required to set `aria-label`:

To set `aria-label` on the clear button, use `clearButtonProps`. Note that it is required only when `clearable` is set.</content>
</page>

<page>
  <title>Pill | Mantine</title>
  <url>https://mantine.dev/core/pill/</url>
  <content>[Usage](#usage)
---------------

    import { Pill } from '@mantine/core';
    
    function Demo() {
      return <Pill>React</Pill>;
    }

[Inside inputs](#inside-inputs)
-------------------------------

`Pill` component is designed to be used inside inputs. It can be used to create custom multi select or tag inputs.

Item 0Item 1Item 2Item 3Item 4Item 5Item 6Item 7Item 8Item 9

    import { Pill, InputBase } from '@mantine/core';
    
    function Demo() {
      const pills = Array(10)
        .fill(0)
        .map((_, index) => (
          <Pill key={index} withRemoveButton>
            Item {index}
          </Pill>
        ));
    
      return (
        <InputBase component="div" multiline>
          <Pill.Group>{pills}</Pill.Group>
        </InputBase>
      );
    }

[Styles API](#styles-api)
-------------------------

`Pill` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Component Styles API

Hover over selectors to highlight corresponding elements

    /*
     * Hover over selectors to apply outline styles
     *
     */</content>
</page>

<page>
  <title>PillsInput | Mantine</title>
  <url>https://mantine.dev/core/pills-input/</url>
  <content>[Usage](#usage)
---------------

`PillsInput` is a utility component that can be used to create custom tag inputs, multi selects and other similar components. By itself it does not include any logic, it only renders given children. Usually, `PillsInput` is used in combination with [Pill](https://mantine.dev/core/pill/) component.

[Input props](#input-props)
---------------------------

`PillsInput` component supports [Input](https://mantine.dev/core/input/) and [Input.Wrapper](https://mantine.dev/core/input/) components features and all `div` element props. `PillsInput` documentation does not include all features supported by the component – see [Input](https://mantine.dev/core/input/) documentation to learn about all available features.

Input label

Input description

[Searchable select example](#searchable-select-example)
-------------------------------------------------------

Combine `PillsInput` with [Combobox](https://mantine.dev/core/combobox/) to create searchable multiselect:

[Accessibility](#accessibility)
-------------------------------

If `PillsInput` is used without label prop, it will not be announced properly by screen reader:

Set `aria-label` on the `PillsInput.Field` component to make the input accessible. In this case label will not be visible, but screen reader will announce it:

If `label` prop is set, the input will be accessible it is not required to set `aria-label`:</content>
</page>

<page>
  <title>Select | Mantine</title>
  <url>https://mantine.dev/core/select/</url>
  <content>[Made with Combobox](#combobox)
-------------------------------

`Select` is an **opinionated** component built on top of [Combobox](https://mantine.dev/core/combobox/) component. It has a limited set of features to cover only the basic use cases. If you need more advanced features, you can build your own component with [Combobox](https://mantine.dev/core/combobox/). You can find examples of custom select components on [the examples page](https://mantine.dev/combobox/?e=BasicSelect).

[Usage](#usage)
---------------

`Select` allows capturing user input based on suggestions from the list. Unlike [Autocomplete](https://mantine.dev/core/autocomplete/), `Select` does not allow entering custom values.

[Controlled](#controlled)
-------------------------

`Select` value must be a string, other types are not supported. `onChange` function is called with a string value as a single argument.

[onChange handler](#onchange-handler)
-------------------------------------

`onChange` is called with two arguments:

*   `value` - string value of the selected option
*   `option` – selected option object

If you prefer object format in state, use second argument of onChange handler:

[Clearable](#clearable)
-----------------------

Set `clearable` prop to display the clear button in the right section. The button is not displayed when:

*   The component does not have a value
*   The component is disabled
*   The component is read only

[Allow deselect](#allow-deselect)
---------------------------------

`allowDeselect` prop determines whether the value should be deselected when user clicks on the selected option. By default, `allowDeselect` is `true`:

Option can NOT be deselected

Option can be deselected

This is default behavior, click 'React' in the dropdown

[Searchable](#searchable)
-------------------------

Set `searchable` prop to allow filtering options by user input:

[Controlled search value](#controlled-search-value)
---------------------------------------------------

You can control search value with `searchValue` and `onSearchChange` props:

[Nothing found](#nothing-found)
-------------------------------

Set the `nothingFoundMessage` prop to display a given message when no options match the search query or there is no data available. If the `nothingFoundMessage` prop is not set, the `Select` dropdown will be hidden.

[Checked option icon](#checked-option-icon)
-------------------------------------------

Set `checkIconPosition` prop to `left` or `right` to control position of check icon in active option. To remove the check icon, set `withCheckIcon={false}`.

[Data formats](#data-formats)
-----------------------------

`Select` `data` prop accepts data in one of the following formats:

Array of strings:

Array of object with `value`, `label` and optional `disabled` keys:

Array of groups with string options:

Array of groups with object options:

[Options filtering](#options-filtering)
---------------------------------------

By default, `Select` filters options by checking if the option label contains input value. You can change this behavior with `filter` prop.`filter` function receives an object with the following properties as a single argument:

*   `options` – array of options or options groups, all options are in `{ value: string; label: string; disabled?: boolean }` format
*   `search` – current search query
*   `limit` – value of `limit` prop passed to `Select`

Example of a custom filter function that matches options by words instead of letters sequence:

[Sort options](#sort-options)
-----------------------------

By default, options are sorted by their position in the data array. You can change this behavior with `filter` function:

[Large data sets](#large-data-sets)
-----------------------------------

The best strategy for large data sets is to limit the number of options that are rendered at the same time. You can do it with `limit` prop. Note that if you use a custom `filter` function, you need to implement your own logic to limit the number of options in `filter`

Example of `Select` with 100 000 options, 5 options are rendered at the same time:

100 000 options autocomplete

[renderOption](#renderoption)
-----------------------------

`renderOption` callback allows you to customize option rendering. It is called with option object and checked state. The function must return a React node.

[Scrollable dropdown](#scrollable-dropdown)
-------------------------------------------

By default, the options list is wrapped with [ScrollArea.Autosize](https://mantine.dev/core/scroll-area/). You can control dropdown max-height with `maxDropdownHeight` prop if you do not change the default settings.

If you want to use native scrollbars, set `withScrollArea={false}`. Note that in this case, you will need to change dropdown styles with [Styles API](https://mantine.dev/styles/styles-api/).

With scroll area (default)

[Group options](#group-options)
-------------------------------

[Disabled options](#disabled-options)
-------------------------------------

When option is disabled, it cannot be selected and is ignored in keyboard navigation.

[Combobox props](#combobox-props)
---------------------------------

You can override [Combobox](https://mantine.dev/core/combobox/) props with `comboboxProps`. It is useful when you need to change some of the props that are not exposed by `Select`, for example `withinPortal`:

[Change dropdown z-index](#change-z-index)
------------------------------------------

[Inside Popover](#inside-popover)
---------------------------------

To use `Select` inside popover, you need to set `withinPortal: false`:

[Control dropdown opened state](#control-dropdown-opened-state)
---------------------------------------------------------------

You can control dropdown opened state with `dropdownOpened` prop. Additionally, you can use `onDropdownClose` and `onDropdownOpen` to listen to dropdown opened state changes.

[Dropdown position](#dropdown-position)
---------------------------------------

By default, the dropdown is displayed below the input if there is enough space; otherwise it is displayed above the input. You can change this behavior by setting `position` and `middlewares` props, which are passed down to the underlying [Popover](https://mantine.dev/core/popover/) component.

Example of dropdown that is always displayed above the input:

[Dropdown width](#dropdown-width)
---------------------------------

To change dropdown width, set `width` prop in `comboboxProps`. By default, dropdown width is equal to the input width.

[Dropdown offset](#dropdown-offset)
-----------------------------------

To change dropdown offset, set `offset` prop in `comboboxProps`:

[Dropdown animation](#dropdown-animation)
-----------------------------------------

By default, dropdown animations are disabled. To enable them, you can set `transitionProps`, which will be passed down to the underlying [Transition](https://mantine.dev/core/transition/) component.

[Dropdown padding](#dropdown-padding)
-------------------------------------

[Dropdown shadow](#dropdown-shadow)
-----------------------------------

[Left and right sections](#left-and-right-sections)
---------------------------------------------------

`Select` supports `leftSection` and `rightSection` props. These sections are rendered with absolute position inside the input wrapper. You can use them to display icons, input controls or any other elements.

You can use the following props to control sections styles and content:

*   `rightSection`/`leftSection` – React node to render on the corresponding side of input
*   `rightSectionWidth`/`leftSectionWidth` – controls width of the right section and padding on the corresponding side of the input. By default, it is controlled by component `size` prop.
*   `rightSectionPointerEvents`/`leftSectionPointerEvents` – controls `pointer-events` property of the section. If you want to render a non-interactive element, set it to `none` to pass clicks through to the input.

[Input props](#input-props)
---------------------------

`Select` component supports [Input](https://mantine.dev/core/input/) and [Input.Wrapper](https://mantine.dev/core/input/) components features and all `input` element props. `Select` documentation does not include all features supported by the component – see [Input](https://mantine.dev/core/input/) documentation to learn about all available features.

Input label

Input description

[Read only](#read-only)
-----------------------

Set `readOnly` to make the input read only. When `readOnly` is set, `Select` will not show suggestions and will not call `onChange` function.

[Disabled](#disabled)
---------------------

Set `disabled` to disable the input. When `disabled` is set, user cannot interact with the input and `Select` will not show suggestions.

[Error state](#error-state)
---------------------------

With error message

Invalid name

[Styles API](#styles-api)
-------------------------

`Select` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Component Styles API

Hover over selectors to highlight corresponding elements

[Get element ref](#get-element-ref)
-----------------------------------

[Accessibility](#accessibility)
-------------------------------

If `Select` is used without `label` prop, it will not be announced properly by screen reader:

Set `aria-label` to make the input accessible. In this case label will not be visible, but screen reader will announce it:

If `label` prop is set, input will be accessible it is not required to set `aria-label`:

To set `aria-label` on the clear button, use `clearButtonProps`. Note that it is required only when `clearable` is set.</content>
</page>

<page>
  <title>ActionIcon | Mantine</title>
  <url>https://mantine.dev/core/action-icon/</url>
  <content>[Usage](#usage)
---------------

[Gradient variant](#gradient-variant)
-------------------------------------

When `variant` prop is set to `gradient`, you can control gradient with `gradient` prop, it accepts an object with `from`, `to` and `deg` properties. If the`gradient` prop is not set, `ActionIcon` will use `theme.defaultGradient` which can be configured on the [theme object](https://mantine.dev/theming/theme-object/). `gradient` prop is ignored when `variant` is not `gradient`.

Note that `variant="gradient"` supports only linear gradients with two colors. If you need a more complex gradient, then use [Styles API](https://mantine.dev/styles/styles-api/) to modify `ActionIcon` styles.

[Size](#size)
-------------

You can use any valid CSS value in `size` prop, it is used to set `width`, `min-width`, `min-height` and `height` properties. Note that `size` prop does not control child [icon](https://mantine.dev/guides/icons/) size, you need to set it manually on icon component. When `size` is a number, the value is treated as `px` units and converted to [rem](https://mantine.dev/styles/rem/) units.

If you want `ActionIcon` to have the same size as Mantine inputs, use `size="input-sm"` prop:

[Disabled state](#disabled-state)
---------------------------------

To make `ActionIcon` disabled set `disabled` prop, this will prevent any interactions with the button and add disabled styles. If you want the button to just look disabled but still be interactive, set `data-disabled` prop instead. Note that disabled styles are the same for all variants.

[Disabled state when ActionIcon is link](#disabled-state-when-actionicon-is-link)
---------------------------------------------------------------------------------

`<a />` element does not support `disabled` attribute. To make `ActionIcon` disabled when it is rendered as a link, set `data-disabled` attribute instead and prevent default behavior in `onClick` event handler.

[Customize disabled styles](#customize-disabled-styles)
-------------------------------------------------------

To customize disabled styles, it is recommended to use both `&:disabled` and `&[data-disabled]` selectors:

*   `&:disabled` is used to style the button when `disabled` prop is set and also when the button is disabled by the parent component (for example, when `disabled` prop is set on a `<fieldset />` element which contains `ActionIcon`).
*   `&[data-disabled]` is used to style the button when it is not actually disabled but should look like it is (for example, `data-disabled` should be used if you need to use [Tooltip](https://mantine.dev/core/tooltip/) with disabled `ActionIcon` or when `ActionIcon` is used as a link)

[Disabled button with Tooltip](#disabled-button-with-tooltip)
-------------------------------------------------------------

`onMouseLeave` event [is not triggered](https://github.com/facebook/react/issues/18753) when `ActionIcon` is disabled, so if you need to use [Tooltip](https://mantine.dev/core/tooltip/) with disabled `ActionIcon` you need to set `data-disabled` prop on `ActionIcon` instead of `disabled`. Note that it is also required to change `onClick` event handler to `(event) => event.preventDefault()` as `ActionIcon` is not actually disabled and will still trigger `onClick` event.

[Loading state](#loading-state)
-------------------------------

When `loading` prop is set, `ActionIcon` will be disabled and [Loader](https://mantine.dev/core/loader/) with overlay will be rendered in the center of the button. [Loader](https://mantine.dev/core/loader/) color depends on `ActionIcon` variant.

[Loader props](#loader-props)
-----------------------------

You can customize [Loader](https://mantine.dev/core/loader/) with `loaderProps` prop, it accepts all props that [Loader](https://mantine.dev/core/loader/) component has:

[Add custom variants](#add-custom-variants)
-------------------------------------------

To add new `ActionIcon` variants, use [data-variant](https://mantine.dev/styles/variants-sizes/) attribute. Usually new variants are added on [theme](https://mantine.dev/theming/theme-object/), this way they are available in all `ActionIcon` components in your application.

[Customize variants colors](#customize-variants-colors)
-------------------------------------------------------

You can customize colors for `ActionIcon` and other components variants by adding [variantColorResolver](https://mantine.dev/theming/colors/#colors-variant-resolver) to your theme.

[autoContrast](#auto-contrast)
------------------------------

`ActionIcon` supports `autoContrast` prop and [theme.autoContrast](https://mantine.dev/theming/theme-object/#autocontrast). If `autoContrast` is set either on `ActionIcon` or on theme, content color will be adjusted to have sufficient contrast with the value specified in `color` prop.

Note that `autoContrast` feature works only if you use `color` prop to change background color. `autoContrast` works only with `filled` variant.

[Add custom sizes](#add-custom-sizes)
-------------------------------------

`ActionIcon` sizes are defined by `--ai-size-{x}` CSS variables. The easiest way to add new sizes is to define additional `--ai-size-{x}` variables on the `root` element:

[ActionIcon.Group](#actionicongroup)
------------------------------------

Note that you must not wrap child `ActionIcon` components with any additional elements:

[ActionIcon.GroupSection](#actionicongroupsection)
--------------------------------------------------

Use `ActionIcon.GroupSection` component to render sections that are not `ActionIcon` inside `ActionIcon.Group`:

[Polymorphic component](#polymorphic-component)
-----------------------------------------------

`ActionIcon` is a [polymorphic component](https://mantine.dev/guides/polymorphic/) – its default root element is `button`, but it can be changed to any other element or component with `component` prop:

You can also use components in `component` prop, for example, Next.js `Link`:

> **Polymorphic components with TypeScript**
> 
> Note that polymorphic components props types are different from regular components – they do not extend HTML element props of the default element. For example, `ActionIconProps` does not extend `React.ComponentPropsWithoutRef'<'div'>'` although `button` is the default element.
> 
> If you want to create a wrapper for a polymorphic component that is not polymorphic (does not support `component` prop), then your component props interface should extend HTML element props, for example:
> 
> If you want your component to remain polymorphic after wrapping, use `createPolymorphicComponent` function described in [this guide](https://mantine.dev/guides/polymorphic/).

[Get element ref](#get-element-ref)
-----------------------------------

[Accessibility](#accessibility)
-------------------------------

To make `ActionIcon` accessible for screen readers, you need to either set `aria-label` or use [VisuallyHidden](https://mantine.dev/core/visually-hidden/) component:</content>
</page>

<page>
  <title>TagsInput | Mantine</title>
  <url>https://mantine.dev/core/tags-input/</url>
  <content>[Made with Combobox](#combobox)
-------------------------------

`TagsInput` is an **opinionated** component built on top of [Combobox](https://mantine.dev/core/combobox/) component. It has a limited set of features to cover only the basic use cases. If you need more advanced features, you can build your own component with [Combobox](https://mantine.dev/core/combobox/). You can find examples of custom tags input components on [the examples page](https://mantine.dev/combobox/?e=BasicSelect).

[Usage](#usage)
---------------

`TagsInput` provides a way to enter multiple values. It can be used with suggestions or without them. `TagsInput` is similar to [MultiSelect](https://mantine.dev/core/multi-select/), but it allows entering custom values.

[Controlled](#controlled)
-------------------------

`TagsInput` value must be an array of strings, other types are not supported. `onChange` function is called with an array of strings as a single argument.

[Controlled search value](#controlled-search-value)
---------------------------------------------------

You can control search value with `searchValue` and `onSearchChange` props:

[Clearable](#clearable)
-----------------------

Set `clearable` prop to display the clear button in the right section. The button is not displayed when:

*   The component does not have a value
*   The component is disabled
*   The component is read only

[Max selected values](#max-selected-values)
-------------------------------------------

You can limit the number of selected values with `maxTags` prop. This will not allow adding more values once the limit is reached.

[Accept value on blur](#accept-value-on-blur)
---------------------------------------------

By default, if the user types a value and blurs the input, the value is added to the list. You can change this behavior by setting `acceptValueOnBlur` to `false`. In this case, the value is added only when the user presses `Enter` or clicks on a suggestion.

[Allow duplicates](#allow-duplicates)
-------------------------------------

By default, `TagsInput` does not allow to add duplicate values, but you can change this behavior by setting `allowDuplicates` prop. Value is considered duplicate if it is already present in the `value` array, regardless of the case and trailing whitespace.

[isDuplicate](#isduplicate)
---------------------------

You can use `isDuplicate` prop to control how duplicates are detected. It is a function that receives two arguments: tag value and current tags. The function must return `true` if the value is duplicate.

Example of using `isDuplicate` to allow using the same value with different casing:

[Split chars](#split-chars)
---------------------------

By default, `TagsInput` splits values by comma (`,`), you can change this behavior by setting `splitChars` prop to an array of strings. All values from `splitChars` cannot be included in the final value. Values are also splitted on paste.

Example of splitting by `,`, `|` and space:

[With suggestions](#with-suggestions)
-------------------------------------

`TagsInput` can be used with suggestions, it will render suggestions list under input and allow to select suggestions with keyboard or mouse. Note that user is not limited to suggestions, it is still possible to enter custom values. If you want to allow values only from suggestions, use [MultiSelect](https://mantine.dev/core/multi-select/) component instead.

[Data formats](#data-formats)
-----------------------------

`TagsInput` `data` prop accepts data in one of the following formats:

Array of strings:

Array of groups with string options:

[Options filtering](#options-filtering)
---------------------------------------

By default, `TagsInput` filters options by checking if the option label contains input value. You can change this behavior with `filter` prop.`filter` function receives an object with the following properties as a single argument:

*   `options` – array of options or options groups, all options are in `{ value: string; label: string; disabled?: boolean }` format
*   `search` – current search query
*   `limit` – value of `limit` prop passed to `TagsInput`

Example of a custom filter function that matches options by words instead of letters sequence:

[Sort options](#sort-options)
-----------------------------

By default, options are sorted by their position in the data array. You can change this behavior with `filter` function:

[Large data sets](#large-data-sets)
-----------------------------------

The best strategy for large data sets is to limit the number of options that are rendered at the same time. You can do it with `limit` prop. Note that if you use a custom `filter` function, you need to implement your own logic to limit the number of options in `filter`

Example of `TagsInput` with 100 000 options, 5 options are rendered at the same time:

[renderOption](#renderoption)
-----------------------------

`renderOption` callback allows you to customize option rendering. It is called with option object. The function must return a React node.

[Scrollable dropdown](#scrollable-dropdown)
-------------------------------------------

By default, the options list is wrapped with [ScrollArea.Autosize](https://mantine.dev/core/scroll-area/). You can control dropdown max-height with `maxDropdownHeight` prop if you do not change the default settings.

If you want to use native scrollbars, set `withScrollArea={false}`. Note that in this case, you will need to change dropdown styles with [Styles API](https://mantine.dev/styles/styles-api/).

[Group options](#group-options)
-------------------------------

[Disabled options](#disabled-options)
-------------------------------------

When option is disabled, it cannot be selected and is ignored in keyboard navigation. Note that user can still enter disabled option as a value. If you want to prohibit certain values, use controlled component and filter them out in `onChange` function.

[Combobox props](#combobox-props)
---------------------------------

You can override [Combobox](https://mantine.dev/core/combobox/) props with `comboboxProps`. It is useful when you need to change some of the props that are not exposed by `TagsInput`, for example `withinPortal`:

[Change dropdown z-index](#change-z-index)
------------------------------------------

[Inside Popover](#inside-popover)
---------------------------------

To use `TagsInput` inside popover, you need to set `withinPortal: false`:

[Control dropdown opened state](#control-dropdown-opened-state)
---------------------------------------------------------------

You can control dropdown opened state with `dropdownOpened` prop. Additionally, you can use `onDropdownClose` and `onDropdownOpen` to listen to dropdown opened state changes.

[Dropdown position](#dropdown-position)
---------------------------------------

By default, the dropdown is displayed below the input if there is enough space; otherwise it is displayed above the input. You can change this behavior by setting `position` and `middlewares` props, which are passed down to the underlying [Popover](https://mantine.dev/core/popover/) component.

Example of dropdown that is always displayed above the input:

[Dropdown animation](#dropdown-animation)
-----------------------------------------

By default, dropdown animations are disabled. To enable them, you can set `transitionProps`, which will be passed down to the underlying [Transition](https://mantine.dev/core/transition/) component.

[Dropdown width](#dropdown-width)
---------------------------------

To change dropdown width, set `width` prop in `comboboxProps`. By default, dropdown width is equal to the input width.

[Dropdown padding](#dropdown-padding)
-------------------------------------

[Dropdown shadow](#dropdown-shadow)
-----------------------------------

[Left and right sections](#left-and-right-sections)
---------------------------------------------------

`TagsInput` supports `leftSection` and `rightSection` props. These sections are rendered with absolute position inside the input wrapper. You can use them to display icons, input controls or any other elements.

You can use the following props to control sections styles and content:

*   `rightSection`/`leftSection` – React node to render on the corresponding side of input
*   `rightSectionWidth`/`leftSectionWidth` – controls width of the right section and padding on the corresponding side of the input. By default, it is controlled by component `size` prop.
*   `rightSectionPointerEvents`/`leftSectionPointerEvents` – controls `pointer-events` property of the section. If you want to render a non-interactive element, set it to `none` to pass clicks through to the input.

[Input props](#input-props)
---------------------------

`TagsInput` component supports [Input](https://mantine.dev/core/input/) and [Input.Wrapper](https://mantine.dev/core/input/) components features and all `input` element props. `TagsInput` documentation does not include all features supported by the component – see [Input](https://mantine.dev/core/input/) documentation to learn about all available features.

[Read only](#read-only)
-----------------------

Set `readOnly` to make the input read only. When `readOnly` is set, `TagsInput` will not show suggestions and will not call `onChange` function.

[Disabled](#disabled)
---------------------

Set `disabled` to disable the input. When `disabled` is set, user cannot interact with the input and `TagsInput` will not show suggestions.

[Error state](#error-state)
---------------------------

[Styles API](#styles-api)
-------------------------

`TagsInput` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Component Styles API

Hover over selectors to highlight corresponding elements

[Get element ref](#get-element-ref)
-----------------------------------

[Accessibility](#accessibility)
-------------------------------

If `TagsInput` is used without `label` prop, it will not be announced properly by screen reader:

Set `aria-label` to make the input accessible. In this case label will not be visible, but screen reader will announce it:

If `label` prop is set, input will be accessible it is not required to set `aria-label`:

To set `aria-label` on the clear button, use `clearButtonProps`. Note that it is required only when `clearable` is set.</content>
</page>

<page>
  <title>CloseButton | Mantine</title>
  <url>https://mantine.dev/core/close-button/</url>
  <content>[Usage](#usage)
---------------

`CloseButton` renders a button with `X` icon inside. It is used in other Mantine components like [Drawer](https://mantine.dev/core/drawer/) or [Modal](https://mantine.dev/core/modal/).

[Change icon](#change-icon)
---------------------------

You can change icon by passing any react node to the `icon` prop. It is useful when `CloseButton` is used as a part of other components, for example, in [Drawer](https://mantine.dev/core/drawer/) or [Modal](https://mantine.dev/core/modal/). Note that if you use `icon` prop, `iconSize` prop is ignored – you will have to set icon size manually.

[Accessibility](#accessibility)
-------------------------------

To make `CloseButton` accessible for screen readers, you need to either set `aria-label` or use [VisuallyHidden](https://mantine.dev/core/visually-hidden/) component:</content>
</page>

<page>
  <title>CopyButton | Mantine</title>
  <url>https://mantine.dev/core/copy-button/</url>
  <content>[Usage](#usage)
---------------

`CopyButton` is based on [use-clipboard](https://mantine.dev/hooks/use-clipboard/) hook. Its children is a function that receives an object with the following properties:

*   `copied` – boolean value that indicates that a given value was recently copied to the clipboard, it resets after a given timeout (defaults to 500ms)
*   `copy` – function that should be called to copy given value to clipboard

[Security](#security)
---------------------

Due to security reasons `CopyButton` component will not work in iframes and may not work with local files opened with `file://` protocol (component will work fine with local websites that are using `http://` protocol). You can learn more about `navigator.clipboard` [here](https://web.dev/async-clipboard/).

[Timeout](#timeout)
-------------------

You can provide a custom `copied` reset `timeout`:

[Incompatible with server components](#server-components-incompatible)
----------------------------------------------------------------------

`CopyButton` is not compatible with React server components as it requires function as children. To use `CopyButton` add `"use client;"` at the top of the file.</content>
</page>

<page>
  <title>UnstyledButton | Mantine</title>
  <url>https://mantine.dev/core/unstyled-button/</url>
  <content>[Usage](#usage)
---------------

`UnstyledButton` resets default button styles, it is used as a base for all other button components. You can use it to as a base for custom polymorphic buttons.

[Polymorphic component](#polymorphic-component)
-----------------------------------------------

`UnstyledButton` is a [polymorphic component](https://mantine.dev/guides/polymorphic/) – its default root element is `button`, but it can be changed to any other element or component with `component` prop:

> **Polymorphic components with TypeScript**
> 
> Note that polymorphic components props types are different from regular components – they do not extend HTML element props of the default element. For example, `UnstyledButtonProps` does not extend `React.ComponentPropsWithoutRef'<'div'>'` although `button` is the default element.
> 
> If you want to create a wrapper for a polymorphic component that is not polymorphic (does not support `component` prop), then your component props interface should extend HTML element props, for example:
> 
> If you want your component to remain polymorphic after wrapping, use `createPolymorphicComponent` function described in [this guide](https://mantine.dev/guides/polymorphic/).

[Get element ref](#get-element-ref)
-----------------------------------</content>
</page>

<page>
  <title>FileButton | Mantine</title>
  <url>https://mantine.dev/core/file-button/</url>
  <content>[Usage](#usage)
---------------

    import { useState } from 'react';
    import { FileButton, Button, Group, Text } from '@mantine/core';
    
    function Demo() {
      const [file, setFile] = useState<File | null>(null);
      return (
        <>
          <Group justify="center">
            <FileButton onChange={setFile} accept="image/png,image/jpeg">
              {(props) => <Button {...props}>Upload image</Button>}
            </FileButton>
          </Group>
    
          {file && (
            <Text size="sm" ta="center" mt="sm">
              Picked file: {file.name}
            </Text>
          )}
        </>
      );
    }

[Multiple files](#multiple-files)
---------------------------------

Set `multiple` prop to allow picking multiple files:

    import { useState } from 'react';
    import { FileButton, Button, Group, Text } from '@mantine/core';
    
    function Demo() {
      const [files, setFiles] = useState<File[]>([]);
      return (
        <>
          <Group justify="center">
            <FileButton onChange={setFiles} accept="image/png,image/jpeg" multiple>
              {(props) => <Button {...props}>Upload image</Button>}
            </FileButton>
          </Group>
    
          {files.length > 0 && (
            <Text size="sm" mt="sm">
              Picked files:
            </Text>
          )}
    
          <ul>
            {files.map((file, index) => (
              <li key={index}>{file.name}</li>
            ))}
          </ul>
        </>
      );
    }

[Reset file](#reset-file)
-------------------------

`resetRef` should be used to fix issue with stale value on hidden input element as input type file cannot be controlled. Call `resetRef` when user selection is cleared:

    import { useState, useRef } from 'react';
    import { FileButton, Button, Group, Text } from '@mantine/core';
    
    function Demo() {
      const [file, setFile] = useState<File | null>(null);
      const resetRef = useRef<() => void>(null);
    
      const clearFile = () => {
        setFile(null);
        resetRef.current?.();
      };
    
      return (
        <>
          <Group justify="center">
            <FileButton resetRef={resetRef} onChange={setFile} accept="image/png,image/jpeg">
              {(props) => <Button {...props}>Upload image</Button>}
            </FileButton>
            <Button disabled={!file} color="red" onClick={clearFile}>
              Reset
            </Button>
          </Group>
    
          {file && (
            <Text size="sm" ta="center" mt="sm">
              Picked file: {file.name}
            </Text>
          )}
        </>
      );
    }

[Incompatible with server components](#server-components-incompatible)
----------------------------------------------------------------------

`FileButton` is not compatible with React server components as it requires function as children. To use `FileButton` add `"use client;"` at the top of the file.</content>
</page>

<page>
  <title>Anchor | Mantine</title>
  <url>https://mantine.dev/core/anchor/</url>
  <content>[Usage](#usage)
---------------

[Underline](#underline)
-----------------------

Use `underline` prop to configure `text-decoration` property. It accepts the following values:

*   `always` - link is always underlined
*   `hover` - link is underlined on hover
*   `never` - link is never underlined
*   `not-hover` - link is underlined when not hovered

You can also configure `underline` prop for all `Anchor` components with [default props](https://mantine.dev/theming/default-props/):

[Text props](#text-props)
-------------------------

`Anchor` components supports all [Text](https://mantine.dev/core/text/) component props. For example, you can use gradient variant:

[Polymorphic component](#polymorphic-component)
-----------------------------------------------

`Anchor` is a [polymorphic component](https://mantine.dev/guides/polymorphic/) – its default root element is `a`, but it can be changed to any other element or component with `component` prop:

You can also use components in `component` prop, for example, Next.js `Link`:

> **Polymorphic components with TypeScript**
> 
> Note that polymorphic components props types are different from regular components – they do not extend HTML element props of the default element. For example, `AnchorProps` does not extend `React.ComponentPropsWithoutRef'<'div'>'` although `a` is the default element.
> 
> If you want to create a wrapper for a polymorphic component that is not polymorphic (does not support `component` prop), then your component props interface should extend HTML element props, for example:
> 
> If you want your component to remain polymorphic after wrapping, use `createPolymorphicComponent` function described in [this guide](https://mantine.dev/guides/polymorphic/).

[Get element ref](#get-element-ref)
-----------------------------------</content>
</page>

<page>
  <title>Breadcrumbs | Mantine</title>
  <url>https://mantine.dev/core/breadcrumbs/</url>
  <content>[Usage](#usage)
---------------

`Breadcrumbs` component accepts any number of React nodes as children and adds a given separator (defaults to `/`) between them:

    import { Breadcrumbs, Anchor } from '@mantine/core';
    
    const items = [
      { title: 'Mantine', href: '#' },
      { title: 'Mantine hooks', href: '#' },
      { title: 'use-id', href: '#' },
    ].map((item, index) => (
      <Anchor href={item.href} key={index}>
        {item.title}
      </Anchor>
    ));
    
    function Demo() {
      return (
        <>
          <Breadcrumbs>{items}</Breadcrumbs>
          <Breadcrumbs separator="→" separatorMargin="md" mt="xs">
            {items}
          </Breadcrumbs>
        </>
      );
    }</content>
</page>

<page>
  <title>Burger | Mantine</title>
  <url>https://mantine.dev/core/burger/</url>
  <content>[Usage](#usage)
---------------

`Burger` component renders open/close menu button. Set `opened` and `onClick` props to control component state. If `opened` prop is set, cross will be rendered, otherwise – burger.

    import { useDisclosure } from '@mantine/hooks';
    import { Burger } from '@mantine/core';
    
    function Demo() {
      const [opened, { toggle }] = useDisclosure();
      return <Burger opened={opened} onClick={toggle} aria-label="Toggle navigation" />;
    }

[Change lines size](#change-lines-size)
---------------------------------------

    import { useDisclosure } from '@mantine/hooks';
    import { Burger } from '@mantine/core';
    
    function Demo() {
      const [opened, { toggle }] = useDisclosure();
      return <Burger lineSize={2} size="xl" opened={opened} onClick={toggle} aria-label="Toggle navigation" />;
    }

[Get element ref](#get-element-ref)
-----------------------------------

    import { useRef } from 'react';
    import { Burger } from '@mantine/core';
    
    function Demo() {
      const ref = useRef<HTMLButtonElement>(null);
      return <Burger ref={ref} />;
    }

[Accessibility](#accessibility)
-------------------------------

To make `Burger` accessible for screen readers, you need to either set `aria-label` or use [VisuallyHidden](https://mantine.dev/core/visually-hidden/) component:

    import { Burger, VisuallyHidden } from '@mantine/core';
    
    function Demo() {
      return (
        <>
          <Burger aria-label="Toggle navigation" />
    
          <Burger>
            <VisuallyHidden>Toggle navigation</VisuallyHidden>
          </Burger>
        </>
      );
    }</content>
</page>

<page>
  <title>NavLink | Mantine</title>
  <url>https://mantine.dev/core/nav-link/</url>
  <content>[Usage](#usage)
---------------

[Active](#active)
-----------------

Set `active` prop to add active styles to `NavLink`.

Note that if you're using a React Router `NavLink` inside `renderRoot`, the active styles will be based on the [`aria-current` attribute that's set by React Router](https://reactrouter.com/en/main/components/nav-link#aria-current) so you won't need to explicitly set the `active` prop.

You can customize active styles with `color` and `variant` props:

[autoContrast](#auto-contrast)
------------------------------

`NavLink` supports `autoContrast` prop and [theme.autoContrast](https://mantine.dev/theming/theme-object/#autocontrast). If `autoContrast` is set either on `NavLink` or on theme, content color will be adjusted to have sufficient contrast with the value specified in `color` prop.

Note that `autoContrast` feature works only if you use `color` prop to change background color. `autoContrast` works only with `filled` variant.

[Nested NavLinks](#nested-navlinks)
-----------------------------------

To create nested links put `NavLink` as children of another `NavLink`:

[Polymorphic component](#polymorphic-component)
-----------------------------------------------

`NavLink` is a [polymorphic component](https://mantine.dev/guides/polymorphic/) – its default root element is `a`, but it can be changed to any other element or component with `component` prop:

You can also use components in `component` prop, for example, Next.js `Link`:

> **Polymorphic components with TypeScript**
> 
> Note that polymorphic components props types are different from regular components – they do not extend HTML element props of the default element. For example, `NavLinkProps` does not extend `React.ComponentPropsWithoutRef'<'div'>'` although `a` is the default element.
> 
> If you want to create a wrapper for a polymorphic component that is not polymorphic (does not support `component` prop), then your component props interface should extend HTML element props, for example:
> 
> If you want your component to remain polymorphic after wrapping, use `createPolymorphicComponent` function described in [this guide](https://mantine.dev/guides/polymorphic/).

[Get element ref](#get-element-ref)
-----------------------------------</content>
</page>

<page>
  <title>Pagination | Mantine</title>
  <url>https://mantine.dev/core/pagination/</url>
  <content>[Usage](#usage)
---------------

With controls

With edges

Disabled

[Example with chunked content](#example-with-chunked-content)
-------------------------------------------------------------

id: 0, name: mantine-w78dx635v

id: 1, name: mantine-e0eqyq5s8

id: 2, name: mantine-9n4uyx6u1

id: 3, name: mantine-6nlwg5t2j

id: 4, name: mantine-cdr77pdmh

[Controlled](#controlled)
-------------------------

To control component state provide `value` and `onChange` props:

[Siblings](#siblings)
---------------------

Control number of active item siblings with `siblings` prop:

1 sibling (default)

2 siblings

3 siblings

[Boundaries](#boundaries)
-------------------------

Control number of items displayed after previous and before next buttons with `boundaries` prop:

1 boundary (default)

2 boundaries

3 boundaries

[Hide pages controls](#hide-pages-controls)
-------------------------------------------

Set `withPages={false}` to hide pages controls:

[Styles API](#styles-api)
-------------------------

`Pagination` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Component Styles API

Hover over selectors to highlight corresponding elements

[Compound components](#compound-components)
-------------------------------------------

You can use the following compound components to have full control over the `Pagination` rendering:

*   `Pagination.Root` – context provider
*   `Pagination.Items` – items list
*   `Pagination.Next` – next control
*   `Pagination.Previous` – previous control
*   `Pagination.First` – first control
*   `Pagination.Last` – last control

[Controls as links](#controls-as-links)
---------------------------------------

[Change icons](#change-icons)
-----------------------------

[autoContrast](#auto-contrast)
------------------------------

`Pagination` supports `autoContrast` prop and [theme.autoContrast](https://mantine.dev/theming/theme-object/#autocontrast). If `autoContrast` is set either on `Pagination` or on theme, content color will be adjusted to have sufficient contrast with the value specified in `color` prop.

Note that `autoContrast` feature works only if you use `color` prop to change background color.

autoContrast: off

autoContrast: on

[use-pagination hook](#use-pagination-hook)
-------------------------------------------

If you need more flexibility `@mantine/hooks` package exports [use-pagination](https://mantine.dev/hooks/use-pagination/) hook, you can use it to create custom pagination components.</content>
</page>

<page>
  <title>Stepper | Mantine</title>
  <url>https://mantine.dev/core/stepper/</url>
  <content>[Usage](#usage)
---------------

Step 2 content: Verify email

[Allow step select](#allow-step-select)
---------------------------------------

To disable step selection, set `allowStepSelect` prop on `Stepper.Step` component. It can be used to prevent the user from reaching next steps while letting them go back and forth between steps they've already reached before:

Step 2 content: Verify email

[Disable next steps selection](#disable-next-steps-selection)
-------------------------------------------------------------

Another way to disable selection of upcoming steps is to use the `allowNextStepsSelect` directly on the `Stepper` component. This is useful when you don't need to control the behavior specifically for each step.

Step 2 content: Verify email

[Color, radius and size](#color-radius-and-size)
------------------------------------------------

Component size is controlled by two props: `size` and `iconSize`. `size` prop controls icon size, label and description font size. `iconSize` allows to overwrite icon size separately from other size values:

[With custom icons](#with-custom-icons)
---------------------------------------

You can replace the step icon by setting `icon` prop on `Stepper.Step` component. To change completed check icon set `completedIcon` on `Stepper` component. You can use any React node as an icon: component, string, number:

You can use `Stepper` with icons only. Note that in this case, you will have to set `aria-label` or `title` on `Stepper.Step` component to make it accessible:

You can also change the completed icon for each step, for example, to indicate error state:

[Vertical orientation](#vertical-orientation)
---------------------------------------------

[Icon position](#icon-position)
-------------------------------

To change step icon and body arrangement, set `iconPosition="right"`:

[Loading state](#loading-state)
-------------------------------

To indicate loading state set `loading` prop on Step component, `Loader` will replace step icon. You can configure the default loader in the [theme](https://mantine.dev/theming/theme-object/).

[Styles API](#styles-api)
-------------------------

`Stepper` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Step 2 content: Verify email

Component Styles API

Hover over selectors to highlight corresponding elements

Examples of styles customization with Styles API:

  

[Get step ref](#get-step-ref)
-----------------------------

You can get refs of step button and stepper root element (div):

[Wrap Stepper.Step](#wrap-stepperstep)
--------------------------------------

`Stepper` component relies on `Stepper.Step` order. Wrapping `Stepper.Step` is not supported, Instead you will need to use different approaches:

[Accessibility](#accessibility)
-------------------------------

`<Stepper.Step />` components render button element, set `aria-label` or `title` props to make component visible for screen readers in case you do not specify `label` or `description`:</content>
</page>

<page>
  <title>TableOfContents | Mantine</title>
  <url>https://mantine.dev/core/table-of-contents/</url>
  <content>[Usage](#usage)
---------------

Use `TableOfContents` component to display table of contents like in the sidebar of mantine.dev documentation. The component tracks scroll position and highlights current heading in the list.

[use-scroll-spy options](#use-scroll-spy-options)
-------------------------------------------------

`TableOfContents` in based on [use-scroll-spy](https://mantine.dev/hooks/use-scroll-spy/) hook. You can pass options down to `use-scroll-spy` hook using `scrollSpyOptions` prop.

Example of customizing selector, depth and value retrieval:

[Pass props to controls](#pass-props-to-controls)
-------------------------------------------------

You can pass props down to controls rendered by `TableOfContents` component with `getControlProps` function. It accepts an object with `active` and `data` properties and should return props object.

Example of changing controls to links:

[Initial data](#initial-data)
-----------------------------

`TableOfContents` retrieves data on mount. If you want to render headings before `TableOfContents` component is mounted (for example during server-side rendering), you can pass `initialData` prop with array of headings data. `initialData` is replaced with actual data on mount.

[Depth offset](#depth-offset)
-----------------------------

Use `minDepthToOffset` prop to set minimum depth at which offset should be applied. By default, `minDepthToOffset` is `1`, which means that first and second level headings will not be offset. Set it to `0` to apply offset to all headings.

To control offset value in px, set `depthOffset` prop:

[autoContrast](#auto-contrast)
------------------------------

`TableOfContents` supports `autoContrast` prop and [theme.autoContrast](https://mantine.dev/theming/theme-object/#autocontrast). If `autoContrast` is set either on `TableOfContents` or on theme, content color will be adjusted to have sufficient contrast with the value specified in `color` prop.

Note that `autoContrast` feature works only if you use `color` prop to change background color. `autoContrast` works only with `filled` variant.

[Styles API](#styles-api)
-------------------------

Example of customizing `TableOfContents` with [Styles API](https://mantine.dev/styles/styles-api/) and [data-\* attributes](https://mantine.dev/styles/data-attributes/):

[Reinitialize](#reinitialize)
-----------------------------

By default, `TableOfContents` does not track changes in the DOM. If you want to update headings data after the parent component has mounted, you can use `reinitializeRef` to get reinitialize function from [use-scroll-spy](https://mantine.dev/hooks/use-scroll-spy/) hook:</content>
</page>

<page>
  <title>Tabs | Mantine</title>
  <url>https://mantine.dev/core/tabs/</url>
  <content>[Usage](#usage)
---------------

[Controlled Tabs](#controlled-tabs)
-----------------------------------

To control Tabs state, use `value` and `onChange` props:

[Uncontrolled Tabs](#uncontrolled-tabs)
---------------------------------------

If you do not need to subscribe to Tabs state changes, use `defaultValue`:

[Change colors](#change-colors)
-------------------------------

To change colors of all tabs, set `color` on `Tabs` component, to change color of the individual tab, set `color` on `Tabs.Tab`.

First tab color is teal, it gets this value from context

[Tabs position](#tabs-position)
-------------------------------

To display tab on the opposite side, set `margin-left: auto` with `ml="auto"` prop or with `className`:

[Inverted tabs](#inverted-tabs)
-------------------------------

To make tabs inverted, place `Tabs.Panel` components before `Tabs.List` and add `inverted` prop to `Tabs` component:

[Vertical tabs placement](#vertical-tabs-placement)
---------------------------------------------------

To change placement of `Tabs.List` in vertical orientation set `placement` prop:

[Custom variants](#custom-variants)
-----------------------------------

Example of custom variant with [FloatingIndicator](https://mantine.dev/core/floating-indicator/):

[Disabled tabs](#disabled-tabs)
-------------------------------

Set `disabled` prop on `Tabs.Tab` component to disable tab. Disabled tab cannot be activated with mouse or keyboard, and they will be skipped when user navigates with arrow keys:

[Activation mode](#activation-mode)
-----------------------------------

By default, tabs are activated when user presses arrows keys or Home/End keys. To disable that set `activateTabWithKeyboard={false}` on `Tabs` component:

[Tab deactivation](#tab-deactivation)
-------------------------------------

By default, active tab cannot be deactivated. To allow that set `allowTabDeactivation` on `Tabs` component:

[Unmount inactive tabs](#unmount-inactive-tabs)
-----------------------------------------------

By default, inactive `Tabs.Panel` will stay mounted, to unmount inactive tabs, set `keepMounted={false}` on Tabs. This is useful when you want to render components that impact performance inside `Tabs.Panel`. Note that components that are rendered inside `Tabs.Panel` will reset their state on each mount (tab change).

[Get tab control ref](#get-tab-control-ref)
-------------------------------------------

[Usage with react-router](#usage-with-react-router)
---------------------------------------------------

[Usage with Next.js router](#usage-with-nextjs-router)
------------------------------------------------------

[Styles API](#styles-api)
-------------------------

`Tabs` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Component Styles API

Hover over selectors to highlight corresponding elements

Example of Styles API usage to customize tab styles:

[Accessibility](#accessibility)
-------------------------------

Tabs component follows [WAI-ARIA recommendations](https://www.w3.org/TR/wai-aria-practices/examples/tabs/tabs-2/tabs.html) on accessibility.

If you use `Tabs.Tab` without text content, for example, only with icon, then set `aria-label` or use [VisuallyHidden](https://mantine.dev/core/visually-hidden/) component:

To set tabs list label, set `aria-label` on `Tabs.List` component, it will be announced by screen reader:

[Keyboard interactions](#keyboard-interactions)
-----------------------------------------------</content>
</page>

<page>
  <title>Tree | Mantine</title>
  <url>https://mantine.dev/core/tree/</url>
  <content>[Usage](#usage)
---------------

`Tree` component is used to display hierarchical data. `Tree` component has minimal styling by default, you can customize styles with [Styles API](https://mantine.dev/styles/styles-api/).

*   src
    
*   node\_modules
    
*   package.json
    
*   tsconfig.json
    

[Data prop](#data-prop)
-----------------------

Data passed to the `data` prop should follow these rules:

*   Data must be an array
*   Each item in the array represents a node in the tree
*   Each node must be an object with `value` and `label` keys
*   Each node can have `children` key with an array of child nodes
*   The `value` of each node must be unique

Valid data example:

Invalid data example:

[Data type](#data-type)
-----------------------

You can import `TreeNodeData` type to define data type for your tree:

[renderNode](#rendernode)
-------------------------

Use `renderNode` prop to customize node rendering. `renderNode` function receives an object with the following properties as a single argument:

*   package.json
    
*   tsconfig.json
    

[useTree hook](#usetree-hook)
-----------------------------

`useTree` hook can be used to control selected and expanded state of the tree.

The hook accepts an object with the following properties:

And returns an object with the following properties:

You can pass the value returned by the `useTree` hook to the `tree` prop of the `Tree` component to control tree state:

*   src
    
*   node\_modules
    
*   package.json
    
*   tsconfig.json
    

[Checked state](#checked-state)
-------------------------------

`Tree` can be used to display checked state with checkboxes. To implement checked state, you need to render `Checkbox.Indicator` in the `renderNode` function:

To check/uncheck nodes, use `checkAllNodes` and `uncheckAllNodes` functions:

[Initial expanded state](#initial-expanded-state)
-------------------------------------------------

Expanded state is an object of `node.value` and boolean values that represent nodes expanded state. To change initial expanded state, pass `initialExpandedState` to the `useTree` hook. To generate expanded state from data with expanded nodes, you can use `getTreeExpandedState` function: it accepts data and an array of expanded nodes values and returns expanded state object.

If `'*'` is passed as the second argument to `getTreeExpandedState`, all nodes will be expanded:

*   src
    
    *   components
        
        *   Accordion.tsx
            
        *   Tree.tsx
            
        *   Button.tsx
            
*   node\_modules
    
*   package.json
    
*   tsconfig.json
    

[Example: files tree](#example-files-tree)
------------------------------------------</content>
</page>

<page>
  <title>Alert | Mantine</title>
  <url>https://mantine.dev/core/alert/</url>
  <content>Attract user attention with important static message

[Usage](#usage)
---------------

Alert title

Lorem ipsum dolor sit, amet consectetur adipisicing elit. At officiis, quae tempore necessitatibus placeat saepe.

[Styles API](#styles-api)
-------------------------

`Alert` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Alert title

Lorem ipsum dolor sit, amet consectetur adipisicing elit. Sunt corporis natus veniam quis cupiditate enim architecto mollitia numquam temporibus, consectetur nam laboriosam voluptates nemo facilis? Exercitationem aut praesentium quibusdam reiciendis.

Component Styles API

Hover over selectors to highlight corresponding elements

[Accessibility](#accessibility)
-------------------------------

*   Root element role set to `alert`
*   `aria-describedby` set to body element id, `aria-labelledby` set to title element id if `title` is provided
*   Set `closeButtonLabel` prop to make close button accessible</content>
</page>

<page>
  <title>Notification | Mantine</title>
  <url>https://mantine.dev/core/notification/</url>
  <content>[Usage](#usage)
---------------

Notification is a base component for notification system. Build your own or use [@mantine/notifications](https://mantine.dev/x/notifications/) package.

Loading

With close button

With border

[With icon](#with-icon)
-----------------------

[Styles API](#styles-api)
-------------------------

`Notification` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Component Styles API

Hover over selectors to highlight corresponding elements

[Accessibility](#accessibility)
-------------------------------

To support screen readers, set close button aria-label or title with `closeButtonProps`:</content>
</page>

<page>
  <title>Loader | Mantine</title>
  <url>https://mantine.dev/core/loader/</url>
  <content>[Usage](#usage)
---------------

`Loader` component supports 3 types of loaders: `oval`, `bars` and `dots` by default. All loaders are animated with CSS for better performance.

[Size prop](#size-prop)
-----------------------

You can pass any valid CSS values and numbers to `size` prop. Numbers are treated as px, but converted to [rem](https://mantine.dev/styles/rem/). For example, `size={32}` will produce `--loader-size: 2rem` CSS variable.

[Adding custom loaders](#adding-custom-loaders)
-----------------------------------------------

`Loader` component is used in other components ([Button](https://mantine.dev/core/button/), [ActionIcon](https://mantine.dev/core/action-icon/), [LoadingOverlay](https://mantine.dev/core/loading-overlay/), etc.). You can change loader type with [default props](https://mantine.dev/theming/default-props/) by setting `type`. You can also add a custom CSS or SVG loader with `loaders` [default prop](https://mantine.dev/theming/default-props/).

### [Custom CSS only loader](#custom-css-only-loader)

Note that in order for `size` and `color` props to work with custom loaders, you need to use `--loader-size` and `--loader-color` CSS variables in your loader styles.

### [Custom SVG loader](#custom-svg-loader)

It is recommended to use CSS only loaders, as SVG based animations may have the following issues:

*   High CPU usage – loader may look glitchy on low-end devices
*   Loader animation may not start playing until js is loaded – user may see static loader

In your SVG loader, you need to use `--loader-size` and `--loader-color` variables the same way as in CSS only custom loader in order for `size` and `color` props to work. Usually, you would need to set `width` and `height` to `var(--loader-size)` and `fill`/`stroke` to `var(--loader-color)`.

[children prop](#children-prop)
-------------------------------

`Loader` supports `children` prop. If you pass anything to `children`, it will be rendered instead of the loader. This is useful when you want to control `Loader` representation in components that use `loaderProps`, for example [Button](https://mantine.dev/core/button/), [LoadingOverlay](https://mantine.dev/core/loading-overlay/), [Dropzone](https://mantine.dev/x/dropzone/).</content>
</page>

<page>
  <title>Progress | Mantine</title>
  <url>https://mantine.dev/core/progress/</url>
  <content>[Usage](#usage)
---------------

[Compound components](#compound-components)
-------------------------------------------

[With tooltips](#with-tooltips)
-------------------------------

[Section width transition](#section-width-transition)
-----------------------------------------------------

Set `transitionDuration` to a number of ms to enable width transition:

[Example: progress with segments](#example-progress-with-segments)
------------------------------------------------------------------

[Styles API](#styles-api)
-------------------------

`Progress` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Component Styles API

Hover over selectors to highlight corresponding elements

[Accessibility](#accessibility)
-------------------------------

*   Progress section has `role="progressbar"` attribute
*   Progress section has `aria-valuenow` attribute with current value
*   `aria-valuemin` and `aria-valuemax` attributes are always set to `0` and `100` as component does not support other values

Set `aria-label` attribute to label progress:</content>
</page>

<page>
  <title>RingProgress | Mantine</title>
  <url>https://mantine.dev/core/ring-progress/</url>
  <content>[Usage](#usage)
---------------

Set `sections` prop to an array of:

*   `value` – number between 0 and 100 – amount of space filled by segment
*   `color` – segment color from theme or any other css color value

[Size, thickness & rounded caps](#size-thickness--rounded-caps)
---------------------------------------------------------------

Use `size`, `thickness` & `roundCaps` props to configure RingProgress, size and thickness values:

[Sections tooltips](#sections-tooltips)
---------------------------------------

Add `tooltip` property to section to display floating [Tooltip](https://mantine.dev/core/tooltip/) when user hovers over it:

Hover sections to see tooltips

[Root color](#root-color)
-------------------------

Use `rootColor` property to change the root color:

[Sections props](#sections-props)
---------------------------------

You can add any additional props to sections:

[Customize label](#customize-label)
-----------------------------------

You can add any React node as label, e.g. [Text](https://mantine.dev/core/text/) component with some additional styles or [ThemeIcon](https://mantine.dev/core/theme-icon/):

[Filled segment transition](#filled-segment-transition)
-------------------------------------------------------

By default, transitions are disabled, to enable them, set `transitionDuration` prop to a number of milliseconds:</content>
</page>

<page>
  <title>SemiCircleProgress | Mantine</title>
  <url>https://mantine.dev/core/semi-circle-progress/</url>
  <content>[Usage](#usage)
---------------

Fill direction

Right to left

Left to right

    import { SemiCircleProgress } from '@mantine/core';
    
    function Demo() {
      return (
        <SemiCircleProgress
          fillDirection="left-to-right"
          orientation="up"
          filledSegmentColor="blue"
          size={200}
          thickness={12}
          value={40}
          label="Label"
        />
      );
    }

[Change empty segment color](#change-empty-segment-color)
---------------------------------------------------------

Use `emptySegmentColor` prop to change color of empty segment, it accepts key of `theme.colors` or any valid CSS color value:

    import { SemiCircleProgress } from '@mantine/core';
    
    function Demo() {
      return <SemiCircleProgress value={30} emptySegmentColor="var(--mantine-color-dimmed)" />;
    }

[Change label position](#change-label-position)
-----------------------------------------------

By default, the label is displayed at the bottom of the component, you can change its position to `center` by using `labelPosition` prop:

    import { SemiCircleProgress } from '@mantine/core';
    
    function Demo() {
      return (
        <>
          <SemiCircleProgress value={30} label="Bottom" mb="xl" />
          <SemiCircleProgress value={30} label="Center" labelPosition="center" />
        </>
      );
    }

[Filled segment transition](#filled-segment-transition)
-------------------------------------------------------

By default, transitions are disabled, to enable them, set `transitionDuration` prop to a number of milliseconds:

    import { useState } from 'react';
    import { Button, SemiCircleProgress } from '@mantine/core';
    
    function Demo() {
      const [value, setValue] = useState(30);
    
      return (
        <>
          <SemiCircleProgress value={value} transitionDuration={250} label={`${value}%`} />
    
          <Button onClick={() => setValue(Math.floor(Math.random() * 100))} mt="xl" fullWidth>
            Set random value
          </Button>
        </>
      );
    }</content>
</page>

<page>
  <title>Skeleton | Mantine</title>
  <url>https://mantine.dev/core/skeleton/</url>
  <content>[Usage](#usage)
---------------

Use `Skeleton` to create a placeholder for loading content. `Skeleton` support the following props:

*   `height` – height – any valid CSS value
*   `width` – width - any valid CSS value
*   `radius` – key of `theme.radius` or any valid CSS value to set border-radius
*   `circle` – if true width, height and border-radius will equal to value specified in `height` prop
*   `animate` – true by default, controls animation

[With content](#with-content)
-----------------------------

If you want to indicate the loading state of content that is already on page, wrap it with Skeleton and control loading overlay visibility with `visible` prop:

Lorem ipsum dolor sit amet consectetur adipisicing elit. Modi dolor nihil amet tempore magnam optio, numquam nostrum inventore tempora assumenda saepe, aut repellat. Temporibus aspernatur aperiam magnam debitis facere odio?

Laborum fuga quam voluptas aut pariatur delectus repudiandae commodi tempora debitis dolores vero cumque magni cum, deserunt, ad tempore consectetur libero molestias similique nemo eum! Dolore maxime voluptate inventore atque.</content>
</page>

<page>
  <title>Affix | Mantine</title>
  <url>https://mantine.dev/core/affix/</url>
  <content>`Affix` renders a div element with a fixed position inside the [Portal](https://mantine.dev/core/portal/) component. Use it to display elements fixed at any position on the screen, for example, scroll to top button:

Affix is located at the bottom of the screen, scroll to see it

    import { IconArrowUp } from '@tabler/icons-react';
    import { useWindowScroll } from '@mantine/hooks';
    import { Affix, Button, Text, Transition } from '@mantine/core';
    
    function Demo() {
      const [scroll, scrollTo] = useWindowScroll();
    
      return (
        <>
          <Text ta="center">Affix is located at the bottom of the screen, scroll to see it</Text>
          <Affix position={{ bottom: 20, right: 20 }}>
            <Transition transition="slide-up" mounted={scroll.y > 0}>
              {(transitionStyles) => (
                <Button
                  leftSection={<IconArrowUp size={16} />}
                  style={transitionStyles}
                  onClick={() => scrollTo({ y: 0 })}
                >
                  Scroll to top
                </Button>
              )}
            </Transition>
          </Affix>
        </>
      );
    }</content>
</page>

<page>
  <title>Dialog | Mantine</title>
  <url>https://mantine.dev/core/dialog/</url>
  <content>[Usage](#usage)
---------------

`Dialog` is a simplified version of [Modal](https://mantine.dev/core/modal/) component. It does not include most of accessibility and usability [Modal](https://mantine.dev/core/modal/) features:

*   Focus trap is not available
*   Does not close on click outside
*   Does not have overlay

Use `Dialog` to attract attention with not important information or action, for example, you can create an email subscription form:

[Change position](#change-position)
-----------------------------------

`Dialog` is rendered in [Portal](https://mantine.dev/core/portal/) and has fixed position, set `position` prop to control dialog's position:

[Accessibility](#accessibility)
-------------------------------

`Dialog` is not accessible and most likely will not be announced by screen reader, make sure you do not put any important information. In most cases it would be better to select [Modal](https://mantine.dev/core/modal/), [Drawer](https://mantine.dev/core/drawer/) or [Notifications](https://mantine.dev/x/notifications/).</content>
</page>

<page>
  <title>Drawer | Mantine</title>
  <url>https://mantine.dev/core/drawer/</url>
  <content>[Usage](#usage)
---------------

[Position](#position)
---------------------

Drawer can be placed on `left` (default), `top`, `right` and `bottom`. Control drawer position with `position` prop, for example `<Drawer position="top" />`.

[Offset](#offset)
-----------------

Set `offset` prop to change drawer offset from the edge of the viewport:

[Customize overlay](#customize-overlay)
---------------------------------------

`Drawer` uses [Overlay](https://mantine.dev/core/overlay/) component, you can set any props that [Overlay](https://mantine.dev/core/overlay/) supports with `overlayProps`:

[Sizes](#sizes)
---------------

You can change drawer width/height (depends on `position`) by setting `size` prop to predefined size or any valid width, for example, `size="55%"` or `size={200}`:

[Remove header](#remove-header)
-------------------------------

To remove header set `withCloseButton={false}`

[Drawer with scroll](#drawer-with-scroll)
-----------------------------------------

[Usage with ScrollArea](#usage-with-scrollarea)
-----------------------------------------------

[Change transition](#change-transition)
---------------------------------------

`Drawer` is built with [Transition](https://mantine.dev/core/transition/) component. Use `transitionProps` prop to customize any [Transition](https://mantine.dev/core/transition/) properties:

[onExitTransitionEnd and onEnterTransitionEnd](#onexittransitionend-and-onentertransitionend)
---------------------------------------------------------------------------------------------

`onExitTransitionEnd` and `onEnterTransitionEnd` props can be used to run code after exit/enter transition is finished. For example, this is useful when you want to clear data after drawer is closed:

[Initial focus](#initial-focus)
-------------------------------

`Drawer` uses [FocusTrap](https://mantine.dev/core/focus-trap/) to trap focus. Add `data-autofocus` attribute to the element that should receive initial focus.

If you do not want to focus any elements when the drawer is opened, use `FocusTrap.InitialFocus` component to create a visually hidden element that will receive initial focus:

If you do not add `data-autofocus` attribute and do not use `FocusTrap.InitialFocus`, drawer will focus the first focusable element inside it which is usually the close button.

[Control behavior](#control-behavior)
-------------------------------------

The following props can be used to control `Drawer` behavior. In most cases it is not recommended to turn these features off – it will make the component less accessible.

*   `trapFocus` – determines whether focus should be trapped inside drawer
*   `closeOnEscape` – determines whether the drawer should be closed when `Escape` key is pressed
*   `closeOnClickOutside` – determines whether the drawer should be closed when user clicks on the overlay
*   `returnFocus` – determines whether focus should be returned to the element that was focused before the drawer was opened

[react-remove-scroll settings](#react-remove-scroll-settings)
-------------------------------------------------------------

`Drawer` uses [react-remove-scroll](https://github.com/theKashey/react-remove-scroll) package to lock scroll. You can pass props down to the `RemoveScroll` component with `removeScrollProps`:

[Change close icon](#change-close-icon)
---------------------------------------

Use `closeButtonProps` to customize close button:

[Compound components](#compound-components)
-------------------------------------------

You can use the following compound components to have full control over the `Drawer` rendering:

*   `Drawer.Root` – context provider
*   `Drawer.Overlay` – render [Overlay](https://mantine.dev/core/overlay/)
*   `Drawer.Content` – main drawer element, should include all drawer content
*   `Drawer.Header` – sticky header, usually contains `Drawer.Title` and `Drawer.CloseButton`
*   `Drawer.Title` – `h2` element, `aria-labelledby` of `Drawer.Content` is pointing to this element, usually is rendered inside `Drawer.Header`
*   `Drawer.CloseButton` – close button, usually rendered inside `Drawer.Header`
*   `Drawer.Body` – a place for main content, `aria-describedby` of `Drawer.Content` is pointing to this element

[Drawer.Stack](#drawerstack)
----------------------------

Use `Drawer.Stack` component to render multiple drawers at the same time. `Drawer.Stack` keeps track of opened drawers, manages z-index values, focus trapping and `closeOnEscape` behavior. `Drawer.Stack` is designed to be used with `useDrawersStack` hook.

Differences from using multiple `Drawer` components:

*   `Drawer.Stack` manages z-index values – drawers that are opened later will always have higher z-index value disregarding their order in the DOM
*   `Drawer.Stack` disables focus trap and `Escape` key handling for all drawers except the one that is currently opened
*   Drawers that are not currently opened are present in the DOM but are hidden with `opacity: 0` and `pointer-events: none`
*   Only one overlay is rendered at a time

Note that `Drawer.Stack` can only be used with `Drawer` component. Components built with `Drawer.Root` and other compound components are not compatible with `Drawer.Stack`.

[useDrawersStack hook](#usedrawersstack-hook)
---------------------------------------------

`useDrawersStack` hook provides an easy way to control multiple drawers at the same time. It accepts an array of unique drawers ids and returns an object with the following properties:

Example of using `useDrawersStack` with `Drawer` component:

[Fixed elements offset](#fixed-elements-offset)
-----------------------------------------------

`Drawer` component uses [react-remove-scroll](https://github.com/theKashey/react-remove-scroll) package to lock scroll. To properly size these `elements` add a `className` to them ([documentation](https://github.com/theKashey/react-remove-scroll#positionfixed-elements)):

[Accessibility](#accessibility)
-------------------------------

`Drawer` component follows [WAI-ARIA recommendations](https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/examples/dialog) on accessibility.

Set `title` props to make component accessible, will add `aria-labelledby` to the content element:

To set close button `aria-label` use `closeButtonProps`:</content>
</page>

<page>
  <title>FloatingIndicator | Mantine</title>
  <url>https://mantine.dev/core/floating-indicator/</url>
  <content>[Usage](#usage)
---------------

`FloatingIndicator` is designed to highlight active element in a group. It can be used to create custom segmented controls, tabs and other similar components.

`FloatingIndicator` renders an element over the `target` element. To calculate the position it is required to pass `parent` element which has a relative position.

By default, `FloatingIndicator` does not have any visible styles. You can use `className` prop or [Styles API](https://mantine.dev/styles/styles-api/) to apply styles.

[Multiple rows](#multiple-rows)
-------------------------------

`FloatingIndicator` can be used to highlight active element in a group with multiple rows:

[Example: Tabs](#example-tabs)
------------------------------</content>
</page>

<page>
  <title>HoverCard | Mantine</title>
  <url>https://mantine.dev/core/hover-card/</url>
  <content>[Usage](#usage)
---------------

[Delays](#delays)
-----------------

Set open and close delays in ms with `openDelay` and `closeDelay` props:

[With interactive elements](#with-interactive-elements)
-------------------------------------------------------

`HoverCard` is displayed only when the mouse is over the target element or dropdown, you can use anchors and buttons within dropdowns, using inputs is not recommended:

[HoverCard.Target children](#target-children)
---------------------------------------------

`HoverCard.Target` requires an element or a component as a single child – strings, fragments, numbers and multiple elements/components are not supported and **will throw error**. Custom components must provide a prop to get root element ref, all Mantine components support ref out of the box.

[Required ref prop](#required-ref-prop)
---------------------------------------

Custom components that are rendered inside HoverCard.Target are required to support `ref` prop:

Use `forwardRef` function to forward ref to root element:

[Accessibility](#accessibility)
-------------------------------

`HoverCard` is ignored by screen readers and cannot be activated with keyboard, use it to display only additional information that is not required to understand the context.</content>
</page>

<page>
  <title>Menu | Mantine</title>
  <url>https://mantine.dev/core/menu/</url>
  <content>[Usage](#usage)
---------------

[Submenus](#submenus)
---------------------

[Controlled](#controlled)
-------------------------

Dropdown opened state can be controlled with `opened` and `onChange` props:

[Show menu on hover](#show-menu-on-hover)
-----------------------------------------

Set `trigger="hover"` to reveal dropdown when hovers over menu target and dropdown. `closeDelay` and `openDelay` props can be used to control open and close delay in ms. Note that:

*   If you set `closeDelay={0}` then menu will close before user will reach dropdown, set `offset={0}` to remove space between target element and dropdown.
*   Menu with `trigger="hover"` is not accessible – users that navigate with keyboard will not be able to use it. If you need click-hover hover and click triggers, use `trigger="click-hover"`.

To make `Menu` that is revealed on hover accessible on all devices, use `trigger="click-hover"` instead. The dropdown will be revealed on hover on desktop and on click on mobile devices.

[Disabled items](#disabled-items)
---------------------------------

[Dropdown position](#dropdown-position)
---------------------------------------

[Transitions](#transitions)
---------------------------

Menu dropdown can be animated with any of premade transitions from [Transition](https://mantine.dev/core/transition/) component:

[Custom component as Menu.Item](#custom-component-as-menuitem)
--------------------------------------------------------------

By default, `Menu.Item` renders as button element, to change that set `component` prop:

Note that the component you pass to `component` prop should allow spreading props to its root element:

[Custom component as target](#custom-component-as-target)
---------------------------------------------------------

[Styles API](#styles-api)
-------------------------

`Menu` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Component Styles API

Hover over selectors to highlight corresponding elements

[Menu.Target children](#target-children)
----------------------------------------

`Menu.Target` requires an element or a component as a single child – strings, fragments, numbers and multiple elements/components are not supported and **will throw error**. Custom components must provide a prop to get root element ref, all Mantine components support ref out of the box.

[Required ref prop](#required-ref-prop)
---------------------------------------

Custom components that are rendered inside Menu.Target are required to support `ref` prop:

Use `forwardRef` function to forward ref to root element:

[Accessibility](#accessibility)
-------------------------------

Menu follows [WAI-ARIA recommendations](https://www.w3.org/WAI/ARIA/apg/patterns/menu-button/examples/menu-button-links/):

*   Dropdown element has `role="menu"` and `aria-labelledby="target-id"` attributes
*   Target element has `aria-haspopup="menu"`, `aria-expanded`, `aria-controls="dropdown-id"` attributes
*   Menu item has `role="menuitem"` attribute

### [Supported target elements](#supported-target-elements)

Uncontrolled Menu with `trigger="click"` (default) will be accessible only when used with `button` element or component that renders it ([Button](https://mantine.dev/core/button/), [ActionIcon](https://mantine.dev/core/action-icon/), etc.). Other elements will not support `Space` and `Enter` key presses.

### [Hover menu](#hover-menu)

Menu with `trigger="hover"` is not accessible – it cannot be accessed with keyboard, use it only if you do not care about accessibility. If you need click-hover hover and click triggers, use `trigger="click-hover"`.

### [Navigation](#navigation)

If you are using the Menu to build a Navigation, you can use the options from the demo below to follow the [WAI-ARIA recommendations for navigation](https://www.w3.org/WAI/ARIA/apg/patterns/disclosure/examples/disclosure-navigation/).

### [Keyboard interactions](#keyboard-interactions)

If you also need to support `Tab` and `Shift + Tab` then set `menuItemTabIndex={0}`.</content>
</page>

<page>
  <title>LoadingOverlay | Mantine</title>
  <url>https://mantine.dev/core/loading-overlay/</url>
  <content>[Usage](#usage)
---------------

`LoadingOverlay` renders an overlay with a loader over the parent element with relative position. It is usually used to indicate loading state of forms. Note that elements under overlay are still focusable with keyboard, remember to add additional logic to handle this case.

`LoadingOverlay` rendering is controlled by `visible` prop:

[Loader props](#loader-props)
-----------------------------

You can pass props down to the [Loader](https://mantine.dev/core/loader/) component with `loaderProps`:

[Custom inline loaders](#custom-inline-loaders)
-----------------------------------------------

To replace default loader with any custom content, set `loaderProps={{ children: <div>Your content</div> }}`. You can put any React node inside `loaderProps.children`:</content>
</page>

<page>
  <title>Modal | Mantine</title>
  <url>https://mantine.dev/core/modal/</url>
  <content>[Usage](#usage)
---------------

[Center modal vertically](#center-modal-vertically)
---------------------------------------------------

[Remove header](#remove-header)
-------------------------------

To remove header set `withCloseButton={false}`:

[Change size](#change-size)
---------------------------

You can change modal width by setting `size` prop to predefined size or any valid width, for example, `55%` or `50rem`. `Modal` width cannot exceed `100vw`.

[Size auto](#size-auto)
-----------------------

`Modal` with `size="auto"` will have width to fit its content:

[Fullscreen](#fullscreen)
-------------------------

Fullscreen modal will take the entire screen, it is usually better to change transition to `fade` when `fullScreen` prop is set:

To switch Modal to fullscreen on devices with small screens only use [use-media-query](https://mantine.dev/hooks/use-media-query/) hook. `size` prop is ignored if `fullScreen` prop is set:

[Customize overlay](#customize-overlay)
---------------------------------------

`Modal` uses [Overlay](https://mantine.dev/core/overlay/) component, you can set any props that [Overlay](https://mantine.dev/core/overlay/) supports with `overlayProps`:

[Modal with scroll](#modal-with-scroll)
---------------------------------------

[Usage with ScrollArea](#usage-with-scrollarea)
-----------------------------------------------

[Change offsets](#change-offsets)
---------------------------------

Use `xOffset`/`yOffset` to configure horizontal/vertical content offsets:

[Change transitions](#change-transitions)
-----------------------------------------

`Modal` is built with [Transition](https://mantine.dev/core/transition/) component. Use `transitionProps` prop to customize any [Transition](https://mantine.dev/core/transition/) properties:

[onExitTransitionEnd and onEnterTransitionEnd](#onexittransitionend-and-onentertransitionend)
---------------------------------------------------------------------------------------------

`onExitTransitionEnd` and `onEnterTransitionEnd` props can be used to run code after exit/enter transition is finished. For example, this is useful when you want to clear data after modal is closed:

[Initial focus](#initial-focus)
-------------------------------

Modal uses [FocusTrap](https://mantine.dev/core/focus-trap/) to trap focus. Add `data-autofocus` attribute to the element that should receive initial focus.

If you do not want to focus any elements when the modal is opened, use `FocusTrap.InitialFocus` component to create a visually hidden element that will receive initial focus:

If you do not add `data-autofocus` attribute and do not use `FocusTrap.InitialFocus`, modal will focus the first focusable element inside it which is usually the close button.

[Control behavior](#control-behavior)
-------------------------------------

The following props can be used to control `Modal` behavior. In most cases, it is not recommended to turn these features off – it will make the component less accessible.

*   `trapFocus` – determines whether focus should be trapped inside modal
*   `closeOnEscape` – determines whether the modal should be closed when `Escape` key is pressed
*   `closeOnClickOutside` – determines whether the modal should be closed when user clicks on the overlay
*   `returnFocus` – determines whether focus should be returned to the element that was focused before the modal was opened

[react-remove-scroll settings](#react-remove-scroll-settings)
-------------------------------------------------------------

`Modal` uses [react-remove-scroll](https://github.com/theKashey/react-remove-scroll) package to lock scroll. You can pass props down to the `RemoveScroll` component with `removeScrollProps`:

[Change close icon](#change-close-icon)
---------------------------------------

Use `closeButtonProps` to customize close button:

[Compound components](#compound-components)
-------------------------------------------

You can use the following compound components to have full control over the `Modal` rendering:

*   `Modal.Root` – context provider
*   `Modal.Overlay` – render [Overlay](https://mantine.dev/core/overlay/)
*   `Modal.Content` – main modal element, should include all modal content
*   `Modal.Header` – sticky header, usually contains `Modal.Title` and `Modal.CloseButton`
*   `Modal.Title` – `h2` element, `aria-labelledby` of `Modal.Content` is pointing to this element, usually is rendered inside `Modal.Header`
*   `Modal.CloseButton` – close button, usually rendered inside `Modal.Header`
*   `Modal.Body` – a place for main content, `aria-describedby` of `Modal.Content` is pointing to this element

[Modal.Stack](#modalstack)
--------------------------

Use `Modal.Stack` component to render multiple modals at the same time. `Modal.Stack` keeps track of opened modals, manages z-index values, focus trapping and `closeOnEscape` behavior. `Modal.Stack` is designed to be used with `useModalsStack` hook.

Differences from using multiple `Modal` components:

*   `Modal.Stack` manages z-index values – modals that are opened later will always have higher z-index value disregarding their order in the DOM
*   `Modal.Stack` disables focus trap and `Escape` key handling for all modals except the one that is currently opened
*   Modals that are not currently opened are present in the DOM but are hidden with `opacity: 0` and `pointer-events: none`
*   Only one overlay is rendered at a time

Note that `Modal.Stack` can only be used with `Modal` component. Components built with `Modal.Root` and other compound components are not compatible with `Modal.Stack`.

[useModalsStack hook](#usemodalsstack-hook)
-------------------------------------------

`useModalsStack` hook provides an easy way to control multiple modals at the same time. It accepts an array of unique modals ids and returns an object with the following properties:

Example of using `useModalsStack` with `Modal` component:

[Fixed elements offset](#fixed-elements-offset)
-----------------------------------------------

`Modal` component uses [react-remove-scroll](https://github.com/theKashey/react-remove-scroll) package to lock scroll. To properly size these `elements` add a `className` to them ([documentation](https://github.com/theKashey/react-remove-scroll#positionfixed-elements)):

[Accessibility](#accessibility)
-------------------------------

`Modal` component follows [WAI-ARIA recommendations](https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/examples/dialog) on accessibility.

Set `title` props to make component accessible, will add `aria-labelledby` to the content element:

To set close button `aria-label` use `closeButtonProps`:</content>
</page>

<page>
  <title>Overlay | Mantine</title>
  <url>https://mantine.dev/core/overlay/</url>
  <content>[Usage](#usage)
---------------

`Overlay` takes 100% of width and height of parent container or viewport if `fixed` prop is set. Set `color` and `backgroundOpacity` props to change `Overlay` background-color. Note that `backgroundOpacity` prop does not change CSS opacity property, it changes background-color. For example, if you set `color="#000"` and `backgroundOpacity={0.85}` background-color will be `rgba(0, 0, 0, 0.85)`:

[Gradient](#gradient)
---------------------

Set `gradient` prop to use background-image instead of background-color. When `gradient` prop is set, `color` and `backgroundOpacity` props are ignored.

[Blur](#blur)
-------------

Set `blur` prop to add `backdrop-filter: blur({value})` styles. Note that `backdrop-filter` [is not supported in all browsers](https://caniuse.com/css-backdrop-filter).

[Polymorphic component](#polymorphic-component)
-----------------------------------------------

`Overlay` is a [polymorphic component](https://mantine.dev/guides/polymorphic/) – its default root element is `div`, but it can be changed to any other element or component with `component` prop:

You can also use components in `component` prop, for example, Next.js `Link`:

> **Polymorphic components with TypeScript**
> 
> Note that polymorphic components props types are different from regular components – they do not extend HTML element props of the default element. For example, `OverlayProps` does not extend `React.ComponentPropsWithoutRef'<'div'>'` although `div` is the default element.
> 
> If you want to create a wrapper for a polymorphic component that is not polymorphic (does not support `component` prop), then your component props interface should extend HTML element props, for example:
> 
> If you want your component to remain polymorphic after wrapping, use `createPolymorphicComponent` function described in [this guide](https://mantine.dev/guides/polymorphic/).</content>
</page>

<page>
  <title>Tooltip | Mantine</title>
  <url>https://mantine.dev/core/tooltip/</url>
  <content>[Usage](#usage)
---------------

[Tooltip children](#tooltip-children)
-------------------------------------

Tooltip requires an element or a component as a single child – strings, fragments, numbers and multiple elements/components are not supported and **will throw error**. Custom components must provide a prop to get root element ref, all Mantine components support ref out of the box.

[Required ref prop](#required-ref-prop)
---------------------------------------

Custom components that are rendered inside `Tooltip` are required to support `ref` prop:

Use `forwardRef` function to forward ref to root element:

[Color](#color)
---------------

[Offset](#offset)
-----------------

Set `offset` prop to a number to change tooltip position relative to the target element. This way you can control tooltip offset on main axis only.

To control offset on both axis, pass object with `mainAxis` and `crossAxis` properties:

[Arrow](#arrow)
---------------

Set `withArrow` prop to add an arrow to the tooltip. Arrow is a `div` element rotated with `transform: rotate(45deg)`.

`arrowPosition` prop determines how arrow is position relative to the target element when `position` is set to `*-start` and `*-end` values on `Popover` component. By default, the value is `center` – the arrow is positioned in the center of the target element if it is possible.

If you change `arrowPosition` to `side`, then the arrow will be positioned on the side of the target element, and you will be able to control arrow offset with `arrowOffset` prop. Note that when `arrowPosition` is set to `center`, `arrowOffset` prop is ignored.

[Controlled](#controlled)
-------------------------

[Change events](#change-events)
-------------------------------

Events that trigger tooltip can be changed with `events` prop, it accepts an object with the following properties that determine which events will trigger tooltip:

*   `hover` – mouse hover event, `true` by default
*   `focus` – focus/blur events excluding clicks on the target element, `false` by default
*   `touch` – events for touchscreen devices, `false` by default

[Multiline](#multiline)
-----------------------

To enable multiline mode, set `multiline` prop to enable line breaks and `w` [style prop](https://mantine.dev/styles/style-props/) to set tooltip width:

[Inline](#inline)
-----------------

Set `inline` prop to use `Tooltip` with inline elements:

Stantler’s magnificent antlers were traded at high prices as works of art. As a result, this Pokémon was hunted close to extinction by those who were after the priceless antlers. When visiting a junkyard, you may catch sight of it having an intense fight with Murkrow over shiny objects.Ho-Oh’s feathers glow in seven colors depending on the angle at which they are struck by light. These feathers are said to bring happiness to the bearers. This Pokémon is said to live at the foot of a rainbow.

[Change transition](#change-transition)
---------------------------------------

Tooltip is built with [Transition](https://mantine.dev/core/transition/) component, it supports `transitionProps` props:

All available premade transitions:

fade

fade-up

fade-down

fade-left

fade-right

scale

scale-y

scale-x

skew-up

skew-down

rotate-left

rotate-right

slide-down

slide-up

slide-left

slide-right

pop

pop-bottom-left

pop-bottom-right

pop-top-left

pop-top-right

[Close and open delay](#close-and-open-delay)
---------------------------------------------

You can delay tooltip open/close events by setting `openDelay` and `closeDelay` props in ms:

[Tooltip delay group](#tooltip-delay-group)
-------------------------------------------

`Tooltip.Group` component can be used to sync open and close delays for multiple tooltips:

[Floating tooltip](#floating-tooltip)
-------------------------------------

`Tooltip.Floating` component has the same API as Tooltip component but tooltip will follow mouse:

Hover over the box to see tooltip

[Custom components with Tooltip](#custom-components-with-tooltip)
-----------------------------------------------------------------

If you want to build a component that can be used with Tooltip use [forwardRef](https://reactjs.org/docs/forwarding-refs.html) or other prop that will allow to get root element ref. This logic is applied to Tooltip and Tooltip.Floating components:

[Accessibility](#accessibility)
-------------------------------

Tooltip follows [WAI-ARIA recommendations](https://www.w3.org/TR/wai-aria-practices/#tooltip):

*   Tooltip body has `role="tooltip"` attribute
*   Target element has `aria-describedby` attribute
*   `Tooltip.Floating` is ignored by screen readers

By default, Tooltip is not triggered by focus events and thus users who use a screen reader or navigate with keyboard will not be able to get tooltip content. Set `events` prop to enable focus/blur tooltip events:</content>
</page>

<page>
  <title>Accordion | Mantine</title>
  <url>https://mantine.dev/core/accordion/</url>
  <content>[Usage](#usage)
---------------

Data used in Accordion examples:

Crisp and refreshing fruit. Apples are known for their versatility and nutritional benefits. They come in a variety of flavors and are great for snacking, baking, or adding to salads.

[Custom control label](#custom-control-label)
---------------------------------------------

[Change chevron](#change-chevron)
---------------------------------

Crisp and refreshing fruit. Apples are known for their versatility and nutritional benefits. They come in a variety of flavors and are great for snacking, baking, or adding to salads.

[With icons](#with-icons)
-------------------------

[Change transition](#change-transition)
---------------------------------------

To change transition duration, set `transitionDuration` prop:

To disable transitions, set `transitionDuration` to 0:

[Default opened items](#default-opened-items)
---------------------------------------------

When `multiple={false}`, set `defaultValue` as string:

When `multiple={true}`, set `defaultValue` as an array of strings:

[Control state](#control-state)
-------------------------------

When `multiple={false}`, set `value` as string:

When `multiple={true}`, set `value` as an array of strings:

[Compose controls](#compose-controls)
-------------------------------------

You can add any additional elements that will be displayed next to `Accordion.Control`, for example, you can add [ActionIcon](https://mantine.dev/core/action-icon/) or [Menu](https://mantine.dev/core/menu/):

[Disabled items](#disabled-items)
---------------------------------

Set `disabled` prop on `Accordion.Control` component to disable it. Disabled items cannot be activated with mouse or keyboard, will be skipped when user navigates with arrow keys:

Crisp and refreshing fruit. Apples are known for their versatility and nutritional benefits. They come in a variety of flavors and are great for snacking, baking, or adding to salads.

[Unstyled Accordion](#unstyled-accordion)
-----------------------------------------

Set `unstyled` prop on Accordion component to remove all non-essential library styles. It can be used to style component with [Styles API](https://mantine.dev/styles/styles-api/) without overriding any styles.

[Styles API](#styles-api)
-------------------------

`Accordion` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Use [Styles API](https://mantine.dev/styles/styles-api/) to customize Accordion styles:

Crisp and refreshing fruit. Apples are known for their versatility and nutritional benefits. They come in a variety of flavors and are great for snacking, baking, or adding to salads.

Component Styles API

Hover over selectors to highlight corresponding elements

Use [Styles API](https://mantine.dev/styles/styles-api/) to customize Accordion styles:

Crisp and refreshing fruit. Apples are known for their versatility and nutritional benefits. They come in a variety of flavors and are great for snacking, baking, or adding to salads.

[TypeScript](#typescript)
-------------------------

`AccordionProps` type exported from `@mantine/core` is a generic, it accepts boolean type that describes `multiple` state:

[Accessibility](#accessibility)
-------------------------------

Accordion component follows [WAI-ARIA recommendations](https://www.w3.org/TR/wai-aria-practices-1.1/examples/accordion/accordion.html) on accessibility.

Set `order` on `Accordion` component to wrap accordion controls with h2-h6 heading. The following example will wrap controls with h3 tag:

Keyboard interactions:</content>
</page>

<page>
  <title>BackgroundImage | Mantine</title>
  <url>https://mantine.dev/core/background-image/</url>
  <content>[Usage](#usage)
---------------

BackgroundImage component can be used to add any content on image. It is useful for hero headers and other similar sections

[Polymorphic component](#polymorphic-component)
-----------------------------------------------

`BackgroundImage` is a [polymorphic component](https://mantine.dev/guides/polymorphic/) – its default root element is `div`, but it can be changed to any other element or component with `component` prop:

> **Polymorphic components with TypeScript**
> 
> Note that polymorphic components props types are different from regular components – they do not extend HTML element props of the default element. For example, `BackgroundImageProps` does not extend `React.ComponentPropsWithoutRef'<'div'>'` although `div` is the default element.
> 
> If you want to create a wrapper for a polymorphic component that is not polymorphic (does not support `component` prop), then your component props interface should extend HTML element props, for example:
> 
> If you want your component to remain polymorphic after wrapping, use `createPolymorphicComponent` function described in [this guide](https://mantine.dev/guides/polymorphic/).</content>
</page>

<page>
  <title>Avatar | Mantine</title>
  <url>https://mantine.dev/core/avatar/</url>
  <content>[Usage](#usage)
---------------

[Initials](#initials)
---------------------

To display initials instead of the default placeholder, set `name` prop to the name of the person, for example, `name="John Doe"`. If the name is set, you can use `color="initials"` to generate color based on the name:

[Allowed initials colors](#allowed-initials-colors)
---------------------------------------------------

By default, all colors from the default theme are allowed for initials, you can restrict them by providing `allowedInitialsColors` prop with an array of colors. Note that the default colors array does not include custom colors defined in the theme, you need to provide them manually if needed.

[Placeholder](#placeholder)
---------------------------

If the image cannot be loaded or not provided, `Avatar` will display a placeholder instead. By default, placeholder is an icon, but it can be changed to any React node:

[Variants](#variants)
---------------------

[Avatar.Group](#avatargroup)
----------------------------

`Avatar.Group` component combines multiple avatars into a stack:

Note that you must not wrap child `Avatar` components with any additional elements, but you can use wrap `Avatar` with components that do not render any HTML elements in the current tree, for example [Tooltip](https://mantine.dev/core/tooltip/).

Example of usage with [Tooltip](https://mantine.dev/core/tooltip/):

[Polymorphic component](#polymorphic-component)
-----------------------------------------------

`Avatar` is a [polymorphic component](https://mantine.dev/guides/polymorphic/) – its default root element is `div`, but it can be changed to any other element or component with `component` prop:

You can also use components in `component` prop, for example, Next.js `Link`:

> **Polymorphic components with TypeScript**
> 
> Note that polymorphic components props types are different from regular components – they do not extend HTML element props of the default element. For example, `AvatarProps` does not extend `React.ComponentPropsWithoutRef'<'div'>'` although `div` is the default element.
> 
> If you want to create a wrapper for a polymorphic component that is not polymorphic (does not support `component` prop), then your component props interface should extend HTML element props, for example:
> 
> If you want your component to remain polymorphic after wrapping, use `createPolymorphicComponent` function described in [this guide](https://mantine.dev/guides/polymorphic/).

You can combine it with [Tooltip](https://mantine.dev/core/tooltip/) or [Popover](https://mantine.dev/core/popover/) to show additional information on hover

[Accessibility](#accessibility)
-------------------------------

Avatar renders `<img />` HTML element. Set `alt` prop to describe image, it is also used as `title` attribute for avatar placeholder when the image cannot be loaded.</content>
</page>

<page>
  <title>Badge | Mantine</title>
  <url>https://mantine.dev/core/badge/</url>
  <content>[Usage](#usage)
---------------

[Gradient variant](#gradient-variant)
-------------------------------------

When `variant` prop is set to `gradient`, you can control gradient with `gradient` prop, it accepts an object with `from`, `to` and `deg` properties. If the`gradient` prop is not set, `Badge` will use `theme.defaultGradient` which can be configured on the [theme object](https://mantine.dev/theming/theme-object/). `gradient` prop is ignored when `variant` is not `gradient`.

Note that `variant="gradient"` supports only linear gradients with two colors. If you need a more complex gradient, then use [Styles API](https://mantine.dev/styles/styles-api/) to modify `Badge` styles.

[Rounded](#rounded)
-------------------

Set `circle` prop, to reduce horizontal padding and make badge width equal to its height:

[Left and right sections](#left-and-right-sections)
---------------------------------------------------

With left section

With right section

[Full width](#full-width)
-------------------------

Set `fullWidth` to make badge span full width of its parent element:

[Customize variants colors](#customize-variants-colors)
-------------------------------------------------------

You can customize colors for `Badge` and other components variants by adding [variantColorResolver](https://mantine.dev/theming/colors/#colors-variant-resolver) to your theme.

Lime filled

Orange light

Danger

[autoContrast](#auto-contrast)
------------------------------

`Badge` supports `autoContrast` prop and [theme.autoContrast](https://mantine.dev/theming/theme-object/#autocontrast). If `autoContrast` is set either on `Badge` or on theme, content color will be adjusted to have sufficient contrast with the value specified in `color` prop.

Note that `autoContrast` feature works only if you use `color` prop to change background color. `autoContrast` works only with `filled` variant.

[Styles API](#styles-api)
-------------------------

`Badge` supports [Styles API](https://mantine.dev/styles/styles-api/), you can add styles to any inner element of the component with`classNames` prop. Follow [Styles API](https://mantine.dev/styles/styles-api/) documentation to learn more.

Component Styles API

Hover over selectors to highlight corresponding elements

[Polymorphic component](#polymorphic-component)
-----------------------------------------------

`Badge` is a [polymorphic component](https://mantine.dev/guides/polymorphic/) – its default root element is `div`, but it can be changed to any other element or component with `component` prop:

You can also use components in `component` prop, for example, Next.js `Link`:

> **Polymorphic components with TypeScript**
> 
> Note that polymorphic components props types are different from regular components – they do not extend HTML element props of the default element. For example, `BadgeProps` does not extend `React.ComponentPropsWithoutRef'<'div'>'` although `div` is the default element.
> 
> If you want to create a wrapper for a polymorphic component that is not polymorphic (does not support `component` prop), then your component props interface should extend HTML element props, for example:
> 
> If you want your component to remain polymorphic after wrapping, use `createPolymorphicComponent` function described in [this guide](https://mantine.dev/guides/polymorphic/).</content>
</page>

<page>
  <title>Card | Mantine</title>
  <url>https://mantine.dev/core/card/</url>
  <content>[Usage](#usage)
---------------

`Card` is a wrapper around [Paper](https://mantine.dev/core/paper/) component with some additional styles and `Card.Section` component that allows to split card into sections. If you do not need sections, you use [Paper](https://mantine.dev/core/paper/) component instead.

Norway Fjord Adventures

On Sale

With Fjord Tours you can explore more of the magical fjord landscapes with tours and activities on and around the fjords of Norway

[Polymorphic component](#polymorphic-component)
-----------------------------------------------

Card is a [polymorphic component](https://mantine.dev/guides/polymorphic/) component, you can change its root element:

[Card.Section](#cardsection)
----------------------------

`Card.Section` is a special component that is used to remove Card padding from its children while other elements still have horizontal spacing. `Card.Section` works the following way:

*   If component is the first child in Card, then it has negative top, left and right margins
*   If it is the last child in Card, then it has negative bottom, left and right margins
*   If it is in the middle then, only the left and right margins will be negative

Note that `Card` relies on mapping direct children and you cannot use fragments or other wrappers for `Card.Section`:

[Polymorphic Card.Section](#polymorphic-cardsection)
----------------------------------------------------

`Card.Section` is a [polymorphic component](https://mantine.dev/guides/polymorphic/) component, you can change its root element:

Norway Fjord Adventures

On Sale

With Fjord Tours you can explore more of the magical fjord landscapes with tours and activities on and around the fjords of Norway

[withBorder and inheritPadding props](#withborder-and-inheritpadding-props)
---------------------------------------------------------------------------

*   `withBorder` prop adds top and bottom border to `Card.Section` depending on its position relative to other content and sections
*   `inheritPadding` prop adds the same left and right padding to `Card.Section` as set in `Card` component

200+ images uploaded since last visit, review them to select which one should be added to your gallery</content>
</page>

<page>
  <title>ColorSwatch | Mantine</title>
  <url>https://mantine.dev/core/color-swatch/</url>
  <content>[Usage](#usage)
---------------

[withShadow](#withshadow)
-------------------------

By default, `ColorSwatch` has an inner box-shadow to make it more visible on light backgrounds, you can disable it by setting `withShadow={false}` prop:

[Polymorphic component](#polymorphic-component)
-----------------------------------------------

`ColorSwatch` is a [polymorphic component](https://mantine.dev/guides/polymorphic/) – its default root element is `div`, but it can be changed to any other element or component with `component` prop:

> **Polymorphic components with TypeScript**
> 
> Note that polymorphic components props types are different from regular components – they do not extend HTML element props of the default element. For example, `ColorSwatchProps` does not extend `React.ComponentPropsWithoutRef'<'div'>'` although `div` is the default element.
> 
> If you want to create a wrapper for a polymorphic component that is not polymorphic (does not support `component` prop), then your component props interface should extend HTML element props, for example:
> 
> If you want your component to remain polymorphic after wrapping, use `createPolymorphicComponent` function described in [this guide](https://mantine.dev/guides/polymorphic/).</content>
</page>

<page>
  <title>Image | Mantine</title>
  <url>https://mantine.dev/core/image/</url>
  <content>[Usage](#usage)
---------------

`Image` is a wrapper for `img` with minimal styles. By default, the image will take 100% of parent width. The image size can be controlled with `w` and `h` [style props](https://mantine.dev/styles/style-props/).

[Image height](#image-height)
-----------------------------

In most case, you will need to set image height to prevent layout jumps when image is loading. You can do so with `h` [style props](https://mantine.dev/styles/style-props/).

[Image fit](#image-fit)
-----------------------

By default the image has `object-fit: cover` style - it will resize to cover parent element. To change this behavior, set `w="auto"` and `fit="contain"` props.

[Fallback image](#fallback-image)
---------------------------------

Set `fallbackSrc` prop to display fallback image when image fails to load:

[Usage with Next.js Image](#usage-with-nextjs-image)
----------------------------------------------------

`Image` component is a [polymorphic component](https://mantine.dev/guides/polymorphic/), its root element can be changed with `component` prop. You can use it with `next/image` and other similar components.</content>
</page>

<page>
  <title>Indicator | Mantine</title>
  <url>https://mantine.dev/core/indicator/</url>
  <content>[Usage](#usage)
---------------

Disabled

With border

Processing

    import { Indicator, Avatar } from '@mantine/core';
    
    function Demo() {
      return (
        <Indicator>
          <Avatar
            size="lg"
            radius="sm"
            src="https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-1.png"
          />
        </Indicator>
      );
    }

[Inline](#inline)
-----------------

When the target element has a fixed width, set `inline` prop to add `display: inline-block;` styles to Indicator container. Alternatively, you can set width and height with `style` prop if you still want the root element to keep `display: block`.

    import { Avatar, Indicator } from '@mantine/core';
    
    function Demo() {
      return (
        <Indicator inline label="New" size={16}>
          <Avatar
            size="lg"
            radius="sm"
            src="https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-2.png"
          />
        </Indicator>
      );
    }

[Offset](#offset)
-----------------

Set `offset` to change indicator position. It is useful when Indicator component is used with children that have border-radius:

    import { Avatar, Indicator } from '@mantine/core';
    
    function Demo() {
      return (
        <Indicator inline size={16} offset={7} position="bottom-end" color="red" withBorder>
          <Avatar
            size="lg"
            radius="xl"
            src="https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-3.png"
          />
        </Indicator>
      );
    }

[Processing animation](#processing-animation)
---------------------------------------------

    import { Avatar, Indicator } from '@mantine/core';
    
    function Demo() {
      return (
        <Indicator inline processing color="red" size={12}>
          <Avatar
            size="lg"
            radius="sm"
            src="https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-4.png"
          />
        </Indicator>
      );
    }

[Disabled](#disabled)
---------------------

Set `disabled` to hide the indicator:

    import { useDisclosure } from '@mantine/hooks';
    import { Avatar, Indicator, Button, Stack } from '@mantine/core';
    
    function Demo() {
      const [visible, { toggle }] = useDisclosure();
    
      return (
        <Stack align="center">
          <Indicator inline disabled={!visible} color="red" size={12}>
            <Avatar
              size="lg"
              radius="sm"
              src="https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-5.png"
            />
          </Indicator>
          <Button onClick={toggle}>Toggle indicator</Button>
        </Stack>
      );
    }</content>
</page>

<page>
  <title>Kbd | Mantine</title>
  <url>https://mantine.dev/core/kbd/</url>
  <content>[Usage](#usage)
---------------

⌘ + Shift + M

    import { Kbd } from '@mantine/core';
    
    function Demo() {
      return (
        <div dir="ltr">
          <Kbd>⌘</Kbd> + <Kbd>Shift</Kbd> + <Kbd>M</Kbd>
        </div>
      );
    }

[Size](#size)
-------------

Shift

Size

    import { Kbd } from '@mantine/core';
    
    function Demo() {
      return <Kbd>Shift</Kbd>;
    }

[

Indicator

](https://mantine.dev/core/indicator/)[

NumberFormatter

](https://mantine.dev/core/number-formatter/)</content>
</page>

<page>
  <title>NumberFormatter | Mantine</title>
  <url>https://mantine.dev/core/number-formatter/</url>
  <content>[Usage](#usage)
---------------

Use `NumberFormatter` to format numbers. It supports the same formatting related props as [NumberInput](https://mantine.dev/core/number-input/) component.

[Prefix and suffix](#prefix-and-suffix)
---------------------------------------

Set `prefix` and `suffix` props to add given string to the start or end of the value:

With prefix: $ 100

With suffix: 100 RUB

[Thousands separator](#thousands-separator)
-------------------------------------------

Set `thousandSeparator` prop to separate thousands with a character. You can control grouping logic with `thousandsGroupStyle`, it accepts: `thousand`, `lakh`, `wan`, `none` values.

With default separator: 1,000,000

With custom separator:

1.000.000

[Decimal scale](#decimal-scale)
-------------------------------

`decimalScale` prop controls the number of allowed decimal places:</content>
</page>

<page>
  <title>Spoiler | Mantine</title>
  <url>https://mantine.dev/core/spoiler/</url>
  <content>[Usage](#usage)
---------------

Use `Spoiler` to hide long section of content. Set `maxHeight` prop to control point at which content will be hidden under spoiler and show/hide control appears. If the content height is less than `maxHeight`, the spoiler will just render children.

`hideLabel` and `showLabel` props are required – they are used as spoiler toggle button label in corresponding state.

We Butter the Bread with Butter was founded in 2007 by Marcel Neumann, who was originally guitarist for Martin Kesici's band, and Tobias Schultka. The band was originally meant as a joke, but progressed into being a more serious musical duo. The name for the band has no particular meaning, although its origins were suggested from when the two original members were driving in a car operated by Marcel Neumann and an accident almost occurred. Neumann found Schultka "so funny that he briefly lost control of the vehicle." Many of their songs from this point were covers of German folk tales and nursery rhymes.

[Control expanded state](#control-expanded-state)
-------------------------------------------------

To control expanded state use `expanded` and `onExpandedChange` props. Note that `expanded` prop does not have any effect on spoiler visuals if the content height is less than given `maxHeight`.

[Subscribe to expanded state changes](#subscribe-to-expanded-state-changes)
---------------------------------------------------------------------------

Use `onExpandedChange` to subscribe to expanded state changes:

[Transition duration](#transition-duration)
-------------------------------------------

Control transition duration by setting `transitionDuration` prop (transition-duration CSS property in ms). To disable animations, set `transitionDuration={0}`:

We Butter the Bread with Butter was founded in 2007 by Marcel Neumann, who was originally guitarist for Martin Kesici's band, and Tobias Schultka. The band was originally meant as a joke, but progressed into being a more serious musical duo. The name for the band has no particular meaning, although its origins were suggested from when the two original members were driving in a car operated by Marcel Neumann and an accident almost occurred. Neumann found Schultka "so funny that he briefly lost control of the vehicle." Many of their songs from this point were covers of German folk tales and nursery rhymes.

[Get control ref](#get-control-ref)
-----------------------------------</content>
</page>

<page>
  <title>Timeline | Mantine</title>
  <url>https://mantine.dev/core/timeline/</url>
  <content>[Usage](#usage)
---------------

New branch

You've created new branch fix-notifications from master

2 hours ago

Commits

You've pushed 23 commits to fix-notifications branch

52 minutes ago

Pull request

You've submitted a pull request Fix incorrect notification message (#187)

34 minutes ago

Code review

Robert Gluesticker left a code review on your pull request

12 minutes ago

[Line and bullet props](#line-and-bullet-props)
-----------------------------------------------

Control timeline appearance with the following props:

*   `active` – index of current active element, all elements before this index will be highlighted with `color`
*   `color` – color from theme that should be used to highlight active items, defaults to `theme.primaryColor`
*   `lineWidth` – controls line width and bullet border
*   `bulletSize` – bullet width, height and border-radius
*   `align` – defines line and bullets position relative to content, also sets text-align

New branch

You've created new branch fix-notifications from master

2 hours ago

Commits

You've pushed 23 commits to fix-notifications branch

52 minutes ago

Pull request

You've submitted a pull request Fix incorrect notification message (#187)

34 minutes ago

Code review

Robert Gluesticker left a code review on your pull request

12 minutes ago

[Bullet as React node](#bullet-as-react-node)
---------------------------------------------

Default bullet

Default bullet without anything

Avatar

Timeline bullet as avatar image

Icon

Timeline bullet as icon

ThemeIcon

Timeline bullet as ThemeIcon component

[Wrap Timeline.Item](#wrap-timelineitem)
----------------------------------------

`Timeline` component relies on `Timeline.Item` order. Wrapping `Timeline.Item` is not supported, Instead you will need to use different approaches:</content>
</page>

<page>
  <title>ThemeIcon | Mantine</title>
  <url>https://mantine.dev/core/theme-icon/</url>
  <content>[Usage](#usage)
---------------

[Gradient variant](#gradient-variant)
-------------------------------------

When `variant` prop is set to `gradient`, you can control gradient with `gradient` prop, it accepts an object with `from`, `to` and `deg` properties. If the`gradient` prop is not set, `ThemeIcon` will use `theme.defaultGradient` which can be configured on the [theme object](https://mantine.dev/theming/theme-object/). `gradient` prop is ignored when `variant` is not `gradient`.

Note that `variant="gradient"` supports only linear gradients with two colors. If you need a more complex gradient, then use [Styles API](https://mantine.dev/styles/styles-api/) to modify `ThemeIcon` styles.

[Customize variants colors](#customize-variants-colors)
-------------------------------------------------------

You can customize colors for `ThemeIcon` and other components variants by adding [variantColorResolver](https://mantine.dev/theming/colors/#colors-variant-resolver) to your theme.

[autoContrast](#auto-contrast)
------------------------------

`ThemeIcon` supports `autoContrast` prop and [theme.autoContrast](https://mantine.dev/theming/theme-object/#autocontrast). If `autoContrast` is set either on `ThemeIcon` or on theme, content color will be adjusted to have sufficient contrast with the value specified in `color` prop.

Note that `autoContrast` feature works only if you use `color` prop to change background color. `autoContrast` works only with `filled` variant.</content>
</page>

<page>
  <title>Blockquote | Mantine</title>
  <url>https://mantine.dev/core/blockquote/</url>
  <content>[Usage](#usage)
---------------

> Life is like an npm install – you never know what you are going to get.– Forrest Gump

Color

Radius

Icon size

    import { Blockquote } from '@mantine/core';
    import { IconInfoCircle } from '@tabler/icons-react';
    
    function Demo() {
      const icon = <IconInfoCircle />;
      return (
        <Blockquote color="blue" cite="– Forrest Gump" icon={icon} mt="xl">
          Life is like an npm install – you never know what you are going to get.
        </Blockquote>
      );
    }

[

Timeline

](https://mantine.dev/core/timeline/)[

Code

](https://mantine.dev/core/code/)</content>
</page>

<page>
  <title>Code | Mantine</title>
  <url>https://mantine.dev/core/code/</url>
  <content>[Usage](#usage)
---------------

By default, Code component renders inline `code` html element:

    import { Code } from '@mantine/core';
    
    function Demo() {
      return <Code>React.createElement()</Code>;
    }

[Block code](#block-code)
-------------------------

To render code in `pre` element pass `block` prop to Code component:

import { Code } from '@mantine/core';

function Demo() {
  return <Code>React.createElement()</Code>;
}

    import { Code } from '@mantine/core';
    
    const codeForPreviousDemo = `import { Code } from '@mantine/core';
    
    function Demo() {
      return <Code>React.createElement()</Code>;
    }`;
    
    function Demo() {
      return <Code block>{codeForPreviousDemo}</Code>;
    }

[Custom color](#custom-color)
-----------------------------

By default, code color is gray, you can change it to any valid CSS color or to one of the [theme.colors](https://mantine.dev/theming/colors/):

`React.createElement()``React.createElement()`

    import { Code, Group } from '@mantine/core';
    
    function Demo() {
      return (
        <Group justify="center">
          <Code color="blue.9" c="white">
            React.createElement()
          </Code>
          <Code color="var(--mantine-color-blue-light)">React.createElement()</Code>
        </Group>
      );
    }</content>
</page>

<page>
  <title>Highlight | Mantine</title>
  <url>https://mantine.dev/core/highlight/</url>
  <content>[Usage](#usage)
---------------

Use Highlight component to highlight a substring in a given string with a mark tag.

Pass the main string as children to Highlight component and string part that should be highlighted to `highlight` prop. If the main string does not include `highlight` part, it will be ignored. `Highlight` ignores trailing whitespace and highlights all matched characters sequences.

Highlight This, definitely THIS and also this!

[Highlight multiple substrings](#highlight-multiple-substrings)
---------------------------------------------------------------

To highlight multiple substrings, provide an array of values:

Highlight this and also that

[Change highlight styles](#change-highlight-styles)
---------------------------------------------------

Default [Mark](https://mantine.dev/core/mark/) styles can be overwritten with `highlightStyles` prop, it accepts either a function with a subscription to theme or an object with styles:

You can change styles of highlighted part if you do not like default styles

[Text props](#text-props)
-------------------------

Highlight is based on [Text](https://mantine.dev/core/text/) component, all its props are available:</content>
</page>

<page>
  <title>List | Mantine</title>
  <url>https://mantine.dev/core/list/</url>
  <content>[Usage](#usage)
---------------

*   Clone or download repository from GitHub
    
*   Install dependencies with yarn
    
*   To start development server run npm start command
    
*   Run tests to make sure your changes do not break the build
    
*   Submit a pull request once you are done
    

[With icons](#with-icons)
-------------------------

You can replace list bullets with icon. To do so provide following props:

*   `icon` on List component will be used as default icon for all list elements
*   `icon` on List.Item component will override context icon from List
*   `spacing` – spacing between list items from theme or any valid CSS value to set spacing, defaults to `0`
*   `center` – center item content with icon
*   `size` – set font size from theme

*   Clone or download repository from GitHub
    
*   Install dependencies with yarn
    
*   To start development server run npm start command
    
*   Run tests to make sure your changes do not break the build
    
*   Submit a pull request once you are done
    

[Nested lists](#nested-lists)
-----------------------------

Set `withPadding` prop to offset nested lists and `listStyleType` to control bullet type:

*   Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation
    
*   First order item
    
*   First order item with list
    
    *   Nested item
        
    *   Nested item
        
    *   Nested item with list
        
        *   Event more nested
            
        *   Event more nested
            
        
    *   Nested item
        
    
*   First order item</content>
</page>

<page>
  <title>Mark | Mantine</title>
  <url>https://mantine.dev/core/mark/</url>
  <content>[Usage](#usage)
---------------

Highlight this chunk of the text

Color

    import { Text, Mark } from '@mantine/core';
    
    function Demo() {
      return (
        <Text>
          Highlight <Mark>this chunk</Mark> of the text
        </Text>
      );
    }

[

List

](https://mantine.dev/core/list/)[

Table

](https://mantine.dev/core/table/)</content>
</page>

<page>
  <title>Text | Mantine</title>
  <url>https://mantine.dev/core/text/</url>
  <content>[Usage](#usage)
---------------

Extra small text

Small text

Default text

Large text

Extra large text

Semibold

Bold

Italic

Underlined

Strikethrough

Dimmed text

Blue text

Teal 4 text

Uppercase

capitalized text

Aligned to center

Aligned to right

[Gradient variant](#gradient-variant)
-------------------------------------

When `variant` prop is set to `gradient`, you can control gradient with `gradient` prop, it accepts an object with `from`, `to` and `deg` properties. If the`gradient` prop is not set, `Text` will use `theme.defaultGradient` which can be configured on the [theme object](https://mantine.dev/theming/theme-object/). `gradient` prop is ignored when `variant` is not `gradient`.

Note that `variant="gradient"` supports only linear gradients with two colors. If you need a more complex gradient, then use [Styles API](https://mantine.dev/styles/styles-api/) to modify `Text` styles.

[Truncate](#truncate)
---------------------

Set `truncate` prop to add `text-overflow: ellipsis` styles:

Lorem ipsum dolor sit amet consectetur adipisicing elit. Unde provident eos fugiat id necessitatibus magni ducimus molestias. Placeat, consequatur. Quisquam, quae magnam perspiciatis excepturi iste sint itaque sunt laborum. Nihil?

[Line clamp](#line-clamp)
-------------------------

Specify maximum number of lines with `lineClamp` prop. This option uses [\-webkit-line-clamp](https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-line-clamp) CSS property ([caniuse](https://caniuse.com/css-line-clamp)). Note that `padding-bottom` cannot be set on text element:

From Bulbapedia: Bulbasaur is a small, quadrupedal Pokémon that has blue-green skin with darker patches. It has red eyes with white pupils, pointed, ear-like structures on top of its head, and a short, blunt snout with a wide mouth. A pair of small, pointed teeth are visible in the upper jaw when its mouth is open. Each of its thick legs ends with three sharp claws. On Bulbasaur's back is a green plant bulb, which is grown from a seed planted there at birth. The bulb also conceals two slender, tentacle-like vines and provides it with energy through photosynthesis as well as from the nutrient-rich seeds contained within.

Line clamp can also be used with any children (not only strings), for example with [TypographyStylesProvider](https://mantine.dev/core/typography-styles-provider/):

### Line clamp with TypographyStylesProvider

Lorem ipsum dolor sit amet consectetur adipisicing elit. Nesciunt nulla quam aut sed corporis voluptates praesentium inventore, sapiente ex tempore sit consequatur debitis non! Illo cum ipsa reiciendis quidem facere, deserunt eos totam impedit. Vel ab, ipsum veniam aperiam odit molestiae incidunt minus, sint eos iusto earum quaerat vitae perspiciatis.

[Inherit styles](#inherit-styles)
---------------------------------

Text always applies font-size, font-family and line-height styles, but in some cases this is not a desired behavior. To force Text to inherit parent styles set `inherit` prop. For example, highlight part of [Title](https://mantine.dev/core/title/):

### Title in which you want to highlight something

[Polymorphic component](#polymorphic-component)
-----------------------------------------------

`Text` is a [polymorphic component](https://mantine.dev/guides/polymorphic/) – its default root element is `p`, but it can be changed to any other element or component with `component` prop:

> **Polymorphic components with TypeScript**
> 
> Note that polymorphic components props types are different from regular components – they do not extend HTML element props of the default element. For example, `TextProps` does not extend `React.ComponentPropsWithoutRef'<'div'>'` although `p` is the default element.
> 
> If you want to create a wrapper for a polymorphic component that is not polymorphic (does not support `component` prop), then your component props interface should extend HTML element props, for example:
> 
> If you want your component to remain polymorphic after wrapping, use `createPolymorphicComponent` function described in [this guide](https://mantine.dev/guides/polymorphic/).

[span prop](#span-prop)
-----------------------

Use `span` prop as a shorthand for `component="span"`:</content>
</page>

<page>
  <title>Table | Mantine</title>
  <url>https://mantine.dev/core/table/</url>
  <content>[Usage](#usage)
---------------

Table data for all examples:

| Element position | Element name | Symbol | Atomic mass |
| --- | --- | --- | --- |
| 6 | Carbon | C | 12.011 |
| 7 | Nitrogen | N | 14.007 |
| 39 | Yttrium | Y | 88.906 |
| 56 | Barium | Ba | 137.33 |
| 58 | Cerium | Ce | 140.12 |

[data prop](#data-prop)
-----------------------

You can use `data` prop to automatically generate table rows from array of React nodes. `data` prop accepts an object with the following properties:

*   `head` – an array of React nodes (`React.ReactNode[]`) to render `Table.Th` in `Table.Thead`
*   `foot` – an array of React nodes (`React.ReactNode[]`) to render `Table.Th` in `Table.Tfoot`
*   `body` - an array of arrays of React nodes (`React.ReactNode[][]`) to render `Table.Td` in `Table.Tbody`
*   `caption` – a React node to render `Table.Caption`

Some elements from periodic table
| Element position | Atomic mass | Symbol | Element name |
| --- | --- | --- | --- |
| 6 | 12.011 | C | Carbon |
| 7 | 14.007 | N | Nitrogen |
| 39 | 88.906 | Y | Yttrium |
| 56 | 137.33 | Ba | Barium |
| 58 | 140.12 | Ce | Cerium |

[Sticky header](#sticky-header)
-------------------------------

Set `stickyHeader` to make table header sticky. To customize top position of the header use `stickyHeaderOffset` prop: it is useful when you have a fixed header in your application. For example, Mantine documentation website has a fixed header with 60px height:

| Element position | Element name | Symbol | Atomic mass |
| --- | --- | --- | --- |
| 6 | Carbon | C | 12.011 |
| 7 | Nitrogen | N | 14.007 |
| 39 | Yttrium | Y | 88.906 |
| 56 | Barium | Ba | 137.33 |
| 58 | Cerium | Ce | 140.12 |Scroll page to see sticky thead

[Spacing](#spacing)
-------------------

To control spacing use `horizontalSpacing` and `verticalSpacing` props. Both props support spacing from `theme.spacing` and any valid CSS value to set cell padding:

| Position | Name | Symbol |
| --- | --- | --- |
| 6 | Carbon | C |
| 7 | Nitrogen | N |
| 39 | Yttrium | Y |
| 56 | Barium | Ba |
| 58 | Cerium | Ce |

[Caption and tfoot](#caption-and-tfoot)
---------------------------------------

Table support tfoot and caption elements. Set `captionSide` prop (top or bottom) to change caption position.

Some elements from periodic table
| Element position | Element name | Symbol | Atomic mass |
| --- | --- | --- | --- |
| 6 | Carbon | C | 12.011 |
| 7 | Nitrogen | N | 14.007 |
| 39 | Yttrium | Y | 88.906 |
| 56 | Barium | Ba | 137.33 |
| 58 | Cerium | Ce | 140.12 |
| Element position | Element name | Symbol | Atomic mass |

[Striped and rows hover](#striped-and-rows-hover)
-------------------------------------------------

| Element position | Element name | Symbol | Atomic mass |
| --- | --- | --- | --- |
| 6 | Carbon | C | 12.011 |
| 7 | Nitrogen | N | 14.007 |
| 39 | Yttrium | Y | 88.906 |
| 56 | Barium | Ba | 137.33 |
| 58 | Cerium | Ce | 140.12 |

Striped

Highlight on hover

With table border

With column borders

With row borders

[Scroll container](#scroll-container)
-------------------------------------

To prevent viewport overflow wrap `Table` with `Table.ScrollContainer`. The component accepts `minWidth` prop which sets minimum width below which table will be scrollable.

By default, `Table.ScrollContainer` uses [ScrollArea](https://mantine.dev/core/scroll-area/), you can change it to native scrollbars by setting `type="native"`:

You can also set `maxHeight` prop on `Table.ScrollContainer` to limit table height:

[Vertical variant](#vertical-variant)
-------------------------------------

Set `variant="vertical"` to render table with vertical layout:

<table data-variant="vertical" data-with-table-border="true"><tbody><tr data-with-row-border="true"><th>Epic name</th><td>7.x migration</td></tr><tr data-with-row-border="true"><th>Status</th><td>Open</td></tr><tr data-with-row-border="true"><th>Total issues</th><td>135</td></tr><tr data-with-row-border="true"><th>Total story points</th><td>874</td></tr><tr data-with-row-border="true"><th>Last updated at</th><td>September 26, 2024 17:41:26</td></tr></tbody></table>

[Tabular numbers](#tabular-numbers)
-----------------------------------

Set `tabularNums` prop to render numbers in tabular style. It sets `font-variant-numeric: tabular-nums` which makes numbers to have equal width. This is useful when you have columns with numbers and you want them to be aligned:

| Product | Units sold |
| --- | --- |
| Apples | 2,214,411,234 |
| Oranges | 9,983,812,411 |
| Bananas | 1,234,567,890 |
| Pineapples | 9,948,810,000 |
| Pears | 9,933,771,111 |

[Example: Table with row selection](#example-table-with-row-selection)
----------------------------------------------------------------------

|  | Element position | Element name | Symbol | Atomic mass |
| --- | --- | --- | --- | --- |
|  | 6 | Carbon | C | 12.011 |
|  | 7 | Nitrogen | N | 14.007 |
|  | 39 | Yttrium | Y | 88.906 |
|  | 56 | Barium | Ba | 137.33 |
|  | 58 | Cerium | Ce | 140.12 |</content>
</page>

<page>
  <title>Title | Mantine</title>
  <url>https://mantine.dev/core/title/</url>
  <content>[Usage](#usage)
---------------

Use Title component to render h1-h6 headings with Mantine [theme](https://mantine.dev/theming/theme-object/) styles. By default, `Title` has no margins and paddings. You can change `font-size`, `font-weight` and `line-height` per heading with [theme.headings](https://mantine.dev/theming/typography/).

Set `order` prop to render a specific element (h1-h6), default order is `1`:

This is h1 title
----------------

This is h2 title
----------------

### This is h3 title

#### This is h4 title

##### This is h5 title

###### This is h6 title

[Size](#size)
-------------

You can change Title `size` independent of its `order`:

*   If you set size to `h1`\-`h6`, then component will add corresponding `font-size` and `line-height` from the [theme](https://mantine.dev/theming/theme-object/)
*   If you set size to any other value, then `line-height` will be calculated based on `order` – `size` will impact only `font-size`

### H3 heading with h1 font-size

H1 heading with h4 font-size
----------------------------

H1 heading with 16px size
-------------------------

H1 heading with xs size
-----------------------

[Text wrap](#text-wrap)
-----------------------

Use `textWrap` prop to control [text-wrap](https://developer.mozilla.org/en-US/docs/Web/CSS/text-wrap) CSS property. It controls how text inside an element is wrapped.

### Lorem, ipsum dolor sit amet consectetur adipisicing elit. Quasi voluptatibus inventore iusto cum dolore molestiae perspiciatis! Totam repudiandae impedit maxime!

You can also set `textWrap` on [theme](https://mantine.dev/theming/theme-object/):

[Line clamp](#line-clamp)
-------------------------

Set `lineClamp` prop to truncate text after specified number of lines:

Lorem ipsum dolor sit amet consectetur adipisicing elit. Iure doloremque quas dolorum. Quo amet earum alias consequuntur quam accusamus a quae beatae, odio, quod provident consectetur non repudiandae enim adipisci?
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</content>
</page>

<page>
  <title>TypographyStylesProvider | Mantine</title>
  <url>https://mantine.dev/core/typography-styles-provider/</url>
  <content>Example article
---------------

This is example article from [CSS-Tricks website](https://css-tricks.com/your-team-is-not-them/) written by [Sarah Drasner](https://css-tricks.com/author/sdrasner/). It is used as an example to showcase real world styles of TypographyStylesProvider component, please read full article on [CSS-Tricks website](https://css-tricks.com/your-team-is-not-them/).

Article itself
--------------

Let’s talk for a moment about how we talk about our teams. This might not seem like something that needs a whole article dedicated to it, but it’s actually quite crucial. The way that we refer to our teams sends signals: to stakeholders, to your peers, to the team itself, and even to ourselves. In addressing how we speak about our teams, we’ll also talk about accountability.

I have noticed shared similarities in those folks I consider good managers whose teams deliver well, and those who don’t. It starts with how they communicate about their teams.

### Your team is “we”

There can be a perception that as a manager of an organization you are in control at all times. Part of that control can invariably be perceived as how you appear to be in charge, are competent, or how you personally perform. Due to that, some bad behaviors can arise- not due to malice, but due to fear. For this reason, it can be tempting to take credit for success and avoid credit when there is failure.

The irony is that the more that you try to hold on to these external perceptions, the more it will slip away. Why? **Because the problems you are solving as a manager really aren’t about _you_.**

**Your team is “we”.** You are a driving force of that team, no matter how high up the hierarchy chain. What happens on that team is your responsibility. When you speak about your org, you should include yourself in the statement.

When your team succeeds in something though, then you can praise them and leave yourself out of it. Here’s an example:

_They really pulled this project over the line, despite the incredibly tight project timeline. Everyone showed up and was driven throughout the engagement. They did a fantastic job._

However, if the team failed at something, the pronoun is then **I**:

_I didn’t recognize how tight this turnaround was and failed to prioritize the team’s time well. I need to reconvene with everyone so we can come up with a better plan._

And never, ever **them**:

_They didn’t adhere to this tight timeline. They just weren’t able to get this project over the line._

Do you see how the last example shirks responsibility for what occurred? Too often I will hear managers relieve themselves of their duties when shit hits the fan, and that is exactly when a manager needs to step up, and dive in to the problems that **are their responsibility**.

### The wider organization

There is another piece of this too, and it impacts how your team operates. It’s that your job is not to be the ambassador of who you manage and think of every other group as separate. You're part of a larger system. A company is composed of groups, but those groups can only be successful if they’re working together, not if they are protecting their own org at all costs.

I admit I didn’t fully understand the depth of this until I read Patrick Lencioni’s [_The Advantage_](https://www.amazon.com/Advantage-Organizational-Health-Everything-Business/dp/0470941529/) thanks to Dalia Havens, a peer at Netlify. In the book, Lencioni talks about how organizational health, not “being smart”, as the biggest key to success. Plenty of smart people with good ideas build companies and see them fail. **Success lies in being able to work together.**

Fundamentally, other groups at the company are not separate from your group, rather that you’re all part of one whole. **The Leadership Team is also a team, and should be treated as _your team_. How you speak about this team is equally important.**

As such, when we talk about successes and failures of any groups, these should also be shared. There should be a sense that you’re all working towards a common goal together, and every group contributes to it. Within a leadership team there should be trust and vulnerability to own their part so that the whole organization can operate at its best.</content>
</page>

<page>
  <title>Box | Mantine</title>
  <url>https://mantine.dev/core/box/</url>
  <content>[Usage](#usage)
---------------

`Box` component is used as a base for all other components. `Box` supports the following features:

*   [component prop](https://mantine.dev/guides/polymorphic/)
*   [style props](https://mantine.dev/styles/style-props/)
*   [style prop](https://mantine.dev/styles/style/)

You can use `Box` as a base for your own components or as a replacement for HTML elements:

    import { Box } from '@mantine/core';
    
    function Demo() {
      return (
        <Box bg="red.5" my="xl" component="a" href="/">
          My component
        </Box>
      );
    }

[

TypographyStylesProvider

](https://mantine.dev/core/typography-styles-provider/)[

Collapse

](https://mantine.dev/core/collapse/)</content>
</page>

<page>
  <title>Collapse | Mantine</title>
  <url>https://mantine.dev/core/collapse/</url>
  <content>[Usage](#usage)
---------------

    import { Button, Group, Text, Collapse, Box } from '@mantine/core';
    import { useDisclosure } from '@mantine/hooks';
    
    function Demo() {
      const [opened, { toggle }] = useDisclosure(false);
    
      return (
        <Box maw={400} mx="auto">
          <Group justify="center" mb={5}>
            <Button onClick={toggle}>Toggle content</Button>
          </Group>
    
          <Collapse in={opened}>
            <Text>{/* ... content */}</Text>
          </Collapse>
        </Box>
      );
    }

[Change transition](#change-transition)
---------------------------------------

Set following props to control transition:

*   `transitionDuration` – duration in ms
*   `transitionTimingFunction` – timing function (ease, linear, etc.), defaults to `ease`
*   `onTransitionEnd` – called when transition ends (both open and close)

    import { useDisclosure } from '@mantine/hooks';
    import { Button, Group, Text, Collapse, Box } from '@mantine/core';
    
    function Demo() {
      const [opened, { toggle }] = useDisclosure(false);
    
      return (
        <Box maw={400} mx="auto">
          <Group justify="center" mb={5}>
            <Button onClick={toggle}>Toggle with linear transition</Button>
          </Group>
    
          <Collapse in={opened} transitionDuration={1000} transitionTimingFunction="linear">
            <Text>{/* ...content */}</Text>
          </Collapse>
        </Box>
      );
    }

[Nested Collapse components](#nested-collapse-components)
---------------------------------------------------------</content>
</page>

<page>
  <title>Divider | Mantine</title>
  <url>https://mantine.dev/core/divider/</url>
  <content>[Usage](#usage)
---------------

Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aperiam, officiis! Fugit minus ea, perferendis eum consectetur quae vitae. Aliquid, quam reprehenderit? Maiores sed pariatur aliquid commodi atque sunt officiis natus?

Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aperiam, officiis! Fugit minus ea, perferendis eum consectetur quae vitae. Aliquid, quam reprehenderit? Maiores sed pariatur aliquid commodi atque sunt officiis natus?

Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aperiam, officiis! Fugit minus ea, perferendis eum consectetur quae vitae. Aliquid, quam reprehenderit? Maiores sed pariatur aliquid commodi atque sunt officiis natus?

[Variants](#variants)
---------------------

[With label](#with-label)
-------------------------

Label on the left

Label in the center

Label on the right

Search results

[Sizes](#sizes)
---------------

[Vertical orientation](#vertical-orientation)
---------------------------------------------

Label

Label

Label

Label

Label

Label</content>
</page>

<page>
  <title>FocusTrap | Mantine</title>
  <url>https://mantine.dev/core/focus-trap/</url>
  <content>[Usage](#usage)
---------------

FocusTrap is a component implementation of [use-focus-trap](https://mantine.dev/hooks/use-focus-trap/) hook, it is used in all Mantine components that require focus trap ([Modal](https://mantine.dev/core/modal/), [DatePicker](https://mantine.dev/dates/date-picker/), [Popover](https://mantine.dev/core/popover/), etc.).

[Initial focus](#initial-focus)
-------------------------------

To define the element that will receive initial focus set `data-autofocus` attribute:

[FocusTrap.InitialFocus](#focustrapinitialfocus)
------------------------------------------------

`FocusTrap.InitialFocus` is a special component that adds a visually hidden element which will receive the focus when the focus trap is activated. Once `FocusTrap.InitialFocus` loses focus, it is removed from the tab order.

For example, it is useful if you do not want to focus any elements inside the [Modal](https://mantine.dev/core/modal/) when it is opened:

[Focus trapping logic](#focus-trapping-logic)
---------------------------------------------

*   Focus is trapped within child node if `active` prop is `true`
*   When FocusTrap component is mounted or when `active` prop changes from `false` to `true` first element with `data-autofocus` attribute is focused
*   If there are no elements with `data-autofocus` attribute, then the first element that supports keyboard interaction is focused
*   If the target element does not have focusable elements or does not support `ref`, then the focus trap will not work
*   Trap stops working when element outside of the `FocusTrap` child is focused</content>
</page>

<page>
  <title>Portal | Mantine</title>
  <url>https://mantine.dev/core/portal/</url>
  <content>[Usage](#usage)
---------------

Portal is a wrapper component for [ReactDOM.createPortal](https://reactjs.org/docs/portals.html) API. Render any component or element at the end of `document.body` or at a given element. [Modal](https://mantine.dev/core/modal/) and [Drawer](https://mantine.dev/core/drawer/) components are wrapped in Portal by default.

Use Portal to render a component or an element at a different place (defaults to the end of `document.body`). Portal is useful when you want to prevent parent styles from interfering with children, usually all these styles are related to `position` and `z-index` properties and portals are used for components with fixed position, for example, modals.

In the example above, the div element is rendered outside of parent main (before closing body tag), but still receives `opened` and `onClose` props. The element will not be affected by parent z-index.

[Reuse target node](#reuse-target-node)
---------------------------------------

By default, Portal creates a new target node for each instance. To change this behavior and reuse the same target node for all instances, set `reuseTargetNode` prop. In the following example, all three paragraphs will be rendered in the same target node:

[Specify target DOM node](#specify-target-dom-node)
---------------------------------------------------

You can specify dom node where portal will be rendered by passing `target` prop:

Alternatively, you can specify selector to render portal in existing element:

If you don't specify the target element, new one will be created and appended to the `document.body` for each Portal component.

[Server side rendering](#server-side-rendering)
-----------------------------------------------

`createPortal` is not supported during server side rendering. All components inside Portal are rendered only after the application was mounted to the dom.

[OptionalPortal component](#optionalportal-component)
-----------------------------------------------------

`OptionalPortal` component lets you configure whether children should be rendered in `Portal`. It accepts the same props as the `Portal` component:</content>
</page>

<page>
  <title>Paper | Mantine</title>
  <url>https://mantine.dev/core/paper/</url>
  <content>[Usage](#usage)
---------------

Paper is the most basic ui component

Use it to create cards, dropdowns, modals and other components that require background with shadow

[Polymorphic component](#polymorphic-component)
-----------------------------------------------

`Paper` is a [polymorphic component](https://mantine.dev/guides/polymorphic/) – its default root element is `div`, but it can be changed to any other element or component with `component` prop:

You can also use components in `component` prop, for example, Next.js `Link`:

> **Polymorphic components with TypeScript**
> 
> Note that polymorphic components props types are different from regular components – they do not extend HTML element props of the default element. For example, `PaperProps` does not extend `React.ComponentPropsWithoutRef'<'div'>'` although `div` is the default element.
> 
> If you want to create a wrapper for a polymorphic component that is not polymorphic (does not support `component` prop), then your component props interface should extend HTML element props, for example:
> 
> If you want your component to remain polymorphic after wrapping, use `createPolymorphicComponent` function described in [this guide](https://mantine.dev/guides/polymorphic/).</content>
</page>

<page>
  <title>ScrollArea | Mantine</title>
  <url>https://mantine.dev/core/scroll-area/</url>
  <content>[Usage](#usage)
---------------

`ScrollArea` component supports the following props:

*   `type` defines scrollbars behavior:
    *   `hover` – scrollbars are visible on hover
    *   `scroll` – scrollbars are visible on scroll
    *   `auto` – similar to `overflow: auto` – scrollbars are always visible when the content is overflowing
    *   `always` – same as `auto`, but scrollbars are always visible regardless of whether the content is overflowing
    *   `never` – scrollbars are always hidden
*   `offsetScrollbars` – adds padding to offset scrollbars with the following options:
    *   `x` – adds padding to offset horizontal scrollbar only
    *   `y` – adds padding to offset vertical scrollbar only
    *   `xy` – adds padding to offset both scrollbars
    *   `present` – adds padding only when scrollbars are visible
*   `scrollbarSize` – scrollbar size, controls scrollbar and thumb width/height
*   `scrollHideDelay` – delay in ms to hide scrollbars, applicable only when type is `hover` or `scroll`
*   `overscrollBehavior` – controls [overscroll-behavior](https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior) of the viewport

[Horizontal scrollbars](#horizontal-scrollbars)
-----------------------------------------------

[Disable horizontal scrollbars](#disable-horizontal-scrollbars)
---------------------------------------------------------------

To disable horizontal scrollbars set `scrollbars="y"` prop:

[Subscribe to scroll position changes](#subscribe-to-scroll-position-changes)
-----------------------------------------------------------------------------

Set `onScrollPositionChange` function to subscribe to scroll position changes, it will be called each time user scrolls with x and y coordinates:

Scroll position: `{ x: 0, y: 0 }`

[Scroll to position](#scroll-to-position)
-----------------------------------------

To programmatically scroll to any position, get viewport element ref with `viewportRef` prop and call `scrollTo` method:

[Styles API](#styles-api)
-------------------------

[Scroll element into view](#scroll-element-into-view)
-----------------------------------------------------

[ScrollArea.Autosize](#scrollareaautosize)
------------------------------------------

`ScrollArea.Autosize` component allows to create scrollable containers when given max-height is reached:

[ScrollArea.Autosize with Popover](#scrollareaautosize-with-popover)
--------------------------------------------------------------------</content>
</page>

<page>
  <title>Transition | Mantine</title>
  <url>https://mantine.dev/core/transition/</url>
  <content>[Premade transitions](#premade-transitions)
-------------------------------------------

Mantine includes several premade transitions:

fade

fade-up

fade-down

fade-left

fade-right

scale

scale-y

scale-x

skew-up

skew-down

rotate-left

rotate-right

slide-down

slide-up

slide-left

slide-right

pop

pop-bottom-left

pop-bottom-right

pop-top-left

pop-top-right

To use one of them set `transition` property to one of these values:

[Custom transitions](#custom-transitions)
-----------------------------------------

You can create your own transition. `transition` is an object with 4 properties:

*   `in` – styles for mounted state
*   `out` – styles for unmounted state
*   `common` (optional) – styles for both mounted and unmounted states
*   `transitionProperty` – properties which participate in transition

[Enter and exit delay](#enter-and-exit-delay)
---------------------------------------------

Use `enterDelay` and `exitDelay` props to delay transition start. Values are in milliseconds:</content>
</page>

<page>
  <title>Functions reference | Mantine</title>
  <url>https://mantine.dev/guides/functions-reference/</url>
  <content>This guides contains a list of functions exported from Mantine packages that are not documented anywhere else.

[clamp](#clamp)
---------------

`clamp` function is exported from `@mantine/hooks`. It clamps number within the inclusive lower and upper bounds.

[lowerFirst](#lowerfirst)
-------------------------

`lowerFirst` function is exported from `@mantine/hooks`. It converts first character of a string to lower case.

[upperFirst](#upperfirst)
-------------------------

`upperFirst` function is exported from `@mantine/hooks`. It converts first character of a string to upper case.

[randomId](#randomid)
---------------------

`randomId` function is exported from `@mantine/hooks`. It generates random id with `mantine-` prefix.

[range](#range)
---------------

`range` function is exported from `@mantine/hooks`. It generates array of numbers from `start` to `end` (inclusive).

[shallowEqual](#shallowequal)
-----------------------------

`shallowEqual` function is exported from `@mantine/hooks`. It performs shallow equal check of two objects.</content>
</page>

<page>
  <title>Icons libraries | Mantine</title>
  <url>https://mantine.dev/guides/icons/</url>
  <content>You can use any icons library with Mantine components, most popular options are:

*   [Tabler icons](https://tabler-icons.io/)
*   [Feather icons](https://feathericons.com/)
*   [Radix icons](https://icons.radix-ui.com/)
*   [react-icons](https://react-icons.github.io/react-icons/)
*   [Font Awesome](https://fontawesome.com/v5/docs/web/use-with/react)

[Tabler icons](#tabler-icons)
-----------------------------

[Tabler icons](https://tabler-icons.io/) are used in Mantine demos, documentation and some `@mantine/` packages depend on them. If you do not know which icons library to use, we recommend [Tabler icons](https://tabler-icons.io/).

[Icons size](#icons-size)
-------------------------

Most of the icons libraries support `size` prop (or similar `width` and `height` props) which allows changing icon width and height. Usually, it is a number in pixels.

> **rem units in size prop**
> 
> Icons `size` prop is usually converted to `width` and `height` props under the hood. If you set `size={16}` it will be converted to `width="16"` and `height="16"` attributes on svg element.
> 
> You can use rem units in `size` prop: `size="1rem"` will be converted to `width="1rem"` and `height="1rem"`, but it is not recommended as it is prohibited by SVG standard – some browsers (Firefox) will show a warning in the console.

[Custom icons](#custom-icons)
-----------------------------

It is recommended to use icons as React components. In this case, you will be able to use `currentColor` in the `fill` and `stroke` prop. This will change icon color based on the context it is used in.</content>
</page>

<page>
  <title>Combobox examples | Mantine</title>
  <url>https://mantine.dev/combobox?e=BasicSelect</url>
  <content>[

Basic select

Primitive select component

](https://mantine.dev/combobox/?e=BasicSelect)[

Select with active option

Active option is marked in the dropdown

](https://mantine.dev/combobox/?e=SelectActive)[

Searchable select

Select with search

](https://mantine.dev/combobox/?e=SearchableSelect)[

Select with options limit

100 000 options searchable select

](https://mantine.dev/combobox/?e=SelectLimit)[

Select with custom option

Select with custom option and value component

](https://mantine.dev/combobox/?e=SelectOptionComponent)[

Select with async data

Data is requested only when the dropdown is opened

](https://mantine.dev/combobox/?e=SelectAsync)[

Select with clear button

Clearable select

](https://mantine.dev/combobox/?e=SelectClearable)[

Select with search in dropdown

Select with search input in the dropdown

](https://mantine.dev/combobox/?e=SelectDropdownSearch)[

Select option on hover

Move selection to hovered option

](https://mantine.dev/combobox/?e=SelectOptionOnHover)[

Options groups

Select with options groups

](https://mantine.dev/combobox/?e=SelectGroups)[

Searchable select with groups

Options filtering with grouped data

](https://mantine.dev/combobox/?e=SelectGroupsSearchable)[

Custom group styles

Customize groups styles with Styles API

](https://mantine.dev/combobox/?e=SelectGroupsStyles)[

Creatable select

Select with option to create new options

](https://mantine.dev/combobox/?e=SelectCreatable)

[

Basic autocomplete

Primitive autocomplete component

](https://mantine.dev/combobox/?e=BasicAutocomplete)[

Autocomplete with options limit

100 000 options search

](https://mantine.dev/combobox/?e=AutocompleteLimit)[

Async autocomplete

Autocomplete with async data

](https://mantine.dev/combobox/?e=AsyncAutocomplete)[

Autocomplete with highlight

Autocomplete with highlighted search query in options

](https://mantine.dev/combobox/?e=AutocompleteHighlight)[

Select first option on type

Autocomplete with first option selected when user types

](https://mantine.dev/combobox/?e=AutocompleteSelectFirstOption)[

Dynamic options

Autocomplete with options that depend on the user input

](https://mantine.dev/combobox/?e=AutocompleteDynamic)[

Clearable autocomplete

Autocomplete with clear button

](https://mantine.dev/combobox/?e=AutocompleteClearable)

[

Basic multiselect

Primitive multiselect component

](https://mantine.dev/combobox/?e=BasicMultiSelect)[

Searchable multiselect

Multiselect with search

](https://mantine.dev/combobox/?e=SearchableMultiSelect)[

Max selected options

Limit max number of options that can be selected

](https://mantine.dev/combobox/?e=MaxSelectedItems)[

Multiselect with checkboxes

Multiselect options with checkboxes

](https://mantine.dev/combobox/?e=MultiSelectCheckbox)[

Hide active options

Remove active options from the dropdown

](https://mantine.dev/combobox/?e=ActiveOptionsFilter)[

Max displayed values

Limit max number of values that can be displayed

](https://mantine.dev/combobox/?e=MaxDisplayedItems)[

Custom value pills

Use a custom component to render selected values

](https://mantine.dev/combobox/?e=MultiSelectValueRenderer)[

Creatable multiselect

Multiselect with option to create new options

](https://mantine.dev/combobox/?e=MultiSelectCreatable)

[

Basic button

Primitive combobox with button target

](https://mantine.dev/combobox/?e=BasicButton)[

Button with search in dropdown

Button with search input in the dropdown

](https://mantine.dev/combobox/?e=ButtonSearch)[

Button multi select

Button with multiple items selection

](https://mantine.dev/combobox/?e=ButtonMultiSelect)

[

Dropdown scroll

Dropdown with native scrollbars

](https://mantine.dev/combobox/?e=DropdownScroll)[

Dropdown with ScrollArea

Dropdown with ScrollArea.Autosize scrollbars

](https://mantine.dev/combobox/?e=DropdownScrollArea)[

Dropdown with header

Dropdown with ScrollArea and header

](https://mantine.dev/combobox/?e=DropdownHeader)[

Dropdown with footer

Dropdown with ScrollArea and footer

](https://mantine.dev/combobox/?e=DropdownFooter)[

Dropdown with custom styles

Change dropdown styles with Styles API

](https://mantine.dev/combobox/?e=DropdownPositionStyles)[

Custom selected styles

Customize selected option styles

](https://mantine.dev/combobox/?e=SelectedStyles)

[

Dropdown animation

Dropdown with open/close animation

](https://mantine.dev/combobox/?e=DropdownAnimation)[

Dropdown with option animation

Play options animation on dropdown open

](https://mantine.dev/combobox/?e=DropdownOptionsAnimation)[

Animate selected option

Play options animation on when option is selected

](https://mantine.dev/combobox/?e=SelectedAnimation)[

Smooth scroll

Smooth scroll of the options with keyboard navigation

](https://mantine.dev/combobox/?e=DropdownSmoothScroll)

[

Inline options list

Inline list with checkboxes

](https://mantine.dev/combobox/?e=SelectList)[

Transfer list

Transfer list with search

](https://mantine.dev/combobox/?e=TransferList)

Nothing found...</content>
</page>